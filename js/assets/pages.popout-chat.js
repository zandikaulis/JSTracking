webpackJsonp([34], {
    "+5Qw": function(e, t) {},
    "+V/3": function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "d", function() {
            return r
        }), n.d(t, "a", function() {
            return o
        });
        var i = "subscribe_to_channel",
            a = "turbo",
            r = "visit_url",
            o = "broadcaster"
    },
    "+WrY": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("1F7R"),
            d = n("O0Qc"),
            c = n("OLl6"),
            u = n("uXDg"),
            m = n("qzJ+"),
            p = n("m4HT"),
            h = n("QPF3"),
            g = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleWhisperCommand = function(e) {
                        var n = Object(d.r)(e),
                            i = n.recipientLogin,
                            a = n.body;
                        return i && a ? t.props.isEmbedded || t.props.isPopout ? {
                            deferred: Promise.resolve({
                                notice: Object(s.d)("Please use the whisper window for whispers.", "WhisperCommandHandler")
                            })
                        } : i.toLowerCase() === t.props.userLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(s.d)("You cannot whisper to yourself.", "WhisperCommandHandler")
                            })
                        } : t.props.userID ? t.initiateWhisper(i, a) : void 0 : {
                            preserveInput: !0,
                            deferred: Promise.resolve({
                                notice: Object(s.d)('Usage: "/w [login] [message]"', "WhisperCommandHandler")
                            })
                        }
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(l.a, {
                        command: "w",
                        handler: this.handleWhisperCommand
                    })
                }, t.prototype.initiateWhisper = function(e, t) {
                    var n = this;
                    return {
                        deferred: new Promise(function(a, r) {
                            return i.__awaiter(n, void 0, void 0, function() {
                                var n, o, l, d;
                                return i.__generator(this, function(i) {
                                    switch (i.label) {
                                        case 0:
                                            return i.trys.push([0, 2, , 3]), [4, Object(c.a)(e)];
                                        case 1:
                                            return n = i.sent(), [3, 3];
                                        case 2:
                                            return o = i.sent(), s.j.warn(o, "Failed to fetch user targeted by whisper command.", {
                                                recipientLogin: e
                                            }), [2, r(o)];
                                        case 3:
                                            return n ? [3, 4] : [2, a({
                                                notice: Object(s.d)("No user matching that login.", "WhisperCommandHandler")
                                            })];
                                        case 4:
                                            return i.trys.push([4, 6, , 7]), [4, Object(m.a)({
                                                currentUserID: this.props.userID,
                                                emotes: this.props.emoteMap || {},
                                                message: t,
                                                recipientUserID: n
                                            })];
                                        case 5:
                                            return i.sent(), [3, 7];
                                        case 6:
                                            return l = i.sent(), s.j.error(l, "Failed to send whisper using whisper command.", {
                                                currentUserID: this.props.userID,
                                                recipientUserID: n
                                            }), [2, a({
                                                notice: Object(s.d)("Unable to send Whisper at this moment.", "WhisperCommandHandler")
                                            })];
                                        case 7:
                                            return d = Object(p.a)(this.props.userID, n), this.props.openThread(d), [2, a({})]
                                    }
                                })
                            })
                        })
                    }
                }, t
            }(a.Component);
        var f = Object(r.b)(null, function(e) {
            return Object(o.b)({
                openThread: function(e) {
                    return Object(u.l)({
                        threadID: e,
                        collapsed: !0
                    }, Object(h.a)())
                }
            }, e)
        })(g);
        n.d(t, "a", function() {
            return f
        })
    },
    "+Znq": function(e, t, n) {
        "use strict";
        var i = n("jetF");
        n.d(t, "a", function() {
            return i.a
        })
    },
    "+gWs": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 264
            }
        };
        n.loc.source = {
            body: "query WhisperThread($id: ID!) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n}\nunreadMessagesCount\nmessages(first: 20) {\nedges {\ncursor\nnode {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+po9": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "leaderboardItem"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsLeaderboard"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "items"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "edges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "node"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "entryKey"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "rank"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 106
            }
        };
        n.loc.source = {
            body: "fragment leaderboardItem on BitsLeaderboard {\nitems {\nedges {\ncursor\nnode {\nid\nentryKey\nrank\nscore\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "+xsx": function(e, t) {},
    "/3Lr": function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return s
        }), n.d(t, "c", function() {
            return l
        }), n.d(t, "a", function() {
            return d
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, "e", function() {
            return a
        });
        var i, a, r, o, s = {
                BitsLeaderboardEvents: "leaderboard-events-v1",
                CampaignGlobalEvents: "campaign-events",
                CampaignUserEvents: "user-campaign-events",
                ChannelBitsEvents: "channel-bits-events-v1",
                ChannelBitsPinEvents: "channel-bit-events-public",
                ChannelEventUpdates: "channel-event-updates",
                ChannelSubscribeEvents: "channel-subscribe-events-v1",
                BroadcastSettingsUpdate: "broadcast-settings-update",
                ChatRoom: "chatrooms-room-v1",
                ChatRoomsChannel: "chatrooms-channel-v1",
                ChatRoomsUser: "chatrooms-user-v1",
                Friendship: "friendship",
                ImageUpload: "user-image-update",
                ModerationActionsByUserAndChannel: "chat_moderator_actions",
                OnsiteNotifications: "onsite-notifications",
                PayoutOnboardingEvents: "payout-onboarding-events",
                Presence: "presence",
                Raid: "raid",
                StreamChange: "stream-change-v1",
                StreamChatRoom: "stream-chat-room-v1",
                UploadService: "upload",
                UserBitsUpdates: "user-bits-updates-v1",
                UserCommerceEvents: "user-commerce-events",
                UserCrateEvents: "user-crate-events-v1",
                UserSubscribeEvents: "user-subscribe-events-v1",
                VideoPlayback: "video-playback",
                VideoPlaybackById: "video-playback-by-id",
                VideoThumbnailProcessing: "video-thumbnail-processing",
                Whispers: "whispers"
            },
            l = {
                BitsPinEvent: "bits-pin-event",
                BitsLeaderboardEvent: "bits-leaderboard-event",
                ChannelStreamDown: "stream-down",
                ChannelStreamUp: "stream-up",
                BroadcastSettingsUpdate: "broadcast_settings_update",
                ChatNotification: "chat-notification",
                ChatRoomCreated: "created_room",
                ChatRoomDeleted: "deleted_room",
                ChatRoomUpdated: "updated_room",
                ChatRoomsUserModAction: "user_moderation_action",
                ChatRoomMessageCreated: "created_room_message",
                ChatRoomMessageEdited: "edited_room_message",
                ChatRoomMessageDeleted: "deleted_room_message",
                ChatRoomsRoomViewUpdated: "updated_room_view",
                ImageUploadSuccess: "imageuploadsuccess",
                LiveEvent: "live-event",
                ModerationAction: "moderation_action",
                OnsiteNotificationCreate: "create-notification",
                OnsiteNotificationDelete: "delete-notification",
                OnsiteNotificationsRead: "read-notifications",
                OnsiteNotificationSummaryUpdate: "update-summary",
                OnsiteNotificationUpdate: "update-notification",
                PayoutOnboardingEvent: "payout-onboarding-event",
                Presence: "presence",
                PresenceSettings: "settings",
                PurgeMessageRequest: "purge_messages_request",
                RaidCancel: "raid_cancel",
                RaidUpdate: "raid_update",
                StreamChatRoomChatRichEmbed: "chat_rich_embed",
                StreamDown: "stream_down",
                StreamUp: "stream_up",
                UpdatedChannelChatProperty: "updated_channel_chat_property",
                UploadService: "upload",
                UserBitsBalanceUpdate: "balance_update",
                UserBitsBadgeUpdate: "badge_update",
                UserCampaignProgressEvent: "progress",
                UserCampaignRewardEvent: "reward",
                UserCrateEvent: "crate-event",
                UserGiftEvent: "gift-event",
                UserMention: "user_mention",
                VideoThumbnailProcessingComplete: "processing_complete",
                VideoThumbnailProcessingError: "processing_error",
                ViewCount: "viewcount",
                Vodcast: "watchparty-vod",
                WhisperAllThreadsUpdate: "threads",
                WhisperDeleted: "whisper_deleted",
                WhisperEdited: "whisper_edited",
                WhisperReceived: "whisper_received",
                WhisperSent: "whisper_sent",
                WhisperThreadUpdate: "thread"
            },
            d = {
                Accepted: "accepted",
                Requested: "requested",
                Removed: "removed",
                SelfAccepted: "self_accepted",
                SelfRemoved: "self_removed",
                SelfRequested: "self_requested"
            };
        ! function(e) {
            e.AddBlockedTerm = "add_blocked_term", e.AddPermittedTerm = "add_permitted_term", e.AutoModEnabled = "automod_enabled", e.AutoModRejected = "automod_rejected", e.Ban = "ban", e.Clear = "clear", e.DeleteBlockedTerm = "delete_blocked_term", e.DeletePermittedTerm = "delete_permitted_term", e.EmoteOnly = "emoteonly", e.EmoteOnlyOff = "emoteonlyoff", e.FollowersOnly = "followers", e.FollowersOnlyOff = "followersoff", e.Host = "host", e.Mod = "mod", e.ModifiedAutoModProperties = "modified_automod_properties", e.R9kBeta = "r9kbeta", e.R9kBetaOff = "r9kbetaoff", e.Raid = "raid", e.Slow = "slow", e.SlowOff = "slowoff", e.SubsBeta = "subsbeta", e.SubscribersOnly = "subscribers", e.SubscribersOnlyOff = "subscribersoff", e.Timeout = "timeout", e.Unban = "unban", e.Unhost = "unhost", e.Unmod = "unmod", e.Unraid = "unraid", e.Untimeout = "untimeout"
        }(i || (i = {})),
        function(e) {
            e.AutoModMessageRejected = "automod_message_rejected", e.AutoModMessageApproved = "automod_message_approved", e.AutoModMessageDenied = "automod_message_denied"
        }(a || (a = {})),
        function(e) {
            e.Archive = "archive", e.Highlight = "highlight", e.Upload = "upload", e.Premiere = "premiere", e.Rerun = "rerun", e.WatchPartyPremiere = "watch_party_premiere", e.WatchPartyRerun = "watch_party_rerun"
        }(r || (r = {})),
        function(e) {
            e.Private = "private", e.Public = "public"
        }(o || (o = {}))
    },
    "/LBW": function(e, t, n) {
        "use strict";
        t.h = function(e) {
            var t = {
                action_name: e.actionName,
                action_type: "click",
                client_time: (new Date).getTime(),
                displayed_balance: e.displayedBalance,
                emote_level: e.emoteLevel,
                emote_type: e.emoteType,
                bits_location: e.location || o.ChatTooltip
            };
            i.n.track(a.SpadeEventType.BitsCardInteraction, t)
        }, n.d(t, "b", function() {
            return o
        }), n.d(t, "a", function() {
            return s
        }), t.d = function(e) {
            if (e && l[e]) return l[e];
            return i.j.error(new Error('Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), 'Buy Bits card contains improperly rendered offers, or offers unknown to Science. Tracking as "buy_100"'), s.Buy100
        }, t.e = function(e) {
            var t = {
                channel: e.channel,
                channel_id: e.channelID,
                available: e.available,
                host: "twitch.tv"
            };
            i.n.track(a.SpadeEventType.BitsAdsAvailability, t)
        }, t.f = function(e) {
            var t = {
                distinct_id: i.o.session.deviceID,
                host: "twitch.tv",
                request_id: e.requestID,
                campaign_id: e.campaignID,
                adblock: e.adblock
            };
            i.n.track(a.SpadeEventType.BitsAdsImpression, t)
        }, n.d(t, "c", function() {
            return r
        }), t.g = function(e) {
            var t = i.n.getLastPageview(),
                n = {
                    location: t && t.location || "",
                    ad_returned: null,
                    campaign_id: e.campaignID,
                    distinct_id: i.o.session.deviceID,
                    host: "twitch.tv",
                    request_id: e.requestID,
                    request_method: e.requestMethod
                };
            i.n.track(a.SpadeEventType.BitsAdsRequest, n)
        }, t.i = function(e) {
            var t = {
                leaderboard_size: e.leaderboardSize,
                leaderboard_mode: e.leaderboardMode,
                user_present_in_leaderboard: e.userPresentInLeaderboard,
                user_id: e.userID,
                channel_id: e.channelID
            };
            i.n.track(a.SpadeEventType.LeaderboardExpandClick, t)
        };
        var i = n("6sO2"),
            a = n("vH/s");
        var r, o = {
                ChatTooltip: "card",
                GetBitsButton: "get_bits_button",
                BitsLandingPage: "bits_landing_page"
            },
            s = {
                BuyMain: "buy_main",
                Buy100: "buy_100",
                Buy500: "buy_500",
                Buy1000: "buy_1000",
                Buy1500: "buy_1500",
                Buy5000: "buy_5000",
                Buy10000: "buy_10000",
                Buy25000: "buy_25000",
                CloseCard: "menu_close",
                OpenCard: "menu_open",
                PreviewEmote: "emote_preview",
                WatchAd: "watch_ad",
                WatchAnotherAd: "watch_another_ad",
                CheeringInRoom: "cheering_in_room"
            },
            l = {
                100: s.Buy100,
                500: s.Buy500,
                1000: s.Buy1000,
                1500: s.Buy1500,
                5000: s.Buy5000,
                10000: s.Buy10000,
                25000: s.Buy25000
            };
        ! function(e) {
            e.ShowAdButton = "show_ad_button"
        }(r || (r = {}))
    },
    "/UH7": function(e, t, n) {
        "use strict";
        var i = n("2KeS"),
            a = n("6sO2"),
            r = n("TToO"),
            o = n("LIeg"),
            s = n("uXDg"),
            l = 234,
            d = 310;

        function c(e) {
            if (0 === e.openedIDs.length) return 0;
            for (var t = 0, n = 0, i = e.openedIDs; n < i.length; n++) {
                var a = i[n],
                    r = e.byID[a];
                r.hidden || (t += r.collapsed ? l : d)
            }
            return t
        }

        function u(e) {
            var t = e.openedIDs.slice(),
                n = t.pop();
            return n && e.focusedID === n && t.length > 0 && (t.pop(), t.push(n)), o(e, function(e) {
                return e.openedIDs
            }, function() {
                return t
            })
        }

        function m(e, t) {
            var n = e.orderedIDs.filter(function(t) {
                return !e.openedIDs.includes(t)
            });
            return n.length > 0 ? p(e, n[0], t) : e
        }

        function p(e, t, n) {
            var i = n - c(e),
                a = r.__assign({}, e);
            return a.openedIDs.includes(t) || (i < d && (a = u(a)), a = o(a, function(e) {
                return e.openedIDs
            }, function(e) {
                return e.push(t), e
            })), a
        }

        function h(e, t, n) {
            if (!e.byID[t]) return e;
            var i = o(e, function(e) {
                return e.byID
            }, function(e) {
                return e[t].collapsed = !1, e
            });
            return i.focusedID = t, c(e) > n && (i = u(i)), i
        }
        var g = n("5k1t");
        t.b = function(e, t) {
            if (e.whispers) return e.whispers.display.byID[t];
            return null
        }, t.a = function(e, t) {
            return e.whispers.notifications.byThreadID[t] || v
        };
        var f = Object(i.c)({
            display: function(e, t) {
                switch (void 0 === e && (e = {
                    byID: {},
                    orderedIDs: [],
                    openedIDs: [],
                    focusedID: ""
                }), t.type) {
                    case s.f:
                        var n = (a = r.__assign({}, e)).byID[t.data.threadID],
                            i = a.openedIDs.includes(t.data.threadID);
                        return n || (a = o(a, function(e) {
                            return e.orderedIDs
                        }, function(e) {
                            return e.push(t.data.threadID), e
                        }), a = o(a, function(e) {
                            return e.byID
                        }, function(e) {
                            return e[t.data.threadID] = t.data, e
                        })), a.openedIDs.includes(t.data.threadID) && !a.byID[t.data.threadID].hidden || (a.byID[t.data.threadID].hidden = t.data.hidden), t.data.ignoreCollapseIfOpen || t.data.collapsed || (a.focusedID = t.data.threadID), a = p(a, t.data.threadID, t.contentWidth), (!i || i && !t.data.ignoreCollapseIfOpen) && (t.data.collapsed || (a = h(a, t.data.threadID, t.contentWidth))), a;
                    case s.b:
                        if (!e.byID[t.threadID]) return e;
                        var a = o(e, function(e) {
                            return e.byID
                        }, function(e) {
                            return delete e[t.threadID], e
                        });
                        return a = o(a, function(e) {
                            return e.orderedIDs
                        }, function(e) {
                            return e.filter(function(e) {
                                return e !== t.threadID
                            })
                        }), a = o(a, function(e) {
                            return e.openedIDs
                        }, function(e) {
                            return e.filter(function(e) {
                                return e !== t.threadID
                            })
                        }), e.focusedID === t.threadID && (a.focusedID = a.openedIDs[0]), m(a, t.contentWidth);
                    case s.c:
                        return e.byID[t.threadID] ? (e.focusedID === t.threadID && (e.focusedID = ""), o(e, function(e) {
                            return e.byID
                        }, function(e) {
                            return e[t.threadID].collapsed = !0, e
                        })) : e;
                    case s.d:
                        return h(e, t.threadID, t.contentWidth);
                    case s.e:
                        return o(e, function(e) {
                            return e.focusedID
                        }, function() {
                            return t.threadID
                        });
                    case s.g:
                        return o(e, function(e) {
                            return e.focusedID
                        }, function(e) {
                            return e === t.threadID ? "" : e
                        });
                    case s.a:
                        var l = c(e);
                        if (l > t.contentWidth) {
                            if (e.openedIDs.length <= 1) return e;
                            for (var g = r.__assign({}, e); l > t.contentWidth && g.openedIDs.length > 1;) l = c(g = u(g));
                            return g
                        }
                        if (t.contentWidth - l >= d) {
                            var f = Math.floor((t.contentWidth - l) / d),
                                v = Math.min(f, e.orderedIDs.length - e.openedIDs.length);
                            if (0 === v) return e;
                            g = r.__assign({}, e);
                            for (var b = 0; b < v; b++)
                                if ((g = m(g, t.contentWidth)).openedIDs.length > 1)
                                    for (var k = g.openedIDs, y = k.length, _ = 0, C = g.orderedIDs; _ < C.length; _++) {
                                        var S = C[_];
                                        if (k[y - 1] === S) {
                                            var E = k.splice(y - 2, 1);
                                            k.push(E[0]);
                                            break
                                        }
                                        if (k[y - 2] === S) break
                                    }
                                return g
                        }
                        return e;
                    default:
                        return e
                }
            },
            notifications: function(e, t) {
                switch (void 0 === e && (e = {
                    byThreadID: {}
                }), t.type) {
                    case g.a:
                        return e.byThreadID[t.threadID] ? o(e, function(e) {
                            return e.byThreadID[t.threadID]
                        }, function(e) {
                            return [{
                                threadID: t.threadID,
                                afterMessageID: t.afterMessageID,
                                content: t.content
                            }].concat(e)
                        }) : o(e, function(e) {
                            return e.byThreadID
                        }, function(e) {
                            return r.__assign(((n = {})[t.threadID] = [{
                                threadID: t.threadID,
                                afterMessageID: t.afterMessageID,
                                content: t.content
                            }], n), e);
                            var n
                        });
                    default:
                        return e
                }
            }
        });
        var v = [];
        a.o.store.registerReducer("whispers", f)
    },
    "/eFD": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatSettings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "blockLinks"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "rules"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "chatDelayMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "query Chat_ChannelData($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\nlogin\ndisplayName\nchatSettings {\nblockLinks\nrules\nchatDelayMs\n}\nself {\nisModerator\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "/eRw": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RoomPane_SendRoomMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendRoomMessageInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sendRoomMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "deletedAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "roomMessageContent"
                                        },
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sender"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "login"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatColor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "slowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "remainingDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 338
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/rooms/models/room-message-content-fragment.gql"\nmutation RoomPane_SendRoomMessage($input: SendRoomMessageInput!) {\nsendRoomMessage(input: $input) {\nmessage {\nid\ndeletedAt\nsentAt\n...roomMessageContent\nsender {\nid\nlogin\nchatColor\ndisplayName\n}\n}\nerror {\ncode\nslowModeDurationSeconds\nremainingDurationSeconds\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("2LJg").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "0Hcb": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_AcceptFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AcceptFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "acceptFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "friendButtonFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nmutation FriendButton_AcceptFriendRequest($input: AcceptFriendRequestInput!) {\nacceptFriendRequest(input: $input) {\nuser {\nid\n...friendButtonFragment\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "0ImK": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "embeddedEmote"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "EmbeddedEmote"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "emoteID"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "from"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "to"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 65
            }
        };
        n.loc.source = {
            body: "fragment embeddedEmote on EmbeddedEmote {\nemoteID\nsetID\nfrom\nto\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "0Yyt": function(e, t) {},
    "11M/": function(e, t, n) {
        "use strict";
        n("jIAO");
        var i, a = n("RH2O"),
            r = n("Aj/L"),
            o = n("TToO"),
            s = n("GiK3"),
            l = n("7vx8"),
            d = n("3zLD"),
            c = n("2KeS"),
            u = n("6sO2"),
            m = n("NXs7"),
            p = n("QKs+"),
            h = n("Ldv2"),
            g = n("NikC"),
            f = n("ZVME"),
            v = n("0nzt"),
            b = n("1F7R"),
            k = n("J4ib"),
            y = n("Y5T0");
        ! function(e) {
            e.Recent = "RECENT", e.Top = "TOP"
        }(i || (i = {}));
        var _, C = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.unpinRecentCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return o.__awaiter(t, void 0, void 0, function() {
                                    return o.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: i.Recent
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(k.d)("Recent cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t.resetTopCheer = function() {
                        return {
                            deferred: new Promise(function(e) {
                                return o.__awaiter(t, void 0, void 0, function() {
                                    return o.__generator(this, function(t) {
                                        switch (t.label) {
                                            case 0:
                                                return [4, this.props.dismissPinnedCheer({
                                                    variables: {
                                                        input: {
                                                            targetID: this.props.channelID,
                                                            type: i.Top
                                                        }
                                                    }
                                                })];
                                            case 1:
                                                return t.sent(), e({
                                                    notice: Object(k.d)("Top cheer successfully removed", "BitsCommandHandler")
                                                }), [2]
                                        }
                                    })
                                })
                            })
                        }
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return s.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, s.createElement(b.a, {
                        command: "unpin",
                        handler: this.unpinRecentCheer
                    }), s.createElement(b.a, {
                        command: "reset",
                        handler: this.resetTopCheer
                    }))
                }, t = o.__decorate([Object(l.a)(y, {
                    name: "dismissPinnedCheer"
                })], t)
            }(s.Component),
            S = n("iydZ"),
            E = n("bkpq"),
            N = n("uLsu"),
            T = n("+WrY"),
            w = n("HW6M"),
            D = n("RweG"),
            R = n("aMxy"),
            O = n("oIkB"),
            I = n("HZww"),
            M = n("vH/s"),
            x = n("iMOk"),
            j = n("Odds"),
            L = (n("y0i/"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        formInputValue: "",
                        sharing: !1
                    }, t.hasUnmounted = !1, t.handleShareClick = function() {
                        return o.__awaiter(t, void 0, void 0, function() {
                            return o.__generator(this, function(e) {
                                switch (e.label) {
                                    case 0:
                                        this.setState({
                                            sharing: !0
                                        }), e.label = 1;
                                    case 1:
                                        return e.trys.push([1, , 3, 4]), [4, this.props.onShare(this.state.formInputValue)];
                                    case 2:
                                        return e.sent(), [3, 4];
                                    case 3:
                                        return this.hasUnmounted || this.setState({
                                            sharing: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.onInputChange = function(e) {
                        t.setState({
                            formInputValue: e.currentTarget.value
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.hasUnmounted = !1
                }, t.prototype.componentWillUnmount = function() {
                    this.hasUnmounted = !0
                }, t.prototype.render = function() {
                    var e = w("share-input", {
                            "share-input--hidden": this.props.hide
                        }),
                        t = this.state.formInputValue.length > 255,
                        n = t ? "-" + (this.state.formInputValue.length - 255) : Object(u.d)("Share", "ChatResubNotification"),
                        i = Object(u.d)("Close", "ChatResubNotification"),
                        a = Object(u.d)("Add a message to the streamer", "ChatResubNotification"),
                        r = this.state.sharing ? j.A.Loading : j.A.Default;
                    return s.createElement(j._8, {
                        className: e,
                        padding: 1,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: j._15.Absolute
                    }, s.createElement(j._35, {
                        className: "share-input__container",
                        position: j._15.Relative,
                        border: !0,
                        background: j.n.Base,
                        padding: 1
                    }, s.createElement(j._8, {
                        position: j._15.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, s.createElement(j.w, {
                        ariaLabel: i,
                        onClick: this.props.onClose,
                        type: j.y.Secondary,
                        icon: j._25.Close,
                        "data-a-target": "resub-notification-close-form-btn",
                        "data-test-selector": "share-input__close-form-btn"
                    })), s.createElement(j._8, {
                        textAlign: j._45.Center,
                        padding: {
                            top: 1,
                            bottom: 2
                        }
                    }, this.props.children), s.createElement(j._8, {
                        display: j.R.Flex,
                        flexWrap: j.U.NoWrap
                    }, s.createElement(j._8, {
                        fullWidth: !0
                    }, s.createElement(j._4, {
                        autoFocus: !0,
                        type: j._5.Text,
                        value: this.state.formInputValue,
                        onChange: this.onInputChange,
                        placeholder: a,
                        "data-a-target": "resub-notification-share-message-input",
                        "data-test-selector": "share-input__share-message-input"
                    })), s.createElement(j.v, {
                        disabled: t,
                        onClick: this.handleShareClick,
                        "data-a-target": "resub-notification-send-msg-btn",
                        "data-test-selector": "share-input__send-msg-btn",
                        state: r
                    }, n))))
                }, t
            }(s.Component)),
            A = (n("54rb"), function(e) {
                var t = Object(u.d)("Share", "Chat--SharePrompt"),
                    n = Object(u.d)("Close", "Chat--SharePrompt"),
                    i = w("chat-share-prompt", {
                        "chat-share-prompt--hidden": e.hide || !e.children
                    });
                return s.createElement(j._8, {
                    position: j._15.Absolute,
                    fullWidth: !0,
                    className: i,
                    padding: {
                        y: .5,
                        left: .5
                    }
                }, s.createElement(j._8, {
                    display: j.R.Flex,
                    padding: 1,
                    justifyContent: j._7.Between,
                    alignItems: j.c.Center,
                    flexWrap: j.U.NoWrap
                }, s.createElement(j.Q, {
                    "data-a-target": "resub-notification-months-subbed-text",
                    "data-test-selector": "share-prompt__text"
                }, e.children), s.createElement(j._8, {
                    display: j.R.Flex,
                    flexWrap: j.U.NoWrap,
                    alignItems: j.c.Center,
                    flexShrink: 0,
                    padding: {
                        left: .5
                    }
                }, s.createElement(j._8, {
                    display: j.R.Inline,
                    padding: {
                        right: .5
                    },
                    flexShrink: 0
                }, s.createElement(j.v, {
                    onClick: e.onClickShare,
                    size: j.z.Small,
                    "data-a-target": "resub-notification-share-notification-btn",
                    "data-test-selector": "share-prompt__share-btn"
                }, t)), s.createElement(j._8, {
                    flexShrink: 0
                }, s.createElement(j.w, {
                    ariaLabel: n,
                    onClick: e.onClickClose,
                    type: j.y.Secondary,
                    icon: j._25.Close,
                    "data-a-target": "resub-notification-close-notification-btn",
                    "data-test-selector": "share-prompt__close-btn"
                })))))
            }),
            F = n("Tzcg"),
            U = n("xZvS"),
            B = n("cxe8"),
            P = n("QNxL"),
            V = (n("BTUa"), "chat_dismiss"),
            W = "chat_share",
            H = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.purchaseTokensExist = function(e) {
                        return e.data.user.self && e.data.user.self.purchaseTokens.length > 0
                    }, t.manageParentSpace = function(e) {
                        t.dataIsReady(e) && t.purchaseTokensExist(e) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissPurchaseToken = function() {
                        return o.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return o.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), n.label = 1;
                                    case 1:
                                        return n.trys.push([1, , 3, 4]), e = this.props.data.user.self.purchaseTokens[0], t = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(O.e)(B, {
                                            channelLogin: this.props.channelLogin
                                        }, t), u.n.track(M.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: e.asin,
                                            item_name: e.title,
                                            context: V,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), [4, this.props.dismissPurchaseToken(Object(O.a)({
                                            token: e.id,
                                            channelID: this.props.data.user.id
                                        }))];
                                    case 2:
                                        return n.sent(), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t.sharePurchase = function(e) {
                        return o.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return o.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.purchaseTokens) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, , 3, 4]), t = this.props.data.user.self.purchaseTokens[0], [4, this.props.sharePurchaseTokenInChat(Object(O.a)({
                                            token: t.id,
                                            channelID: this.props.data.user.id,
                                            message: e
                                        }))];
                                    case 2:
                                        return i.sent(), u.n.track(M.SpadeEventType.FuelSocialShare, {
                                            channel_id: this.props.data.user.id,
                                            user_id: this.props.currentUserID,
                                            asin: t.asin,
                                            item_name: t.title,
                                            context: W,
                                            context_details: e,
                                            payout_enabled: this.props.data.user.settings.isCommerceRevShareEnabled
                                        }), n = function(e) {
                                            return e.user.self && (e.user.self.purchaseTokens = e.user.self.purchaseTokens.slice(1)), e
                                        }, Object(O.e)(B, {
                                            channelLogin: this.props.channelLogin
                                        }, n), [3, 4];
                                    case 3:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 4:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (this.dataIsReady(e)) {
                        var t = e.pubsub.messages.userCommerceUpdateEvent,
                            n = this.props.pubsub.messages.userCommerceUpdateEvent,
                            i = !n && t,
                            a = n && t && n.time !== t.time;
                        (i || a) && this.props.data && this.props.data.refetch()
                    }
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.purchaseTokensExist(this.props) && this.props.data.user.self ? this.renderPurchaseToken(this.props.data.user.self.purchaseTokens[0]) : null
                }, t.prototype.renderPurchaseToken = function(e) {
                    var t, n;
                    t = this.props.data.user.settings.isCommerceRevShareEnabled ? Object(u.d)("You bought {product} and supported {channelName}!", {
                        product: s.createElement("strong", null, e.title),
                        channelName: s.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat") : Object(u.d)("You bought {product} while watching {channelName}!", {
                        product: s.createElement("strong", null, e.title),
                        channelName: s.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat");
                    var i = e.inGameContents.map(this.renderLootInGameContent),
                        a = e.badges.map(this.renderLootBadge),
                        r = e.emoteSets.map(this.renderLootEmoteSet),
                        o = e.bits.map(this.renderLootBits, this);
                    return (i.length || a.length || r.length || o.length) && (n = s.createElement(j._8, {
                        "data-test-selector": "share-purchase__loot",
                        padding: {
                            bottom: 1
                        },
                        display: j.R.Flex,
                        justifyContent: j._7.Center
                    }, i, a, r, o), t = Object(u.d)("You bought {product} and opened a Twitch Crate! Let {channelName} know you shared the love.", {
                        product: s.createElement("strong", null, e.title),
                        channelName: s.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat")), s.createElement(j._8, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: j._15.Absolute
                    }, s.createElement(A, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissPurchaseToken
                    }, t), s.createElement(L, {
                        hide: !this.state.showMessageInput,
                        onShare: this.sharePurchase,
                        onClose: this.toggleContentShown
                    }, s.createElement(j._8, {
                        padding: {
                            bottom: 1
                        }
                    }, s.createElement("figure", null, s.createElement("img", {
                        width: 40,
                        height: 40,
                        src: e.imageThumbnail
                    }))), n, s.createElement(j.Q, null, Object(u.d)("Score! Give a shout out to {channelName} in Chat about all your sweet loot!", {
                        channelName: s.createElement("strong", null, this.props.channelDisplayName)
                    }, "ShareToChat"))))
                }, t.prototype.renderLootInGameContent = function(e) {
                    return s.createElement(j._8, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__igc"
                    }, s.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.imageURL
                    }))
                }, t.prototype.renderLootEmoteSet = function(e) {
                    return Object(F.b)(e.emoteSet.emotes).map(function(e) {
                        return s.createElement(j._8, {
                            key: e.id,
                            margin: {
                                top: .5,
                                right: 1
                            },
                            "data-test-selector": "share-purchase__emoticon"
                        }, s.createElement("img", {
                            className: "share-to-chat__loot",
                            srcSet: e.srcSet,
                            alt: e.displayName
                        }))
                    })
                }, t.prototype.renderLootBadge = function(e) {
                    return s.createElement(j._8, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__badge"
                    }, s.createElement("img", {
                        className: "share-to-chat__loot",
                        src: e.badge.image2x
                    }))
                }, t.prototype.renderLootBits = function(e) {
                    if (this.props.bitsConfig) return s.createElement(j._8, {
                        key: e.id,
                        margin: {
                            top: .5,
                            right: 1
                        },
                        "data-test-selector": "share-purchase__bits"
                    }, s.createElement(x.a, {
                        count: e.quantity,
                        bitsConfig: this.props.bitsConfig,
                        withImage: !0
                    }))
                }, t = o.__decorate([Object(l.a)(B, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                }), Object(D.a)([{
                    topic: function(e) {
                        return Object(I.v)(e.currentUserID)
                    },
                    mapMessageTypesToProps: (_ = {}, _[R.PubsubMessageType.ChatNotification] = "userCommerceUpdateEvent", _)
                }])], t)
            }(s.Component),
            G = Object(l.a)(U, {
                name: "dismissPurchaseToken"
            })(Object(l.a)(P, {
                name: "sharePurchaseTokenInChat"
            })(H));
        var z = Object(a.b)(function(e) {
                return {
                    currentUserID: e.session.user && "" + e.session.user.id || ""
                }
            })(G),
            q = (n("e9ZN"), function(e) {
                var t = w("rare-emote__face", {
                        "rare-emote__face--animate": !!e.animate
                    }),
                    n = w("rare-emote__neck", {
                        "rare-emote__neck--animate": !!e.animate
                    });
                return s.createElement(j._8, {
                    overflow: j._11.Hidden,
                    className: "rare-emote"
                }, s.createElement(j._2, {
                    zIndex: j._62.Above,
                    position: j._15.Relative
                }, s.createElement("img", {
                    className: t,
                    src: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.emoteID + "/2.0"
                })), s.createElement(j._8, {
                    position: j._15.Relative,
                    zIndex: j._62.Default,
                    className: n
                }, s.createElement(j._24, {
                    width: 28,
                    height: 28,
                    asset: j._25.Neck
                })))
            }),
            Q = 3;
        var K, $ = n("nEoF"),
            Y = n("S20p"),
            J = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        resubDismissed: !1,
                        showMessageInput: !1,
                        sendingMessage: !1
                    }, t.randomEmoteId = t.getRandomEmoteId(), t.dataIsReady = function(e) {
                        return e.data && !e.data.loading && !e.data.error
                    }, t.resubExists = function(e, t) {
                        return e.data.user.self && e.data.user.self.resubNotification && !t.resubDismissed
                    }, t.manageParentSpace = function() {
                        t.dataIsReady(t.props) && t.resubExists(t.props, t.state) ? t.props.requestSpace() : t.props.dismissSpace()
                    }, t.toggleContentShown = function() {
                        t.setState(function(e) {
                            return {
                                showMessageInput: !e.showMessageInput
                            }
                        })
                    }, t.dismissResubNotification = function() {
                        t.setState({
                            resubDismissed: !0
                        })
                    }, t.shareResub = function(e) {
                        return o.__awaiter(t, void 0, void 0, function() {
                            var t, n;
                            return o.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        if (this.state.sendingMessage || !this.props.data.user.self || !this.props.data.user.self.resubNotification) return [2];
                                        this.setState({
                                            sendingMessage: !0
                                        }), i.label = 1;
                                    case 1:
                                        return i.trys.push([1, 4, 5, 6]), this.props.authToken ? [4, function(e, t, n, i) {
                                            return o.__awaiter(this, void 0, void 0, function() {
                                                var a, r, s;
                                                return o.__generator(this, function(o) {
                                                    switch (o.label) {
                                                        case 0:
                                                            a = "https://api.twitch.tv/api/channels/" + e + "/use_chat_notification_token", r = 1, o.label = 1;
                                                        case 1:
                                                            if (!(r <= Q)) return [3, 7];
                                                            o.label = 2;
                                                        case 2:
                                                            return o.trys.push([2, 5, , 6]), [4, fetch(a, {
                                                                body: JSON.stringify({
                                                                    token_id: t,
                                                                    custom_message: n
                                                                }),
                                                                method: "POST",
                                                                headers: {
                                                                    "Client-ID": u.o.config.legacyClientID,
                                                                    Accept: "application/json; charset=UTF-8",
                                                                    "content-type": "application/json; charset=UTF-8",
                                                                    Authorization: "OAuth " + i
                                                                }
                                                            })];
                                                        case 3:
                                                            return [4, o.sent().json()];
                                                        case 4:
                                                            return [2, o.sent()];
                                                        case 5:
                                                            if (s = o.sent(), r === Q) throw s;
                                                            return [3, 6];
                                                        case 6:
                                                            return ++r, [3, 1];
                                                        case 7:
                                                            return [2]
                                                    }
                                                })
                                            })
                                        }(this.props.channelLogin, this.props.data.user.self.resubNotification.token, e, this.props.authToken)] : [3, 3];
                                    case 2:
                                        i.sent(), t = function(e) {
                                            return e.user.self && (e.user.self.resubNotification = null), e
                                        }, Object(O.e)(Y, {
                                            channelLogin: this.props.channelLogin
                                        }, t), this.dismissResubNotification(), i.label = 3;
                                    case 3:
                                        return [3, 6];
                                    case 4:
                                        return n = i.sent(), u.j.error(n, "Failed to post resub message"), [3, 6];
                                    case 5:
                                        return this.setState({
                                            sendingMessage: !1
                                        }), [7];
                                    case 6:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.manageParentSpace()
                }, t.prototype.componentDidUpdate = function() {
                    this.manageParentSpace()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.dataIsReady(e) && e.data.user.self && e.data.user.self.resubNotification && !this.randomEmoteId && (this.randomEmoteId = this.getRandomEmoteId())
                }, t.prototype.render = function() {
                    return this.dataIsReady(this.props) && this.resubExists(this.props, this.state) && this.props.data.user.self && this.props.data.user.self.resubNotification ? this.renderResubToken(this.props.data.user.self.resubNotification) : null
                }, t.prototype.renderResubToken = function(e) {
                    return s.createElement(j._8, {
                        className: "chat-resub-notification",
                        padding: 0,
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        position: j._15.Absolute
                    }, s.createElement(A, {
                        hide: this.state.showMessageInput,
                        onClickShare: this.toggleContentShown,
                        onClickClose: this.dismissResubNotification
                    }, Object(u.d)("It's your {monthsSubbed, number} month anniversary!", {
                        monthsSubbed: e.months
                    }, "ChatResubNotification")), s.createElement(L, {
                        hide: !this.state.showMessageInput,
                        onShare: this.shareResub,
                        onClose: this.toggleContentShown
                    }, s.createElement(q, {
                        emoteID: this.randomEmoteId,
                        animate: this.state.showMessageInput
                    }), s.createElement(j.Q, null, Object(u.d)("Hooray! Let {channelName} know it's your {monthsSubbed, number} month anniversary.", {
                        channelName: s.createElement("strong", null, this.props.channelDisplayName),
                        monthsSubbed: e.months
                    }, "ChatResubNotification"))))
                }, t.prototype.getRandomEmoteId = function() {
                    var e = Math.floor(Math.random() * $.b.length);
                    return $.b[e]
                }, t = o.__decorate([Object(l.a)(Y, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.channelLogin
                    }
                })], t)
            }(s.Component);
        n("NZkJ");
        ! function(e) {
            e[e.Resub = 1] = "Resub", e[e.Purchase = 2] = "Purchase"
        }(K || (K = {}));
        var Z = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        requestedSpaces: new Set
                    }, t.addSpace = function(e) {
                        t.state.requestedSpaces.has(e) || t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.add(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.removeSpace = function(e) {
                        t.state.requestedSpaces.has(e) && t.setState(function(t) {
                            var n = new Set(t.requestedSpaces);
                            return n.delete(e), {
                                requestedSpaces: n
                            }
                        })
                    }, t.requestResubSpace = function() {
                        t.addSpace(K.Resub)
                    }, t.dismissResubSpace = function() {
                        t.removeSpace(K.Resub)
                    }, t.requestPurchaseSpace = function() {
                        t.addSpace(K.Purchase)
                    }, t.dismissPurchaseSpace = function() {
                        t.removeSpace(K.Purchase)
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    var e = null;
                    this.state.requestedSpaces.size && (e = Array.from(this.state.requestedSpaces.values()).sort()[0]);
                    var t = w({
                            "share-to-chat__space--hidden": e !== K.Resub
                        }),
                        n = w({
                            "share-to-chat__space--hidden": e !== K.Purchase
                        });
                    return s.createElement(j._8, null, s.createElement(j._8, {
                        className: t
                    }, s.createElement(J, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        requestSpace: this.requestResubSpace,
                        dismissSpace: this.dismissResubSpace
                    })), s.createElement(j._8, {
                        className: n
                    }, s.createElement(z, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig,
                        requestSpace: this.requestPurchaseSpace,
                        dismissSpace: this.dismissPurchaseSpace
                    })))
                }, t
            }(s.Component),
            X = n("vh75"),
            ee = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        show: !0
                    }, t.dismiss = function() {
                        t.setState({
                            show: !1
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.hostedChannelDisplayName !== this.props.hostedChannelDisplayName && this.setState({
                        show: !0
                    })
                }, t.prototype.render = function() {
                    return this.state.show ? s.createElement(j._35, {
                        attachTop: !0,
                        attachLeft: !0,
                        attachRight: !0,
                        background: j.n.AccentAlt2,
                        color: j.K.Overlay,
                        position: j._15.Absolute,
                        className: "hosting-notification",
                        padding: {
                            y: .5,
                            left: .5
                        },
                        "data-a-target": "hosting-notification-container"
                    }, s.createElement(j._8, {
                        display: j.R.Flex,
                        padding: 1,
                        justifyContent: j._7.Between,
                        alignItems: j.c.Center,
                        flexWrap: j.U.NoWrap
                    }, s.createElement(j._8, {
                        display: j.R.Flex,
                        flexWrap: j.U.NoWrap
                    }, s.createElement(j._8, {
                        margin: {
                            right: .5
                        },
                        flexShrink: 0
                    }, s.createElement(j.Q, null, Object(u.d)("Hosting", "ChatHostingNotification"))), s.createElement(j._8, {
                        ellipsis: !0,
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, s.createElement(j.Q, {
                        type: j._49.Strong,
                        "data-test-selector": "hosting-notification__text",
                        "data-a-target": "hosting-notification-channel-name"
                    }, "" + this.props.hostedChannelDisplayName))), s.createElement(j._8, {
                        display: j.R.Flex,
                        flexWrap: j.U.NoWrap,
                        flexShrink: 0
                    }, s.createElement(j._8, {
                        display: j.R.Inline,
                        padding: {
                            right: .5
                        }
                    }, s.createElement(j.v, {
                        linkTo: {
                            pathname: "/" + this.props.hostedChannelLogin,
                            state: {
                                content: "host_channel",
                                medium: "chat_bar_notification"
                            }
                        },
                        size: j.z.Small,
                        "data-a-target": "hosting-notification-gotochannel-button"
                    }, Object(u.d)("Go to Channel", "ChatHostingNotification"))), s.createElement(j.w, {
                        onClick: this.dismiss,
                        ariaLabel: Object(u.d)("Close", "HostingNotification"),
                        size: j.x.Small,
                        overlay: !0,
                        icon: j._25.Close,
                        "data-a-target": "hosting-notification-close-button"
                    })))) : null
                }, t
            }(s.Component),
            te = n("F8kA"),
            ne = (n("W266"), "nativeBroadcastNotifDismissed"),
            ie = [{
                title: "English",
                login: "RPGLimitBreak"
            }, {
                title: "Français",
                login: "LeFrenchRestream"
            }, {
                title: "日本語",
                login: "japanese_restream"
            }],
            ae = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isClosed: !1
                    }, t.getChannelLinks = function() {
                        var e = k.b.get("native_broadcast_blacklist", []);
                        return ie.filter(function(t) {
                            return e.indexOf(t.login.toLowerCase()) < 0
                        }).filter(function(e) {
                            return e.login.toLowerCase() !== t.props.channelLogin.toLowerCase()
                        }).map(function(e) {
                            var t = e.title + " (" + e.login + ")";
                            return s.createElement("li", {
                                key: e.login
                            }, s.createElement(te.a, {
                                className: "native-broadcast-notification__link",
                                to: "/" + e.login.toLowerCase()
                            }, t))
                        })
                    }, t.onDismiss = function() {
                        t.setState({
                            isClosed: !0
                        });
                        var e, n = o.__assign({}, u.l.get(ne, {}), ((e = {})[t.props.channelLogin.toLowerCase()] = Date.now(), e));
                        u.l.set(ne, n)
                    }, t.onExpire = function() {
                        t.setState({
                            isClosed: !0
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.channelLogin.toLowerCase() !== this.props.channelLogin.toLowerCase() && this.setState({
                        isClosed: !1
                    })
                }, t.prototype.render = function() {
                    if (this.state.isClosed) return null;
                    if (!this.isEventChannel(this.props.channelLogin)) return null;
                    if (this.hasDismissedForChannel(this.props.channelLogin)) return null;
                    var e = Date.now();
                    if (e < 15262344e5 || e >= 15268212e5) return null;
                    var t = this.getChannelLinks();
                    return t.length ? s.createElement(j._35, {
                        attachLeft: !0,
                        attachRight: !0,
                        attachTop: !0,
                        background: j.n.AccentAlt2,
                        color: j.K.Overlay,
                        padding: 1,
                        position: j._15.Absolute
                    }, s.createElement(j._8, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(j.Q, {
                        type: j._49.H4
                    }, Object(u.d)("RPG Limit Break 2018", "NativeBroadcastNotification"))), s.createElement(j._8, {
                        margin: {
                            bottom: 1
                        }
                    }, s.createElement(j.Q, {
                        color: j.K.OverlayAlt
                    }, Object(u.d)("Want to watch RPGLB in your local language? Try one of these international broadcasts!", "NativeBroadcastNotification"))), s.createElement("ul", null, t), s.createElement(j._8, {
                        attachRight: !0,
                        attachTop: !0,
                        margin: 1,
                        position: j._15.Absolute
                    }, s.createElement(j.w, {
                        ariaLabel: Object(u.d)("Close", "NativeBroadcastNotification"),
                        icon: j._25.Close,
                        onClick: this.onDismiss,
                        overlay: !0,
                        size: j.x.Small,
                        "data-a-target": "native-broadcast-notification-close-button"
                    })), s.createElement(j._8, {
                        margin: {
                            top: .5
                        }
                    }, s.createElement(j._18, {
                        animationDirection: j._19.Down,
                        animationDuration: 30,
                        onAnimationEnd: this.onExpire,
                        size: j._20.ExtraSmall
                    }))) : null
                }, t.prototype.isEventChannel = function(e) {
                    return ie.map(function(e) {
                        return e.login.toLowerCase()
                    }).includes(e.toLowerCase())
                }, t.prototype.hasDismissedForChannel = function(e) {
                    var t = u.l.get(ne, {})[e.toLowerCase()];
                    return !!t && t >= 15262344e5
                }, t
            }(s.Component),
            re = n("+Znq"),
            oe = n("7MbV"),
            se = (n("q4rf"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onClickInteraction = function(e) {
                        t.props.sendMessage(":act " + e.currentTarget.getAttribute("data-action")), t.toggleBalloonRef.toggleBalloon()
                    }, t.setToggleBalloonRef = function(e) {
                        return t.toggleBalloonRef = e
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    var e = this.getPresetText();
                    return this.props.isLoggedIn && 0 !== e.length ? s.createElement(j._35, {
                        className: "orbis",
                        display: j.R.Flex,
                        flexDirection: j.T.Column,
                        alignItems: j.c.Stretch,
                        background: j.n.Base,
                        flexShrink: 0,
                        borderBottom: !0
                    }, s.createElement(re.a, {
                        ref: this.setToggleBalloonRef
                    }, s.createElement("div", {
                        className: "orbis__dropdown-container",
                        "data-test-selector": "orbis-dropdown-container"
                    }, s.createElement(j._8, {
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: j.R.Flex,
                        justifyContent: j._7.Between,
                        flexWrap: j.U.NoWrap
                    }, s.createElement(j._8, {
                        ellipsis: !0,
                        padding: {
                            right: 1
                        }
                    }, s.createElement(j.Q, {
                        type: j._49.Span
                    }, Object(u.d)("Interactions Available", "Orbis"))), s.createElement(j._8, {
                        display: j.R.Flex,
                        justifyContent: j._7.Between,
                        alignItems: j.c.Center,
                        flexShrink: 0
                    }, s.createElement(j._8, {
                        className: "orbis__dropdown-icon",
                        display: j.R.Flex,
                        justifyContent: j._7.Between,
                        alignItems: j.c.Center
                    }, s.createElement(j._24, {
                        asset: j._25.AngleRight
                    }))))), s.createElement(j.q, {
                        offsetY: "1px",
                        noTail: !0
                    }, s.createElement(j._8, {
                        className: "orbis__dropdown-content",
                        padding: 1
                    }, this.renderInteractions(e))))) : null
                }, t.prototype.renderInteractions = function(e) {
                    for (var t = [], n = 0, i = e; n < i.length; n++) {
                        var a = i[n];
                        t.push(this.renderInteraction(a))
                    }
                    return t
                }, t.prototype.renderInteraction = function(e) {
                    return e ? s.createElement(j._6, {
                        onClick: this.onClickInteraction,
                        key: e,
                        "data-action": e,
                        "data-test-selector": "orbis-interaction"
                    }, s.createElement(j._2, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, s.createElement(j.Q, {
                        ellipsis: !0
                    }, e))) : null
                }, t.prototype.getPresetText = function() {
                    if (!(this.props.data && this.props.data.user && this.props.data.user.stream && this.props.data.user.stream.platform && this.props.data.user.stream.platform.title)) return [];
                    var e = this.props.data.user.stream.platform.title.presetText;
                    return e.some(function(e) {
                        return "" !== e
                    }) ? e : []
                }, t
            }(s.Component)),
            le = Object(l.a)(oe, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.isLoggedIn || !e.channelLogin
                }
            })(se);
        var de = Object(a.b)(function(e) {
                return {
                    isLoggedIn: Object(r.d)(e)
                }
            })(le),
            ce = n("BMQ2"),
            ue = n("WIs4"),
            me = n("aSvS"),
            pe = n("rIzn"),
            he = n("J7iJ"),
            ge = n("KfLc"),
            fe = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return s.createElement(j._35, {
                        background: j.n.Base,
                        color: j.K.Alt
                    }, s.createElement(j._8, {
                        padding: {
                            bottom: .5,
                            top: 1,
                            x: 1
                        }
                    }, s.createElement(j._8, {
                        margin: {
                            bottom: .5
                        }
                    }, s.createElement(j.Q, {
                        bold: !0,
                        type: j._49.H5
                    }, Object(u.d)("Introducing: New Chatter Announcements!", "RitualsOnboardingSticky"))), s.createElement(j._8, {
                        margin: {
                            bottom: .5
                        }
                    }, s.createElement(j.Q, {
                        type: j._49.Span
                    }, Object(u.d)("New chatter announcements are now active in your channel, making it easier to welcome new people.", "RitualsOnboardingSticky")), s.createElement(j.Q, null, s.createElement(te.a, {
                        onClick: this.props.onClick,
                        to: "/" + this.props.channelLogin + "/dashboard/settings",
                        "data-test-selector": "rituals-sticky-link"
                    }, Object(u.d)("Manage in Dashboard", "RitualsOnboardingSticky"))))), s.createElement(j._35, {
                        alignItems: j.c.Center,
                        background: j.n.Alt2,
                        borderBottom: !0,
                        color: j.K.Alt2,
                        display: j.R.Flex,
                        padding: {
                            x: 1,
                            y: .5
                        }
                    }, s.createElement(j._24, {
                        asset: j._25.Lock,
                        height: 12,
                        width: 12
                    }), s.createElement(j._8, {
                        display: j.R.Inline,
                        margin: {
                            left: .5
                        }
                    }, s.createElement(j.Q, {
                        fontSize: j.V.Size8,
                        type: j._49.Span
                    }, Object(u.d)("You see this because you own this channel", "RitualsOnboardingSticky")))), s.createElement(j._35, {
                        attachRight: !0,
                        attachTop: !0,
                        padding: {
                            x: .5,
                            top: 1
                        },
                        position: j._15.Absolute
                    }, s.createElement(j.w, {
                        ariaLabel: Object(u.d)("Close", "RitualsOnboardingSticky"),
                        icon: j._25.Close,
                        onClick: this.props.onDismiss,
                        size: j.x.Small,
                        type: j.y.Secondary,
                        "data-test-selector": "rituals-sticky-dismiss-button"
                    })))
                }, t
            }(s.PureComponent),
            ve = "seenNewChatterAnnouncementSticky",
            be = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        isDismissed: !1
                    }, n.onClick = function() {
                        Object(ge.c)({
                            action: me.a.Click,
                            channelID: n.props.channelID
                        })
                    }, n.onDismiss = function() {
                        u.l.set(ve, !0), n.setState({
                            isDismissed: !0
                        }), Object(ge.c)({
                            action: me.a.Dismiss,
                            channelID: n.props.channelID
                        })
                    }, n.state.isDismissed = u.l.get(ve, !1), n
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return !this.props.data || this.props.data.loading || this.props.data.error ? null : this.props.data.channel.settings.isRitualsEnabled ? this.state.isDismissed ? null : s.createElement(fe, {
                        channelLogin: this.props.channelLogin,
                        onClick: this.onClick,
                        onDismiss: this.onDismiss
                    }) : null
                }, t
            }(s.Component);

        function ke(e) {
            return e.currentUserID !== e.channelID || !Object(pe.a)()
        }
        var ye = Object(d.compose)(Object(a.b)(function(e) {
                var t = Object(r.c)(e);
                return {
                    currentUserID: t && t.id
                }
            }, null), Object(l.a)(he, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.channelID
                        }
                    }
                },
                skip: ke
            }), Object(ue.a)(function(e) {
                return {
                    query: he,
                    variables: {
                        id: e.channelID
                    },
                    topic: Object(I.p)(e.channelID),
                    type: R.PubsubMessageType.UpdatedChannelChatProperty,
                    mutator: function(e, t) {
                        return t.channel.settings.isRitualsEnabled = e.data.is_rituals_enabled, t
                    },
                    skip: ke(e)
                }
            }))(be),
            _e = n("qkCi"),
            Ce = 200,
            Se = function() {
                return function(e) {
                    var t = this;
                    this.resetWithChannelLogin = function(e) {
                        t.activeChatterLogins = new Set, t.activeChatters = {}, t.channelLogin = e, t.currentUserLogin = null, t.isDirty = !0
                    }, this.getActiveChatters = function() {
                        return t.isDirty = !1, Object.keys(t.activeChatters).map(function(e) {
                            return t.activeChatters[e]
                        })
                    }, this.setCurrentUserLogin = function(e) {
                        t.currentUserLogin = e, t.activeChatterLogins.has(e) && (t.isDirty = !0, t.removeActiveChatter(e))
                    }, this.consumeChatEvent = function(e) {
                        t.getUsersFromEvent(e).forEach(function(e) {
                            t.handleActiveChatter(e)
                        })
                    }, this.getUsersFromEvent = function(e) {
                        switch (e.type) {
                            case _e.b.Message:
                                return [{
                                    login: e.user.userLogin,
                                    displayName: e.user.userDisplayName
                                }];
                            case _e.b.Ritual:
                                return [{
                                    login: e.message.user.userLogin,
                                    displayName: e.message.user.userDisplayName
                                }];
                            case _e.b.Raid:
                                return [{
                                    login: e.params.login,
                                    displayName: e.params.displayName
                                }];
                            case _e.b.Resubscription:
                            case _e.b.Subscription:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }];
                            case _e.b.SubGift:
                                return [{
                                    login: e.user.username,
                                    displayName: e.user.displayName
                                }, {
                                    displayName: e.recipientDisplayName,
                                    login: e.recipientLogin
                                }];
                            default:
                                return []
                        }
                    }, this.handleActiveChatter = function(e) {
                        e.login !== t.channelLogin && e.login !== t.currentUserLogin && (t.activeChatterLogins.has(e.login) ? (t.activeChatterLogins.delete(e.login), t.addActiveChatter(e)) : (t.addActiveChatter(e), t.trimActiveChatters(), t.isDirty = !0))
                    }, this.addActiveChatter = function(e) {
                        t.activeChatterLogins.add(e.login), t.activeChatters[e.login] = e
                    }, this.removeActiveChatter = function(e) {
                        t.activeChatterLogins.delete(e), delete t.activeChatters[e]
                    }, this.trimActiveChatters = function() {
                        if (!(t.activeChatterLogins.size <= Ce))
                            for (var e = t.activeChatterLogins.size - Ce, n = t.activeChatterLogins.values(), i = 0; i < e; i++) {
                                var a = n.next().value;
                                t.removeActiveChatter(a)
                            }
                    }, this.resetWithChannelLogin(e)
                }
            }(),
            Ee = n("mwvJ"),
            Ne = 1e3,
            Te = 1e3,
            we = 250,
            De = 0,
            Re = 200,
            Oe = function() {
                function e(e, t) {
                    void 0 === e && (e = we), void 0 === t && (t = function() {});
                    var n = this;
                    this.maxSize = e, this.onBufferUpdate = t, this.delayedMessageBuffer = [], this.setDelay = function(e) {
                        n.delayDuration = e
                    }, this.setCurrentUserLogin = function(e) {
                        n.currentUserLogin = e
                    }, this.consumeChatEvent = function(e) {
                        var t = !1;
                        switch (e.type) {
                            case _e.b.Message:
                                if (n.uncountedMessages++, e.user.userID && n.blockedUsers.has(e.user.userID)) return;
                                var i = e.messageParts[0];
                                if (i && i.type === Ee.a.Text && i.content.startsWith(":act ")) return;
                                t = !n.isOwnMessage(e);
                                break;
                            case _e.b.Resubscription:
                                t = !!e.message && !n.isOwnMessage(e.message);
                                break;
                            case _e.b.Moderation:
                                var a = e.userLogin;
                                if (n.moderatedUsers.has(a)) return;
                                [n.buffer, n.delayedMessageBuffer.map(function(e) {
                                    return e.event
                                })].forEach(function(e) {
                                    e.forEach(function(e) {
                                        switch (e.type) {
                                            case _e.b.Message:
                                                e.user && a === e.user.userLogin && e.messageParts && !e.deleted && (e.deleted = !0);
                                                break;
                                            case _e.b.Resubscription:
                                            case _e.b.Ritual:
                                                e.message && a === e.message.user.userLogin && !e.message.deleted && (e.message.deleted = !0)
                                        }
                                    })
                                }), n.moderatedUsers.add(a), setTimeout(n.unmoderateUser(a), Ne);
                                break;
                            case _e.b.Disconnected:
                                return;
                            case _e.b.Reconnect:
                                if (n.buffer.find(function(t) {
                                        return t.id === e.id
                                    }) || n.delayedMessageBuffer.find(function(t) {
                                        return t.event.id === e.id
                                    })) return;
                                break;
                            case _e.b.Clear:
                                n.clear();
                                break;
                            case _e.b.ModerationAction:
                                if (n.currentUserLogin && e.createdByLogin === n.currentUserLogin) return
                        }
                        n.delayedMessageBuffer.push({
                            event: e,
                            time: Date.now(),
                            shouldDelay: t
                        })
                    }, this.unmoderateUser = function(e) {
                        return function() {
                            n.moderatedUsers.delete(e)
                        }
                    }, this.isOwnMessage = function(e) {
                        var t = e.user;
                        return !(!n.currentUserLogin || !t || t.userLogin !== n.currentUserLogin)
                    }, this.currentUserLogin = null, this.delayedMessageBuffer = [], this.buffer = [], this._isDirty = !1, this.moderatedUsers = new Set, this.blockedUsers = new Set, this.delayDuration = De, this.throttlingDuration = Re, this.flushInterval = setInterval(function() {
                        return n.flushRawMessages()
                    }, this.throttlingDuration), this.uncountedMessages = 0, this.chatRateMeasurements = [], this.chatRateMeasurementInterval = setInterval(function() {
                        return n.measureChatRate()
                    }, Te), this.setBlockedUsers = this.setBlockedUsers.bind(this)
                }
                return e.prototype.shutdown = function() {
                    this.flushInterval && (clearInterval(this.flushInterval), clearInterval(this.chatRateMeasurementInterval))
                }, e.prototype.setBlockedUsers = function(e) {
                    this.blockedUsers = new Set(e)
                }, e.prototype.toArray = function() {
                    return this.buffer = this.buffer.slice(-this.maxSize), this._isDirty = !1, this.buffer
                }, e.prototype.clear = function(e) {
                    if (void 0 === e && (e = 0), e <= 0) return this.buffer = [], void(this.delayedMessageBuffer = []);
                    this.buffer = this.buffer.slice(-e)
                }, e.prototype.isDeletable = function(e) {
                    return void 0 !== e.deleted
                }, e.prototype.flushRawMessages = function() {
                    var e = this,
                        t = [],
                        n = Date.now();
                    this.delayedMessageBuffer.forEach(function(i) {
                        var a = i.event,
                            r = i.time,
                            o = i.shouldDelay;
                        r <= n - e.delayDuration || !o ? e.isDeletable(a) && a.deleted || (e.buffer.push(a), e._isDirty = !0, e.onBufferUpdate()) : t.push({
                            event: a,
                            time: r,
                            shouldDelay: o
                        })
                    }), this.delayedMessageBuffer = t
                }, e.prototype.measureChatRate = function() {
                    3 === this.chatRateMeasurements.length && this.chatRateMeasurements.shift(), this.chatRateMeasurements.push(this.uncountedMessages), this.uncountedMessages = 0
                }, Object.defineProperty(e.prototype, "isDirty", {
                    get: function() {
                        return this._isDirty
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "length", {
                    get: function() {
                        return this.buffer.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "moderatedUserCount", {
                    get: function() {
                        return this.moderatedUsers.size
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "chatRate", {
                    get: function() {
                        return 0 === this.chatRateMeasurements.length ? 0 : this.chatRateMeasurements.reduce(function(e, t) {
                            return e + t
                        }) / this.chatRateMeasurements.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), e
            }(),
            Ie = n("INp2");
        var Me = n("6Agf");
        var xe = n("aUOx"),
            je = n("l21v");

        function Le(e, t, n, i, a, r, s) {
            return void 0 === s && (s = !1), o.__assign({}, Object(je.a)(t, n, i, a, r, s), {
                type: _e.b.Message,
                messageType: e,
                id: n.id || Object(Ie.a)(n.username)
            })
        }
        var Ae = n("Ncf8");
        var Fe = n("O0Qc"),
            Ue = n("YhVV"),
            Be = function() {
                function e(e, t, n) {
                    var i = this;
                    this.onJoinedEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, {
                            type: _e.b.Connected,
                            id: Object(Ie.a)("connected")
                        })
                    }, this.onDisconnectedEvent = function(e) {
                        return i.postMessage((t = e.reason, {
                            type: _e.b.Disconnected,
                            id: Object(Ie.a)("disconnected"),
                            reason: t
                        }));
                        var t
                    }, this.onReconnectingEvent = function(e) {
                        return i.postMessage({
                            type: _e.b.Reconnect,
                            id: Object(Ie.a)("reconnect")
                        })
                    }, this.onHostedEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.from, n = e.isAuto, a = e.viewers, {
                            type: _e.b.Hosted,
                            id: Object(Ie.a)("hosted-" + t),
                            hostingChannel: t,
                            isAutohost: n,
                            viewerCount: a
                        }));
                        var t, n, a
                    }, this.onHostingEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.target, {
                            type: _e.b.Hosting,
                            id: Object(Ie.a)("hosting"),
                            hostedChannel: t
                        }));
                        var t
                    }, this.onUnhostEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.channel, {
                            type: _e.b.Unhost,
                            id: Object(Ie.a)("unhost-" + t)
                        }));
                        var t
                    }, this.onChatMessageEvent = function(e) {
                        i.postMessageToCurrentChannel(e, i.convertMessage(e))
                    }, this.onChatActionEvent = function(e) {
                        var t = i.bitsConfig || S.a,
                            n = e.message.user.username === i.userLogin ? i.selfEmotes : void 0,
                            a = Le(_e.c.Action, e.action, e.message.user, t, i.shouldBlockLinks(e.message.user), n);
                        i.postMessageToCurrentChannel(e, a)
                    }, this.onChatNoticeEvent = function(e) {
                        if ("msg_rejected" !== e.msgid) {
                            var t = (n = e.channel, a = e.msgid, r = e.body, {
                                type: _e.b.Notice,
                                id: Object(Ie.a)("notice"),
                                channel: n,
                                msgid: a,
                                message: r
                            });
                            i.postMessageToCurrentChannel(e, t)
                        }
                        var n, a, r
                    }, this.onTimeoutEvent = function(e) {
                        i.onModerationEvent(_e.e.Timeout, e)
                    }, this.onBanEvent = function(e) {
                        i.onModerationEvent(_e.e.Ban, e)
                    }, this.onModerationEvent = function(e, t) {
                        i.postMessageToCurrentChannel(t, Object(Ae.a)(e, t.userLogin, t.reason, t.duration))
                    }, this.onSubscriptionEvent = function(e) {
                        var t, n, a, r, o;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "Tier 1"
                        }
                        i.postMessageToCurrentChannel(e, (n = e.channel, a = e.user, r = e.methods.prime, o = t, {
                            type: _e.b.Subscription,
                            id: Object(Ie.a)(a.username + "-sub"),
                            channel: n.slice(1),
                            isPrime: r,
                            tier: o,
                            user: a
                        }))
                    }, this.onSubscriptionGiftEvent = function(e) {
                        var t, n, a, r, o, s, l, d, c;
                        switch (e.methods.plan) {
                            case "1000":
                                t = "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "custom"
                        }
                        i.postMessageToCurrentChannel(e, (n = e.channel, a = e.user, r = e.methods.prime, o = t, s = e.recipientName, l = e.recipientID, d = e.recipientLogin, c = e.senderCount, {
                            type: _e.b.SubGift,
                            id: Object(Ie.a)(a.username + "-sub"),
                            channel: n.slice(1),
                            isPrime: r,
                            recipientDisplayName: s,
                            recipientID: l,
                            recipientLogin: d,
                            senderCount: c,
                            tier: o,
                            user: a
                        }))
                    }, this.onBitsCharityEvent = function(e) {
                        var t, n, a, r, o, s;
                        i.postMessage((t = e.total, n = e.charityName, a = e.daysLeft, r = e.hoursLeft, o = e.hashtag, s = e.learnMore, {
                            type: _e.b.BitsCharity,
                            id: Object(Ie.a)("charity"),
                            total: t,
                            charityName: n,
                            daysLeft: a,
                            hoursLeft: r,
                            hashtag: o,
                            learnMore: s
                        }))
                    }, this.onResubscriptionEvent = function(e) {
                        var t, n, a, r, o, s, l, d;
                        switch (e.methods.plan) {
                            case "1000":
                                t = e.methods.prime ? "prime" : "Tier 1";
                                break;
                            case "2000":
                                t = "Tier 2";
                                break;
                            case "3000":
                                t = "Tier 3";
                                break;
                            default:
                                t = "Tier 1"
                        }
                        i.postMessageToCurrentChannel(e, (n = e.channel, a = e.user, r = e.methods.prime, o = e.months, s = t, l = e.body, d = void 0, l && (d = Le(_e.c.Post, l, a, S.a, !1)), {
                            type: _e.b.Resubscription,
                            id: Object(Ie.a)(a.username + "-sub"),
                            channel: n.slice(1),
                            isPrime: r,
                            months: o,
                            tier: s,
                            user: a,
                            message: d
                        }))
                    }, this.onRoomModsEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.usernames, {
                            type: _e.b.RoomMods,
                            id: Object(Ie.a)("roommods"),
                            moderatorLogins: t
                        }));
                        var t
                    }, this.onRoomStateEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.state, {
                            type: _e.b.RoomState,
                            id: Object(Ie.a)("roomstate"),
                            state: t
                        }));
                        var t
                    }, this.onSlowModeEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.enabled, n = e.length, {
                            type: _e.b.SlowMode,
                            id: Object(Ie.a)("slowmode"),
                            enabled: t,
                            length: n
                        }));
                        var t, n
                    }, this.onEmoteOnlyModeEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.enabled, {
                            type: _e.b.EmoteOnlyMode,
                            id: Object(Ie.a)("emoteonlymode"),
                            enabled: t
                        }));
                        var t
                    }, this.onFollowerOnlyModeEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.enabled, n = e.length, {
                            type: _e.b.FollowerOnlyMode,
                            id: Object(Ie.a)("follower-only"),
                            enabled: t,
                            length: n
                        }));
                        var t, n
                    }, this.onSubscriberOnlyModeEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.enabled, {
                            type: _e.b.SubscriberOnlyMode,
                            id: Object(Ie.a)("subscriber-only"),
                            enabled: t
                        }));
                        var t
                    }, this.onClearChatEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, {
                            type: _e.b.Clear,
                            id: Object(Ie.a)("clear")
                        })
                    }, this.onRaidEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.channel, n = e.userLogin, a = e.params, {
                            type: _e.b.Raid,
                            id: Object(Ie.a)("raid"),
                            channel: t,
                            userLogin: n,
                            params: a
                        }));
                        var t, n, a
                    }, this.onUnraidEvent = function(e) {
                        return i.postMessageToCurrentChannel(e, (t = e.channel, n = e.userLogin, a = e.message, {
                            type: _e.b.Unraid,
                            id: Object(Ie.a)("unraid"),
                            channel: t,
                            userLogin: n,
                            message: a
                        }));
                        var t, n, a
                    }, this.onRitualEvent = function(e) {
                        var t, n;
                        i.postMessage((t = e.type, n = i.convertMessage(e), {
                            type: _e.b.Ritual,
                            id: Object(Ie.a)(n.user.userLogin + "-" + t + "-ritual"),
                            ritualType: t,
                            message: n
                        }))
                    }, this.onBadgesUpdatedEvent = function(e) {
                        return i.postMessage((t = e.username, n = e.badges, {
                            type: _e.b.BadgesUpdated,
                            id: Object(Ie.a)("updateBadges"),
                            userName: t,
                            badges: n
                        }));
                        var t, n
                    }, this.onPurchaseEvent = function(e) {
                        var t = i.bitsConfig || S.a;
                        i.postMessage(function(e, t, n, i) {
                            return {
                                bitsConfig: i,
                                message: t,
                                purchase: e,
                                timestamp: n,
                                id: Object(Ie.a)(t.user.userLogin + "-purchase"),
                                type: _e.b.Purchase
                            }
                        }(e.purchase, i.convertMessage(e), e.timestamp, t))
                    }, this.onCrateEvent = function(e) {
                        var t, n;
                        i.postMessage((t = i.convertMessage(e), n = e.selectedCount, {
                            type: _e.b.CrateGift,
                            id: Object(Ie.a)("crate"),
                            message: t,
                            selectedCount: n
                        }))
                    }, this.onRewardGiftEvent = function(e) {
                        var t, n, a, r;
                        i.postMessage((t = e.user, n = e.selectedCount, a = e.bitsAmount, r = e.minCheerAmount, {
                            type: _e.b.RewardGift,
                            id: Object(Ie.a)("rewardGift"),
                            selectedCount: n,
                            bitsAmount: a,
                            minCheerAmount: r,
                            user: t
                        }))
                    }, this.convertMessage = function(e) {
                        var t = i.bitsConfig || S.a,
                            n = e.message.user.username === i.userLogin ? i.selfEmotes : void 0;
                        return Le(_e.c.Post, e.message.body, e.message.user, t, i.shouldBlockLinks(e.message.user), n)
                    }, this.logger = u.j.withCategory("chat-service"), this.logger.debug("Created"), this.userLogin = e, this.channelLogin = t, this.service = u.o.tmi, this.client = u.o.tmi.client, this.postMessage = n, this.disabled = u.o.tmi.disabled
                }
                return e.prototype.join = function() {
                    return o.__awaiter(this, void 0, void 0, function() {
                        return o.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Joining channel and binding all event listeners", this.channelLogin), this.connectHandlers(), [4, this.service.join(this.channelLogin)];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.part = function() {
                    return o.__awaiter(this, void 0, void 0, function() {
                        return o.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return this.logger.debug("Parting channel and unbinding all event listeners", this.channelLogin), this.client.events.removeAll(), [4, this.service.part()];
                                case 1:
                                    return e.sent(), [2]
                            }
                        })
                    })
                }, e.prototype.sendMessage = function(e) {
                    var t = this,
                        n = Object(Fe.l)(e, this.channelLogin);
                    return n.handled ? n.result && n.result.deferred && n.result.deferred.then(function(e) {
                        var n = e.notice;
                        n && t.postMessage(Object(xe.a)(n))
                    }) : this.client.sendCommand(this.channelLogin, e).catch(function(e) {
                        u.j.warn("Failed to send message, or message timeout", e)
                    }), n.result
                }, e.prototype.updateEmotes = function(e) {
                    this.selfEmotes = Object(Ue.a)(e), this.client.updateEmoteSets(e)
                }, e.prototype.updateChannelBadges = function(e) {
                    this.client.updateChannelBadges(this.channelLogin, e)
                }, e.prototype.updateBitsConfig = function(e) {
                    this.bitsConfig = e
                }, e.prototype.updateBlockLinks = function(e) {
                    this.blockLinks = e
                }, e.prototype.connectHandlers = function() {
                    this.client.events.removeAll(), this.client.events.joined(this.onJoinedEvent), this.client.events.disconnected(this.onDisconnectedEvent), this.client.events.reconnecting(this.onReconnectingEvent), this.client.events.chat(this.onChatMessageEvent), this.client.events.usernotice(this.onChatMessageEvent), this.client.events.notice(this.onChatNoticeEvent), this.client.events.action(this.onChatActionEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.hosted(this.onHostedEvent), this.client.events.hosting(this.onHostingEvent), this.client.events.unhost(this.onUnhostEvent), this.client.events.badgesupdated(this.onBadgesUpdatedEvent), this.client.events.purchase(this.onPurchaseEvent), this.client.events.crate(this.onCrateEvent), this.client.events.rewardgift(this.onRewardGiftEvent), this.client.events.ritual(this.onRitualEvent), this.client.events.subscription(this.onSubscriptionEvent), this.client.events.resub(this.onResubscriptionEvent), this.client.events.subgift(this.onSubscriptionGiftEvent), this.client.events.timeout(this.onTimeoutEvent), this.client.events.ban(this.onBanEvent), this.client.events.clearchat(this.onClearChatEvent), this.client.events.raid(this.onRaidEvent), this.client.events.unraid(this.onUnraidEvent), this.client.events.mods(this.onRoomModsEvent), this.client.events.roomstate(this.onRoomStateEvent), this.client.events.followersonly(this.onFollowerOnlyModeEvent), this.client.events.slowmode(this.onSlowModeEvent), this.client.events.subscribers(this.onSubscriberOnlyModeEvent), this.client.events.emoteonlymode(this.onEmoteOnlyModeEvent), this.client.events.charity(this.onBitsCharityEvent)
                }, e.prototype.shouldBlockLinks = function(e) {
                    return e.username !== this.channelLogin && e.userType !== Me.a.Staff && e.userType !== Me.a.GlobalMod && e.userType !== Me.a.Moderator && this.blockLinks
                }, e.prototype.postMessageToCurrentChannel = function(e, t) {
                    e.channel.toLowerCase().replace("#", "") === this.channelLogin.toLowerCase() && this.postMessage(t)
                }, e
            }(),
            Pe = n("H/22"),
            Ve = function() {
                return function(e, t, n) {
                    this.channelID = e, this.sessionUserID = t, this.unsubscribe = u.k.subscribe({
                        topic: Object(I.j)(this.sessionUserID, this.channelID),
                        onMessage: function(e) {
                            switch (e.data.moderation_action) {
                                case R.ModerationActions.AutoModRejected:
                                    var t = Object(Pe.e)(e.data.msg_id, e.data.args[1], e.data.args[0], e.data.args[2]);
                                    n(t);
                                    break;
                                case R.TargetedModerationActions.AutoModMessageRejected:
                                    n(Object(Pe.d)());
                                    break;
                                case R.TargetedModerationActions.AutoModMessageApproved:
                                    n(Object(Pe.b)());
                                    break;
                                case R.TargetedModerationActions.AutoModMessageDenied:
                                    n(Object(Pe.c)());
                                    break;
                                case R.ModerationActions.Ban:
                                    n(Object(Pe.g)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], void 0, e.data.args[1]));
                                    break;
                                case R.ModerationActions.Unban:
                                case R.ModerationActions.Timeout:
                                case R.ModerationActions.Untimeout:
                                case R.ModerationActions.Mod:
                                case R.ModerationActions.Unmod:
                                    n(Object(Pe.g)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.target_user_id, e.data.args[0], e.data.args[1], e.data.args[2]));
                                    break;
                                case R.ModerationActions.AutoModEnabled:
                                case R.ModerationActions.Clear:
                                case R.ModerationActions.EmoteOnly:
                                case R.ModerationActions.EmoteOnlyOff:
                                case R.ModerationActions.FollowersOnly:
                                case R.ModerationActions.FollowersOnlyOff:
                                case R.ModerationActions.Host:
                                case R.ModerationActions.R9kBeta:
                                case R.ModerationActions.R9kBetaOff:
                                case R.ModerationActions.Raid:
                                case R.ModerationActions.Slow:
                                case R.ModerationActions.SlowOff:
                                case R.ModerationActions.SubsBeta:
                                case R.ModerationActions.SubscribersOnly:
                                case R.ModerationActions.SubscribersOnlyOff:
                                case R.ModerationActions.Unhost:
                                case R.ModerationActions.AddBlockedTerm:
                                case R.ModerationActions.AddPermittedTerm:
                                case R.ModerationActions.DeleteBlockedTerm:
                                case R.ModerationActions.DeletePermittedTerm:
                                case R.ModerationActions.ModifiedAutoModProperties:
                                case R.ModerationActions.Unraid:
                                    n(Object(Pe.f)(e.data.moderation_action, e.data.created_by, e.data.created_by_user_id, e.data.args));
                                    break;
                                default:
                                    u.j.warn("Unknown moderation action type", e.data.moderation_action)
                            }
                        }
                    })
                }
            }(),
            We = n("QFW6"),
            He = n("CSlQ"),
            Ge = n("9fnI"),
            ze = n("Z3Cb"),
            qe = "(?:\\W|^)",
            Qe = "(?:$|\\W)",
            Ke = 150,
            $e = "PowerUpL DarkMode PowerUpR",
            Ye = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        hasEnteredChatRoom: !1,
                        hostedChannelLogin: null,
                        raidReceived: !1,
                        userBadges: null
                    }, n.sendMessage = function(e) {
                        if (!e || 0 === e.length || !n.props.authToken) return !1;
                        var t = n.chatService.sendMessage(e);
                        return (!t || !t.preserveInput) && (n.parseOutgoingMessage(e), !0)
                    }, n.pushMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e)
                    }, n.onChatMessage = function(e) {
                        n.chatBuffer.consumeChatEvent(e), n.activeChatters.consumeChatEvent(e), n.onChatEvent(e)
                    }, n.connect = function(e) {
                        n.logger.debug("Connect", n.props.channelLogin), n.setState({
                            hasEnteredChatRoom: !1
                        }), e.userID && e.channelID && n.updateModerationActionService(e.channelID, e.userID), n.chatService.join()
                    }, n.disconnect = function() {
                        n.logger.debug("Disconnect", n.props.channelLogin), n.clearBufferHandle(), n.moderationActionService && n.moderationActionService.unsubscribe(), n.chatService.part()
                    }, n.updateBitsConfig = function(e) {
                        void 0 === e && (e = S.a), n.chatService.updateBitsConfig(e)
                    }, n.updateBlockLinks = function(e) {
                        n.chatService.updateBlockLinks(e)
                    }, n.onChatBufferUpdate = function() {
                        n.syncBufferHandle || n.props.isBackground || (n.syncBufferHandle = setTimeout(n.syncBufferedMessages, 0))
                    }, n.syncBufferedMessages = function() {
                        n.chatBuffer && n.chatBuffer.isDirty && n.props.onChatMessagesUpdate(n.chatBuffer.toArray()), n.clearBufferHandle()
                    }, n.onChatEvent = function(e) {
                        switch (e.type) {
                            case _e.b.Hosting:
                                n.hostingHandler(e.hostedChannel);
                                break;
                            case _e.b.Unhost:
                                n.hostingHandler(null);
                                break;
                            case _e.b.Connected:
                                n.onConnected();
                                break;
                            case _e.b.RoomState:
                                n.roomStateHandler(e.state);
                                break;
                            case _e.b.BadgesUpdated:
                                n.onBadgesUpdated(e);
                                break;
                            case _e.b.Raid:
                                n.setState({
                                    raidReceived: !0
                                })
                        }
                    }, n.hostingHandler = function(e) {
                        n.setState({
                            hostedChannelLogin: e
                        }), n.props.onHostingChange && n.props.onHostingChange(e)
                    }, n.roomStateHandler = function(e) {
                        e.slowMode ? n.props.onSlowModeEnable() : n.props.onSlowModeDisable(), void 0 !== e.followersOnly && (e.followersOnly ? (n.props.onFollowerModeDurationChange(e.followersOnlyRequirement), n.props.onFollowerModeEnable()) : n.props.onFollowerModeDisable()), void 0 !== e.subsOnly && (e.subsOnly ? n.props.onSubsOnlyModeEnable() : n.props.onSubsOnlyModeDisable())
                    }, n.onConnected = function() {
                        n.logger.debug("Connected", n.props.channelLogin), n.chatConnected && n.props.latencyTracking.reportCustomEvent(n.chatConnected), n.state.hasEnteredChatRoom || Object(We.b)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: !!n.state.hostedChannelLogin
                        }), n.setState({
                            hasEnteredChatRoom: !0
                        }), n.props.latencyTracking.reportInteractive()
                    }, n.createOutgoingTokenMatchers = function(e) {
                        n.outgoingTokenMatchers = e.map(function(e) {
                            return {
                                token: e,
                                regex: new RegExp("" + qe + e + Qe)
                            }
                        })
                    }, n.parseOutgoingMessage = function(e) {
                        n.outgoingTokenMatchers.forEach(function(t) {
                            t.regex.test(e) && n.onOutgoingTokenMatch(t.token, e)
                        })
                    }, n.onOutgoingTokenMatch = function(e, t) {
                        switch (e) {
                            case $e:
                                var i = n.props.theme === m.a.Light ? m.a.Dark : m.a.Light;
                                n.props.onThemeChange(i);
                                break;
                            default:
                                return
                        }
                    }, n.onBadgesUpdated = function(e) {
                        n.setState({
                            userBadges: e.badges
                        })
                    }, n.clearBufferHandle = function() {
                        n.syncBufferHandle && (clearTimeout(n.syncBufferHandle), n.syncBufferHandle = 0)
                    }, n.updateModerationActionService = function(e, t) {
                        n.moderationActionService && n.moderationActionService.unsubscribe(), n.moderationActionService = new Ve(e, t, n.chatBuffer.consumeChatEvent)
                    }, n.chatService = new Be(t.userLogin, t.channelLogin, n.onChatMessage), n.logger = u.j.withCategory("chat-room"), n.registerCustomLatencyEvents(), n.createOutgoingTokenMatchers([$e]), n.activeChatters = new Se(t.channelLogin), n.chatBuffer = new Oe(Ke, n.onChatBufferUpdate), n.chatBuffer.setBlockedUsers(t.blockedUsers), t.userLogin && (n.chatBuffer.setCurrentUserLogin(t.userLogin), n.activeChatters.setCurrentUserLogin(t.userLogin)), n
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.shouldConnectOnMount() ? this.connect(this.props) : this.props.latencyTracking.reportInteractive(), this.props.bitsConfig && this.updateBitsConfig(this.props.bitsConfig), this.updateBlockLinks(this.props.blockLinks), this.props.emoteSetsData && this.props.emoteSetsData.emoteSets && (this.logger.debug("Updating emote sets after mount", {
                        emoteSets: this.props.emoteSetsData && this.props.emoteSetsData.emoteSets
                    }), this.chatService.updateEmotes(this.props.emoteSetsData.emoteSets))
                }, t.prototype.componentWillUnmount = function() {
                    this.disconnect(), this.chatBuffer && this.chatBuffer.shutdown(), this.props.onChatMessagesReset()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props,
                        n = !1;
                    if (e.isHidden && !t.isHidden || !e.rightColumnExpanded && t.rightColumnExpanded ? this.disconnect() : (n = e.channelLogin !== t.channelLogin || e.userLogin !== t.userLogin || e.authToken !== t.authToken || !e.isHidden && t.isHidden || e.rightColumnExpanded && !t.rightColumnExpanded) && (this.logger.debug("Reconnecting..."), this.registerCustomLatencyEvents(), this.connect(e), this.setState({
                            hostedChannelLogin: null
                        })), this.props.isBackground && !e.isBackground) {
                        var i = u.l.getOptional("roomsFastChatThresholdOverride");
                        if (i || (i = 5), this.chatBuffer.chatRate > i) {
                            var a = u.l.getOptional("roomsClearedBufferSize");
                            a || (a = 20), this.chatBuffer.clear(a)
                        }
                        this.props.onChatMessagesUpdate(this.chatBuffer.toArray())
                    }
                    var r = e.emoteSetsData && e.emoteSetsData.emoteSets,
                        o = t.emoteSetsData && t.emoteSetsData.emoteSets;
                    r && (r !== o || n) && (this.logger.debug("Updating emote sets on props change", {
                        shouldReconnect: n,
                        prevEmoteSets: o,
                        nextEmoteSets: r
                    }), this.chatService.updateEmotes(r)), (e.bitsConfig !== t.bitsConfig || n) && this.updateBitsConfig(e.bitsConfig), (e.blockLinks !== t.blockLinks || n) && this.updateBlockLinks(e.blockLinks);
                    var s = e.isCurrentUserModerator ? 0 : e.chatDelayMS;
                    if (this.chatBuffer.setDelay(s), e.userLogin && t.userLogin !== e.userLogin && (this.chatBuffer.setCurrentUserLogin(e.userLogin), this.activeChatters.setCurrentUserLogin(e.userLogin)), t.channelLogin !== e.channelLogin && this.activeChatters.resetWithChannelLogin(e.channelLogin), t.blockedUsers !== e.blockedUsers && this.chatBuffer.setBlockedUsers(e.blockedUsers), e.userID && e.channelID) {
                        var l = t.userID !== e.userID || t.channelID !== e.userID;
                        this.moderationActionService && !l || this.updateModerationActionService(e.channelID, e.userID)
                    }
                }, t.prototype.render = function() {
                    var e = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                        t = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {};
                    return s.createElement(ze.b, {
                        authToken: this.props.authToken,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        activeChatters: this.activeChatters,
                        chatRoomHeader: s.createElement(de, {
                            channelLogin: this.props.channelLogin,
                            sendMessage: this.sendMessage
                        }),
                        chatRules: this.props.chatRules,
                        currentUserDisplayName: this.props.userDisplayName,
                        currentUserLogin: this.props.userLogin,
                        emotes: e,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hostedChannelLogin: this.state.hostedChannelLogin,
                        isBackground: this.props.isBackground,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHidden: this.props.isHidden,
                        isHostMode: !!this.state.hostedChannelLogin,
                        isOwnChannel: this.isOwnChannel,
                        isPopout: this.props.isPopout,
                        closeRoomPicker: this.props.closeRoomPicker,
                        onChatUnhide: this.props.onChatUnhide,
                        onPushMessage: this.pushMessage,
                        onSendMessage: this.sendMessage,
                        raidReceived: this.state.raidReceived,
                        theme: this.props.theme,
                        isStaff: this.props.isStaff,
                        userBadges: this.state.userBadges,
                        userID: this.props.userID
                    }, this.props.firstPageLoaded && this.props.authToken && !this.props.isEmbedded && s.createElement(Z, {
                        authToken: this.props.authToken,
                        channelDisplayName: this.props.channelDisplayName,
                        channelLogin: this.props.channelLogin,
                        bitsConfig: this.props.bitsConfig
                    }), this.props.hostedChannelDisplayName && !this.props.isPopout && s.createElement(ee, {
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName || "",
                        hostedChannelLogin: this.state.hostedChannelLogin || ""
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && s.createElement(ce.a, {
                        channelID: this.props.channelID,
                        send: this.sendMessage
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && s.createElement(ae, {
                        channelLogin: this.props.channelLogin
                    }), this.props.firstPageLoaded && !this.props.isEmbedded && !this.props.isPopout && s.createElement(ye, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin
                    }), s.createElement(T.a, {
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        userLogin: this.props.userLogin,
                        userID: this.props.userID,
                        emoteMap: t
                    }), s.createElement(N.a, {
                        currentUserLogin: this.props.userLogin
                    }), s.createElement(C, {
                        channelID: this.props.channelID
                    }))
                }, t.prototype.shouldConnectOnMount = function() {
                    return (this.props.isEmbedded || this.props.isPopout || this.props.rightColumnExpanded) && !this.chatService.disabled
                }, t.prototype.registerCustomLatencyEvents = function() {
                    this.logger.debug("Registering custom latency events"), this.props.latencyTracking.resetCustomEvents(f.a.Chat), this.chatInitialized = this.registerInitEvent(), this.props.latencyTracking.reportCustomEvent(this.chatInitialized), this.shouldConnectOnMount() && (this.chatConnected = this.registerConnectedEvent())
                }, t.prototype.registerInitEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 3e3,
                        group: f.a.Chat,
                        key: f.b.ChatInit,
                        label: f.c.Init
                    })
                }, t.prototype.registerConnectedEvent = function() {
                    return this.props.latencyTracking.registerCustomEvent({
                        benchmark: 4e3,
                        group: f.a.Chat,
                        key: f.b.ChatConnected,
                        label: f.c.Connected
                    })
                }, Object.defineProperty(t.prototype, "isOwnChannel", {
                    get: function() {
                        return this.props.userID === this.props.channelID
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(s.Component);
        var Je = Object(d.compose)(Object(a.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isHidden: e.chat.isHidden,
                    isLoggedIn: Object(r.d)(e),
                    rightColumnExpanded: e.ui.rightColumnExpanded,
                    theme: Object(v.a)(e)
                }
            }, function(e, t) {
                return Object(c.b)({
                    onChatMessagesReset: function() {
                        return X.B()
                    },
                    onChatMessagesUpdate: function(e) {
                        return X.R(t.channelLogin, e)
                    },
                    onChatUnhide: function() {
                        return X.T()
                    },
                    onFollowerModeDisable: function() {
                        return X.C()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return X.z(e)
                    },
                    onFollowerModeEnable: function() {
                        return X.J()
                    },
                    onSlowModeDisable: function() {
                        return X.G()
                    },
                    onSlowModeEnable: function() {
                        return X.N()
                    },
                    onSubsOnlyModeDisable: function() {
                        return X.H()
                    },
                    onSubsOnlyModeEnable: function() {
                        return X.O()
                    },
                    onThemeChange: function(e) {
                        return Object(g.b)(e, g.a.TypedCommand)
                    }
                }, e)
            }), Object(He.d)("ChatRoom"), Object(l.a)(Ge, {
                props: function(e) {
                    var t;
                    return e.data && e.data.user && e.data.user.cheer && e.data.user.cheer.emotes && (t = Object(E.a)(e.data.user.cheer.emotes)), {
                        bitsConfig: t
                    }
                },
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), Object(p.a)(), Object(h.a)())(Ye),
            Ze = n("/eFD"),
            Xe = n("KNSH"),
            et = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = this.props.channelData.channel,
                        t = this.props.userData && this.props.userData.user,
                        n = !1,
                        i = !1;
                    if (t && e && e.self) {
                        var a = t.login === e.login;
                        n = e.self.isModerator || a || t.roles.isGlobalMod || t.roles.isSiteAdmin, i = t.roles.isStaff
                    }
                    var r = e && e.chatSettings && e.chatSettings.rules,
                        o = e && e.chatSettings && e.chatSettings.chatDelayMs,
                        l = !(!e || !e.chatSettings) && e.chatSettings.blockLinks;
                    return s.createElement(Je, {
                        key: this.props.channelLogin,
                        authToken: this.props.user && this.props.user.authToken,
                        blockLinks: l,
                        channelDisplayName: e && e.displayName,
                        channelID: e && e.id,
                        channelLogin: this.props.channelLogin,
                        chatRules: r,
                        chatDelayMS: o,
                        clientID: this.props.clientID,
                        isBackground: this.props.isBackground,
                        isCurrentUserModerator: n,
                        isEmbedded: !!this.props.isEmbedded,
                        isPopout: !!this.props.isPopout,
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName,
                        closeRoomPicker: this.props.closeRoomPicker,
                        onHostingChange: this.props.onHostingChange,
                        userDisplayName: this.props.user && this.props.user.displayName,
                        userID: this.props.user && this.props.user.id.toString(),
                        userLogin: this.props.user && this.props.user.login,
                        isStaff: i
                    })
                }, t = o.__decorate([Object(l.a)(Ze, {
                    name: "channelData",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                }), Object(l.a)(Xe, {
                    name: "userData",
                    skip: function(e) {
                        return !e.user
                    }
                }), Object(He.d)("Chat")], t)
            }(s.Component);
        var tt = Object(a.b)(function(e) {
            return {
                user: Object(r.c)(e)
            }
        })(et);
        n.d(t, !1, function() {
            return et
        }), n.d(t, "a", function() {
            return tt
        })
    },
    "1EXI": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_UserCommunities"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "directories"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "nodes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "directoryType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_UserCommunities($userId: ID!) {\nuser(id: $userId) {\nid\ndirectories {\nnodes {\nid\nname\ndisplayName\ndirectoryType\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "1Eny": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "1F7R": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("vh75"),
            o = n("TToO"),
            s = n("GiK3"),
            l = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return o.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.props.addCommand(this.props.command, this.props.handler)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.command === e.command && this.props.handler === e.handler || (this.props.removeCommand(this.props.command), this.props.addCommand(e.command, e.handler))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.removeCommand(this.props.command)
                }, t.prototype.render = function() {
                    return null
                }, t
            }(s.PureComponent);
        var d = Object(i.b)(null, function(e) {
            return Object(a.b)({
                addCommand: r.y,
                removeCommand: r.S
            }, e)
        })(l);
        n.d(t, "a", function() {
            return d
        })
    },
    "1Mw/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("DtWM"),
            o = n("RH2O"),
            s = n("2KeS"),
            l = n("V5M+"),
            d = n("Aj/L"),
            c = n("oSFp"),
            u = n("5k1t"),
            m = n("HW6M"),
            p = n("3zLD"),
            h = n("6sO2"),
            g = n("rCmJ"),
            f = n("yWCw"),
            v = n("7vx8"),
            b = n("RweG"),
            k = n("6BvN"),
            y = n("aMxy"),
            _ = n("Ldv2"),
            C = n("oIkB"),
            S = n("HZww"),
            E = n("HM6l"),
            N = n("ZVME"),
            T = n("c3pS"),
            w = n("ieBa"),
            D = n("CSlQ"),
            R = n("F8kA"),
            O = n("+Znq"),
            I = n("u8SD"),
            M = n("4Dne"),
            x = n("djIP"),
            j = n("vH/s"),
            L = n("2Hj/"),
            A = n("emkL"),
            F = n("Kxgf"),
            U = n("LjAQ"),
            B = n("mw/a"),
            P = n("7miU"),
            V = n("Odds"),
            W = n("yTC+"),
            H = "whispers-report-user-button",
            G = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderReportButton = function() {
                        var e = t.props.displayName || t.props.login,
                            n = Object(h.d)("Report {displayName}", {
                                displayName: e
                            }, "ThreadSettings");
                        return a.createElement(V._6, {
                            "data-test-selector": H,
                            ariaLabel: n,
                            onClick: t.reportUser
                        }, a.createElement(V._8, {
                            padding: {
                                y: .5,
                                x: 1
                            }
                        }, n))
                    }, t.onChannelRedirect = function() {
                        t.props.collapseThread && t.props.collapseThread()
                    }, t.toggleMutethread = function() {
                        var e = !t.props.isMuted,
                            n = i.__assign({}, Object(C.a)({
                                threadID: t.props.threadID,
                                isMuted: !t.props.isMuted
                            }), {
                                optimisticResponse: {
                                    updateWhisperThread: {
                                        thread: {
                                            id: t.props.threadID,
                                            isMuted: e,
                                            __typename: "WhisperThread"
                                        },
                                        __typename: "UpdateWhisperThreadPayload"
                                    }
                                }
                            });
                        t.props.setMuteThread && (e ? Object(P.j)(t.props.threadID) : Object(P.k)(t.props.threadID), t.props.setMuteThread(n))
                    }, t.reportUser = function() {
                        var e = t.props.displayName || t.props.login;
                        t.props.showReportUserModal({
                            onClose: t.onReportModalClose,
                            reportContext: {
                                contentType: B.a.Whisper,
                                targetUserID: t.props.userID,
                                contentID: t.props.threadID
                            },
                            title: Object(h.d)("Report {displayName}", {
                                displayName: e
                            }, "ReportUserModal")
                        })
                    }, t.onReportModalClose = function(e, n) {
                        e === U.b.Success && n && t.props.onBlock && t.props.onBlock(t.props.threadID)
                    }, t.blockUser = function() {
                        t.props.blockUserMutation(t.props.userID, x.b.Other, x.a.Whisper, t.props.currentUser), t.props.onBlock && t.props.onBlock(t.props.threadID)
                    }, t.unblockUser = function() {
                        t.props.unblockUserMutation(t.props.userID, t.props.currentUser), t.props.onUnblock && t.props.onUnblock(t.props.threadID)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.displayName || this.props.login,
                        t = this.props.isMuted ? Object(h.d)("Turn Notifications On", "ThreadSettings") : Object(h.d)("Turn Notifications Off", "ThreadSettings"),
                        n = Object(h.d)("Go to {displayName}'s Channel", {
                            displayName: e
                        }, "ThreadSettings");
                    return a.createElement(V._8, {
                        display: V.R.Flex,
                        flexDirection: V.T.Column,
                        margin: 1
                    }, a.createElement(V._6, {
                        ariaLabel: t,
                        onClick: this.toggleMutethread
                    }, a.createElement(V._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, t)), a.createElement(V._35, {
                        borderBottom: !0,
                        margin: {
                            y: 1,
                            left: .5
                        }
                    }), this.renderBlockButton(), this.renderReportButton(), a.createElement(V._6, {
                        linkTo: "/" + this.props.login,
                        onClick: this.onChannelRedirect,
                        ariaLabel: n
                    }, a.createElement(V._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, n)))
                }, t.prototype.renderBlockButton = function() {
                    var e, t, n = this.props.displayName || this.props.login;
                    return this.isBlocked ? (e = Object(h.d)("Unblock {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.unblockUser) : (e = Object(h.d)("Block {displayName}...", {
                        displayName: n
                    }, "ThreadSettings"), t = this.blockUser), a.createElement(V._6, {
                        "data-test-selector": "whispers-block-user-button",
                        ariaLabel: e,
                        onClick: t
                    }, a.createElement(V._8, {
                        padding: {
                            y: .5,
                            x: 1
                        }
                    }, e))
                }, Object.defineProperty(t.prototype, "isBlocked", {
                    get: function() {
                        var e = this;
                        return !(!this.props.currentUser.blockedUsers || !this.props.currentUser.blockedUsers.find(function(t) {
                            return !!t && t.id === e.props.userID
                        }))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.Component),
            z = Object(p.compose)(Object(v.a)(W, {
                name: "setMuteThread"
            }), Object(I.a)(), Object(F.a)())(G),
            q = n("GxF8");
        var Q = n("N5sm");
        var K = n("l4QG");
        var $, Y = n("P0T5"),
            J = (n("+xsx"), "report-as-spam-button"),
            Z = "mark-not-spam-button",
            X = "dismiss-prompt-button",
            ee = "spam-prompt-pending-target",
            te = "spam-prompt-reported-target",
            ne = {
                displayName: "???",
                login: "???",
                displayBadges: [],
                id: ""
            },
            ie = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.renderPotentialSpamPrompt = function() {
                        if (n.props.spamInfo && "low" !== n.props.spamInfo.likelihood && null === n.props.spamInfo.lastMarkedNotSpamAt) {
                            if ("pending" === n.state.potentialSpamResolution) return a.createElement(V._8, {
                                "data-a-target": ee,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, a.createElement(V._35, {
                                background: V.n.Alt2,
                                padding: .5,
                                elevation: 2
                            }, a.createElement(V._8, {
                                display: V.R.InlineBlock,
                                margin: .5
                            }, a.createElement(V.Q, {
                                type: V._49.Span,
                                fontSize: V.V.Size6,
                                color: V.K.Alt2
                            }, Object(h.d)("It looks like this conversation triggered our spam detector. If it is spam, please report it!", "ThreadHeader"))), a.createElement(V._8, {
                                display: V.R.InlineBlock,
                                margin: .5
                            }, a.createElement(V.v, {
                                "data-a-target": J,
                                type: V.B.Alert,
                                onClick: n.reportSpam,
                                size: V.z.Small
                            }, Object(h.d)("Report spam", "ThreadHeader"))), a.createElement(V._8, {
                                display: V.R.InlineBlock,
                                margin: .5
                            }, a.createElement(V.v, {
                                "data-a-target": Z,
                                onClick: n.markNotSpam,
                                size: V.z.Small
                            }, Object(h.d)("This is not spam", "ThreadHeader")))));
                            if ("reported" === n.state.potentialSpamResolution && n.interlocutor.displayName) return a.createElement(V._8, {
                                "data-a-target": te,
                                className: "thread-header__potential-spam-prompt",
                                attachRight: !0,
                                attachLeft: !0,
                                attachTop: !0
                            }, a.createElement(V._35, {
                                background: V.n.Alt2,
                                padding: .5,
                                elevation: 2
                            }, a.createElement(V._8, {
                                display: V.R.InlineBlock,
                                margin: .5
                            }, a.createElement(V.Q, {
                                type: V._49.Span,
                                fontSize: V.V.Size6,
                                color: V.K.Alt2
                            }, Object(h.d)("Thank you for helping us fight spam. We've blocked {user} from sending you further whispers. You can undo this from the Whisper Settings Menu.", {
                                user: n.interlocutor.displayName
                            }, "ThreadHeader"))), a.createElement(V._8, {
                                display: V.R.InlineBlock,
                                margin: .5
                            }, a.createElement(V.v, {
                                "data-a-target": X,
                                type: V.B.Text,
                                onClick: n.dismissSpamPrompt,
                                size: V.z.Small
                            }, Object(h.d)("Dismiss", "ThreadHeader")))))
                        }
                        return null
                    }, n.reportSpam = function() {
                        n.props.reportUserMutation(n.interlocutor.id, x.c.Spam, n.props.threadID), n.props.blockUserMutation(n.interlocutor.id, x.b.Other, x.a.Whisper, n.props.participants.currentUser), n.props.setThreadSpamStatusMutation(n.props.threadID, !0), Object(Y.l)(n.interlocutor.login, Y.a.SpamPropmt), n.setState({
                            potentialSpamResolution: "reported"
                        })
                    }, n.markNotSpam = function() {
                        n.props.setThreadSpamStatusMutation(n.props.threadID, !1), Object(Y.o)(n.props.threadID), n.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, n.dismissSpamPrompt = function() {
                        n.props.onBlock && n.props.onBlock(n.props.threadID), Object(Y.n)(n.props.threadID), n.setState({
                            potentialSpamResolution: "dismissed"
                        })
                    }, n.onSettingsClick = function(e) {
                        e.stopPropagation()
                    }, n.onHeaderActivate = function(e) {
                        e.target === e.currentTarget && (e.charCode !== k.a.Enter && e.charCode !== k.a.Space || (n.props.onHeaderInteract(), e.stopPropagation()))
                    }, n.onPresenceClick = function(e, t) {
                        t.stopPropagation();
                        var i = n.props.participants.currentUser && n.props.participants.currentUser.friends.edges.find(function(e) {
                            return !(!e.node || e.node.id !== n.interlocutor.id)
                        });
                        n.props.participants.user && i && i.activity ? Object(M.b)({
                            context: e,
                            friendActivity: i.activity,
                            friendLogin: n.props.participants.user.login
                        }) : h.j.warn("[ThreadHeader] Attempted to track presence click without required data.")
                    };
                    var i = h.o.experiments.getAssignment("TWILIGHT_EXTENDED_PRESENCE");
                    return n.state = {
                        potentialSpamResolution: "pending",
                        hasExtendedRichPresence: "variant_a" === i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = m({
                            "thread-header__title-bar-container": !0,
                            "thread-header__title-bar-container--highlighted": this.props.isHighlighted,
                            "thread-header__title-bar-container--focused": this.props.isFocused
                        }),
                        n = m({
                            "thread-header": !0,
                            "thread-header--collapsed": this.props.isCollapsed
                        }),
                        i = Object(h.d)("Close", "WhisperThreadHeader"),
                        r = Object(h.d)("Settings", "WhisperThreadHeader");
                    if (this.props.isLoading || !this.props.participants.currentUser || !this.props.participants.user) return a.createElement(V._8, {
                        className: t,
                        display: V.R.Flex,
                        justifyContent: V._7.Between,
                        fullWidth: !0,
                        alignItems: V.c.Center,
                        padding: {
                            y: .5,
                            x: 1
                        },
                        flexShrink: 0,
                        flexGrow: 0,
                        flexWrap: V.U.NoWrap
                    }, a.createElement(V._14, {
                        height: 20,
                        width: 80
                    }), a.createElement(V._8, {
                        display: V.R.Flex
                    }, a.createElement(V.w, {
                        ariaLabel: i,
                        icon: V._25.RemoveTag,
                        "data-a-target": "whispers-thread__close-button-" + this.props.threadID,
                        onClick: this.props.onClose
                    })));
                    var o = null,
                        s = null,
                        l = null,
                        d = null,
                        c = this.props.participants.currentUser && this.props.participants.currentUser.friends.edges.find(function(t) {
                            return !(!t.node || t.node.id !== e.interlocutor.id)
                        });
                    if (c) {
                        s = a.createElement(V._8, {
                            margin: {
                                left: 1
                            },
                            display: V.R.Flex,
                            alignItems: V.c.Center
                        }, a.createElement(V._16, {
                            status: function(e) {
                                switch (e) {
                                    case K.a.Online:
                                        return V._17.Online;
                                    case K.a.Away:
                                    case K.a.Idle:
                                        return V._17.Away;
                                    case K.a.Busy:
                                        return V._17.Busy;
                                    case K.a.Offline:
                                    case K.a.Invisible:
                                    default:
                                        return V._17.Offline
                                }
                            }(c.availability)
                        }));
                        var u = c.activity,
                            p = c.availability;
                        if (u) {
                            var g = {
                                    activity: u,
                                    availability: this.state.hasExtendedRichPresence ? p : void 0
                                },
                                f = Object(L.c)(g, !0),
                                v = null,
                                b = Object(L.d)(this.props.participants.user.login, u);
                            if (b && (v = {
                                    pathname: b,
                                    state: {
                                        content: j.PageviewContent.Presence,
                                        medium: j.PageviewMedium.Whispers
                                    }
                                }), v) {
                                var k = m({
                                    "thread-header__activity-link--highlighted": this.props.isHighlighted
                                });
                                l = a.createElement(R.a, {
                                    className: k,
                                    title: Object(L.c)(g) || "",
                                    onClick: this.onPresenceClick.bind(this, M.a.WhisperHeaderLink),
                                    to: v,
                                    "data-test-selector": "whispers-thread__presence-link"
                                }, f)
                            } else l = f;
                            this.props.isCollapsed || (d = a.createElement(V._8, {
                                padding: {
                                    right: .5
                                }
                            }, a.createElement(A.a, {
                                availability: p,
                                link: v,
                                onClick: this.onPresenceClick.bind(this, M.a.WhisperHeaderButton),
                                shouldHollowOverlay: this.props.isHighlighted
                            })))
                        }
                    }
                    this.props.isCollapsed || !this.props.participants.currentUser || this.props.interactionsDisabled || (o = a.createElement(O.a, null, a.createElement(V.w, {
                        ariaLabel: r,
                        icon: V._25.Gear,
                        overlay: this.props.isHighlighted
                    }), a.createElement(V.q, {
                        direction: V.r.BottomRight,
                        offsetX: "0.5rem"
                    }, a.createElement(z, {
                        login: this.interlocutor.login,
                        displayName: this.interlocutor.displayName,
                        currentUser: this.props.participants.currentUser,
                        userID: this.interlocutor.id,
                        isMuted: this.props.isMuted,
                        threadID: this.props.threadID,
                        collapseThread: this.props.collapse,
                        onBlock: this.props.onBlock,
                        onUnblock: this.props.onUnblock,
                        showReportUserModal: this.props.showReportUserModal
                    }))));
                    var y = this.interlocutor.displayBadges.map(function(e) {
                        return a.createElement(V._2, {
                            key: e.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, a.createElement("img", {
                            alt: e.title,
                            title: e.title,
                            className: "thread-header__badge",
                            src: e.imageURL
                        }))
                    });
                    return a.createElement(V._8, {
                        className: n,
                        position: V._15.Relative,
                        fullWidth: !0
                    }, a.createElement("div", {
                        className: "thread-header__click-area",
                        onClick: this.props.onHeaderInteract,
                        onKeyPress: this.onHeaderActivate,
                        "data-a-target": "thread-header__click-area",
                        tabIndex: 0
                    }, a.createElement(V._8, {
                        className: t,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            y: .5
                        },
                        alignItems: V.c.Center,
                        flexGrow: 1,
                        display: V.R.Flex,
                        "data-a-target": "whisper-thread-title-bar-" + (this.props.participants.user && this.props.participants.user.login),
                        "data-click-out-id": "thread-expand-close",
                        flexWrap: V.U.NoWrap
                    }, a.createElement(V._8, {
                        display: V.R.Flex,
                        flexDirection: V.T.Column,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: V._11.Hidden
                    }, a.createElement(V._8, {
                        display: V.R.Flex,
                        flexGrow: 1,
                        alignItems: V.c.Center,
                        flexWrap: V.U.NoWrap,
                        padding: {
                            right: 1
                        },
                        ellipsis: !0
                    }, y, a.createElement(V.Q, {
                        color: this.props.isHighlighted ? V.K.Overlay : V.K.Base,
                        type: V._49.Span,
                        bold: !0,
                        ellipsis: !0
                    }, this.interlocutor.displayName ? this.interlocutor.displayName : ne.displayName), s), a.createElement(V._35, {
                        className: "thread-header__activity",
                        color: this.props.isHighlighted ? V.K.Overlay : V.K.Base,
                        padding: {
                            right: 1
                        },
                        ellipsis: !0
                    }, l)), a.createElement(V._8, {
                        display: V.R.Flex,
                        flexShrink: 0,
                        flexDirection: V.T.Row,
                        alignItems: V.c.Center
                    }, d, a.createElement("div", {
                        onClick: this.onSettingsClick
                    }, o), a.createElement(V.w, {
                        ariaLabel: i,
                        icon: V._25.RemoveTag,
                        "data-a-target": "thread-close-button-" + (this.props.participants.user && this.props.participants.user.login),
                        "data-test-selector": "thread-header__close-button-" + this.props.threadID,
                        onClick: this.props.onClose,
                        overlay: this.props.isHighlighted
                    })))), this.renderPotentialSpamPrompt())
                }, Object.defineProperty(t.prototype, "interlocutor", {
                    get: function() {
                        return this.props.participants.user || ne
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.Component),
            ae = Object(s.d)(Object(I.a)(), function() {
                var e = this;
                return Object(v.a)(q, {
                    props: function(t) {
                        return {
                            reportUserMutation: function(n, a, r) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            targetUserID: n,
                                                            reason: a,
                                                            threadID: r
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return i.sent(), [3, 4];
                                            case 3:
                                                return e = i.sent(), h.j.error(e, "Unable to report user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }(), function() {
                var e = this;
                return Object(v.a)(Q, {
                    props: function(t) {
                        return {
                            setThreadSpamStatusMutation: function(n, a) {
                                return i.__awaiter(e, void 0, void 0, function() {
                                    var e;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (!t.mutate) return [3, 4];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, t.mutate({
                                                    variables: {
                                                        input: {
                                                            threadID: n,
                                                            isSpam: a
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return i.sent(), [3, 4];
                                            case 3:
                                                return e = i.sent(), h.j.error(e, "Unable to modify threads spam status user"), [3, 4];
                                            case 4:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            }())(ie),
            re = n("/UH7"),
            oe = n("zCIC"),
            se = n("Th9g");
        ! function(e) {
            e[e.Timestamp = 0] = "Timestamp", e[e.Whisper = 1] = "Whisper", e[e.Warning = 2] = "Warning", e[e.InactiveUserNotice = 3] = "InactiveUserNotice", e[e.NewMessages = 4] = "NewMessages", e[e.Notification = 5] = "Notification"
        }($ || ($ = {}));
        n("vRhQ");
        var le = n("hvzu"),
            de = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case $.Timestamp:
                            return a.createElement(V._35, {
                                className: "thread-message__timestamp",
                                color: V.K.Alt2,
                                fontSize: V.V.Size7
                            }, Object(le.e)(e));
                        case $.Warning:
                            return a.createElement(V._35, {
                                className: "thread-message__warning",
                                color: V.K.Alt2
                            }, Object(le.f)());
                        case $.InactiveUserNotice:
                            return a.createElement(V._35, {
                                className: "thread-message__inactive-user",
                                color: V.K.Alt2
                            }, Object(le.b)());
                        case $.Whisper:
                            return this.props.reportOutgoingWhisperRendered && this.props.reportOutgoingWhisperRendered(e.content), a.createElement(V._8, {
                                className: "thread-message__message",
                                "data-a-target": "whisper-message"
                            }, Object(le.g)(e));
                        case $.NewMessages:
                            return a.createElement(V._35, {
                                className: "thread-message__new-messages",
                                color: V.K.OverlayAlt,
                                fontSize: V.V.Size7
                            }, Object(le.c)());
                        case $.Notification:
                            return a.createElement(V._8, {
                                className: "thread-message__notification"
                            }, Object(le.d)(e));
                        default:
                            return null
                    }
                }, t
            }(a.Component),
            ce = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        disableInfiniteTrigger: !0
                    }, t.loadMore = function() {
                        if (t.scroll && t.scroll.scrollContent) {
                            var e = t.scroll.scrollContent.scrollHeight;
                            t.setState({
                                prevScrollHeight: e
                            })
                        }
                        return t.props.loadMore()
                    }, t.renderMessages = function(e) {
                        return e.map(function(e, n) {
                            return a.createElement(de, {
                                message: e,
                                reportOutgoingWhisperRendered: t.props.reportOutgoingWhisperRendered || void 0,
                                key: t.generateMessageKey(e, n.toString())
                            })
                        })
                    }, t.getMessages = function() {
                        var e = t.props.unreadMessagesCount,
                            n = t.props.thread.messages.edges.map(function(e) {
                                return {
                                    type: $.Whisper,
                                    content: e.node.content.content,
                                    from: e.node.from && t.props.participantsByID[+e.node.from.id],
                                    emotes: e.node.content.emotes,
                                    id: e.node.id,
                                    sentAt: new Date(e.node.sentAt),
                                    editedAt: e.node.editedAt,
                                    deletedAt: e.node.deletedAt
                                }
                            }).reduce(function(n, i, a, r) {
                                if (t.notificationsFor(i).forEach(function(e) {
                                        n.push(e)
                                    }), n.push(i), 0 == --e && n.push(t.createNewMessagesIndicator()), a < r.length - 1) {
                                    var o = r[a + 1];
                                    !i.deletedAt && t.shouldAddTimestamp(i, o) && n.push(t.createTimestampMessage(i))
                                }
                                return a === r.length - 1 && (i.deletedAt || n.push(t.createTimestampMessage(i)), n.push(t.createWarningMessage())), n
                            }, []).reverse();
                        return t.props.hasUnknownParticipant && n.push(t.createInactiveUserMessage()), n
                    }, t.shouldAddTimestamp = function(e, t) {
                        return e.sentAt.valueOf() - t.sentAt.valueOf() > 6e5
                    }, t.createTimestampMessage = function(e) {
                        return {
                            type: $.Timestamp,
                            timestamp: new Date(e.sentAt)
                        }
                    }, t.notificationsFor = function(e) {
                        return t.props.notifications.filter(function(t) {
                            return t.afterMessageID === e.id
                        }).map(t.createNotificationLine)
                    }, t.createNotificationLine = function(e) {
                        return {
                            type: $.Notification,
                            content: e.content
                        }
                    }, t.createNewMessagesIndicator = function() {
                        return {
                            type: $.NewMessages
                        }
                    }, t.createWarningMessage = function() {
                        return {
                            type: $.Warning
                        }
                    }, t.createInactiveUserMessage = function() {
                        return {
                            type: $.InactiveUserNotice
                        }
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.scrollToBottom = function() {
                        t.scroll.scrollToBottom()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.scrollToBottom(), this.setState({
                        disableInfiniteTrigger: !1
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if ((this.props.thread.messages.edges.length > 0 || e.thread.messages.edges.length > 0) && (0 === this.props.thread.messages.edges.length && e.thread.messages.edges.length > 0 || this.props.thread.messages.edges[0].cursor !== e.thread.messages.edges[0].cursor)) {
                        if (!this.scroll || !this.scroll.scrollContent) return;
                        this.setState({
                            prevScrollHeight: this.scroll.scrollContent.scrollHeight
                        })
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    if (this.props.thread.messages.edges.length > e.thread.messages.edges.length)
                        if (this.props.thread.messages.edges[0] && e.thread.messages.edges[0] && this.props.thread.messages.edges[0].cursor === e.thread.messages.edges[0].cursor && this.props.thread.messages.edges[0].node.id === e.thread.messages.edges[0].node.id) {
                            if (this.scroll && this.scroll.scrollContent && this.state.prevScrollHeight && this.state.prevScrollHeight !== this.scroll.scrollContent.scrollHeight) {
                                var t = this.scroll.scrollContent.scrollHeight - this.state.prevScrollHeight;
                                this.scroll.scrollContent.scrollTop = t
                            }
                        } else this.scrollToBottom();
                    this.props.notifications.length > e.notifications.length && this.scrollToBottom(), e.collapsed && !this.props.collapsed && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this.getMessages();
                    return a.createElement(V._8, {
                        fullHeight: !0
                    }, a.createElement(oe.b, {
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0
                    }, a.createElement(V._8, null, a.createElement(oe.a, {
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadMore,
                        pixelThreshold: 200,
                        orientation: se.b.Down,
                        contentLength: e.length
                    }), this.renderMessages(e))))
                }, t.prototype.generateMessageKey = function(e, t) {
                    switch (e.type) {
                        case $.NewMessages:
                        case $.Warning:
                        case $.InactiveUserNotice:
                            return "" + e.type;
                        case $.Timestamp:
                            return e.type + "-" + e.timestamp.getTime();
                        case $.Whisper:
                            return e.type + "-" + e.id;
                        default:
                            return h.j.warn("[ThreadMessages] Encountered an unknown message type."), t
                    }
                }, t
            }(a.Component);
        var ue = Object(o.b)(function(e, t) {
            return {
                notifications: Object(re.a)(e, t.thread.id)
            }
        })(ce);
        var me, pe = n("DCOT"),
            he = n("qzJ+"),
            ge = n("m4HT"),
            fe = n("Lj1H"),
            ve = n("Iv9R"),
            be = (n("p8c9"), n("h4Qz")),
            ke = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.refetchTimeout = 0, n.hadError = !1, n.onEmoticonClick = function(e) {
                        var t = n.autocompleteInput.getValue();
                        t && t.length > 0 && !t.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInput.setValue(t)
                    }, n.onBlock = function(e) {
                        n.addNotification(Object(h.d)("User successfully blocked", "whispers")), n.props.onBlock && n.props.onBlock(e)
                    }, n.onUnblock = function() {
                        n.addNotification(Object(h.d)("User successfully unblocked", "whispers"))
                    }, n.loadMore = function() {
                        return i.__awaiter(n, void 0, void 0, function() {
                            return i.__generator(this, function(e) {
                                return this.props.data.loading || this.hadError ? [2] : [2, this.props.loadMore()]
                            })
                        })
                    }, n.addNewThreadSendWhisper = function(e) {
                        var t = n.state.newThreadMessages;
                        t.unshift({
                            content: e,
                            id: Object(E.b)()
                        }), n.setState({
                            newThreadMessages: t
                        })
                    }, n.addNotification = function(e) {
                        n.props.notifyWhisperThread(n.props.threadID, e, n.getLastMessageID())
                    }, n.getLastMessageID = function() {
                        if (n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0]) return n.props.data.whisperThread.messages.edges[0].node.id
                    }, n.getPlaceholderThreadFromLocalState = function() {
                        return e = n.state.newThreadMessages, t = n.props.currentUserID, {
                            messages: {
                                edges: e.map(function(e, n) {
                                    return {
                                        cursor: "" + n,
                                        node: {
                                            content: {
                                                content: e.content,
                                                emotes: []
                                            },
                                            deletedAt: null,
                                            editedAt: null,
                                            from: {
                                                id: t
                                            },
                                            id: e.id,
                                            sentAt: (new Date).toISOString()
                                        }
                                    }
                                })
                            },
                            isMuted: !1,
                            unreadMessagesCount: 0,
                            participants: [],
                            id: Object(E.b)(),
                            spamInfo: {
                                lastMarkedNotSpamAt: null,
                                likelihood: "low"
                            },
                            userLastMessageRead: {
                                sentAt: (new Date).toISOString()
                            }
                        };
                        var e, t
                    }, n.handleHeaderInteract = function() {
                        n.props.collapsed ? n.expand() : n.collapse()
                    }, n.expand = function() {
                        n.props.participants.currentUser && Object(P.h)(n.props.threadID), n.props.onExpand(n.props.threadID)
                    }, n.onClickOut = function() {
                        n.props.focused && n.props.onUnfocus(n.props.threadID)
                    }, n.handleClose = function() {
                        n.props.participants.currentUser && Object(P.c)(n.props.threadID), n.props.onClose(n.props.threadID)
                    }, n.collapse = function() {
                        n.props.participants.currentUser && Object(P.d)(n.props.threadID), n.props.onCollapse(n.props.threadID)
                    }, n.handleKeydown = function(e) {
                        if ((e.charCode || e.keyCode) === k.a.Enter) {
                            var t = n.autocompleteInput.getValue();
                            n.autocompleteInput.setValue(""), n.sendWhisper(t)
                        }
                    }, n.handleClick = function() {
                        n.props.onFocus(n.props.threadID), n.markThreadMessagesAsRead()
                    }, n.markThreadMessagesAsRead = function() {
                        if (!(n.props.data.loading || n.hadError || n.props.data.whisperThread && 0 === n.props.data.whisperThread.unreadMessagesCount)) {
                            var e = n.props.data.whisperThread && +n.props.data.whisperThread.messages.edges[0].cursor;
                            e && !isNaN(e) || (e = 0), Object(pe.a)({
                                threadID: n.props.threadID,
                                lastReadMessageID: n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id || ""
                            }, e)
                        }
                    }, n.sendWhisper = function(e) {
                        if ("" !== e) {
                            n.props.latencyTracking.resetCustomEvents(N.a.Whispers), n.outgoingWhisperRenderedEvent = n.props.latencyTracking.registerCustomEvent({
                                benchmark: 150,
                                group: N.a.Whispers,
                                key: N.b.WhispersRenderSent,
                                label: N.c.RenderSent,
                                start: N.d.Registration
                            }), n.outgoingWhisperMessage = e, n.hadError && n.addNewThreadSendWhisper(e);
                            var t = Object(ge.b)(n.props.threadID, n.props.currentUserID);
                            t ? (n.props.participants.currentUser && n.props.participants.user && Object(P.m)({
                                threadID: n.props.threadID,
                                targetUserLogin: n.props.participants.user.login
                            }), Object(he.a)({
                                currentUserID: n.props.currentUserID,
                                emotes: n.props.emoteSetsData && n.props.emoteSetsData.emoteMap || {},
                                message: e,
                                recipientUserID: t
                            }).catch(function() {
                                var e = Object(h.d)("Your whisper was not delivered.", "Thread"),
                                    t = n.props.data.whisperThread && n.props.data.whisperThread.messages.edges[0].node.id;
                                n.props.notifyWhisperThread(n.props.threadID, e, t)
                            })) : h.j.warn("Unable to parse whisper recipient ID.")
                        }
                    }, n.setAutocompleteInnerComponentRef = function(e) {
                        n.textInput = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInput = e
                    }, n.handleContentClick = function() {
                        document.getSelection().toString() || n.textInput.focus()
                    }, n.reportOutgoingWhisperRendered = function(e) {
                        n.outgoingWhisperRenderedEvent && e === n.outgoingWhisperMessage && n.props.latencyTracking.reportCustomEvent(n.outgoingWhisperRenderedEvent)
                    }, n.hasUnknownParticipant = function() {
                        return !(n.props.participants.user && n.props.participants.user.login)
                    }, n.shouldDisableInteractions = function() {
                        return n.hasUnknownParticipant()
                    }, n.state = {
                        newThreadMessages: []
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    if (e.data.error && (this.hadError = !0), e.data.error || e.data.loading || !e.data.whisperThread || this.props.reportThreadData(e.threadID, e.data.whisperThread), this.hadError) {
                        var n = !1;
                        this.props.pubsub.messages.whisperReceived !== e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived && e.pubsub.messages.whisperReceived.data_object.thread_id === this.props.threadID && (n = !0), this.props.pubsub.messages.whisperSent !== e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent && e.pubsub.messages.whisperSent.data_object.thread_id === this.props.threadID && (n = !0), n && (clearTimeout(this.refetchTimeout), this.refetchTimeout = setTimeout(function() {
                            t.props.data.refetch()
                        }, 200))
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    e.data.whisperThread && this.props.data.whisperThread && (this.props.data.whisperThread.messages.edges.length, e.data.whisperThread.messages.edges.length)
                }, t.prototype.render = function() {
                    var e = m({
                        "whispers-thread": !0,
                        "whispers-thread--collapsed": this.props.collapsed,
                        "whispers-thread--focused": this.props.focused
                    });
                    if (this.props.hidden) return null;
                    var t = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [];
                    return a.createElement(g.a, {
                        onClickOut: this.onClickOut
                    }, a.createElement(V._35, {
                        className: e,
                        display: V.R.Flex,
                        flexShrink: 0,
                        flexGrow: 0,
                        position: V._15.Relative,
                        overflow: V._11.Hidden,
                        background: V.n.Base,
                        margin: {
                            left: 1
                        },
                        alignItems: V.c.Center,
                        justifyContent: V._7.Center,
                        "data-a-target": "whisper-thread-" + (this.props.participants.user && this.props.participants.user.login) + (this.props.collapsed ? "-collapsed" : ""),
                        elevation: 3
                    }, a.createElement(V._8, {
                        className: "whisper-thread__input",
                        position: V._15.Absolute,
                        fullWidth: !0,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        attachBottom: !0,
                        attachLeft: !0
                    }, a.createElement(T.b, {
                        disabled: this.shouldDisableInteractions(),
                        componentType: T.a.Input,
                        suggestionSource: T.c.Whisper,
                        iconRight: !0,
                        onFocus: this.handleClick,
                        onClick: this.handleClick,
                        onKeyDown: this.handleKeydown,
                        componentRefDelegate: this.setAutocompleteInnerComponentRef,
                        refDelegate: this.setAutocompleteInputRef
                    }, a.createElement(T.d, {
                        emotes: t
                    })), a.createElement(w.a, {
                        attachBottom: !0,
                        attachRight: !0,
                        inputRef: this.textInput,
                        onClickEmote: this.onEmoticonClick,
                        padding: {
                            x: 1,
                            bottom: 1
                        },
                        position: V._15.Absolute,
                        shouldCloseOnClickOut: !0
                    })), a.createElement(V._2, {
                        fullWidth: !0,
                        attachLeft: !0
                    }, a.createElement("div", {
                        className: "whispers-thread__content",
                        onClick: this.handleContentClick
                    }, this.renderContent())), a.createElement(V._8, {
                        position: V._15.Absolute,
                        fullWidth: !0,
                        flexShrink: 0,
                        display: V.R.Flex,
                        alignItems: V.c.Center,
                        attachTop: !0,
                        attachLeft: !0
                    }, a.createElement(ae, {
                        isHighlighted: !!(this.props.data.whisperThread && this.props.data.whisperThread.unreadMessagesCount > 0),
                        isFocused: !!this.props.focused,
                        isMuted: !!this.props.data.whisperThread && this.props.data.whisperThread.isMuted,
                        isCollapsed: this.props.collapsed,
                        isLoading: this.props.participants.loading || !this.props.participants.user || !this.props.participants.currentUser,
                        interactionsDisabled: this.shouldDisableInteractions(),
                        participants: this.props.participants,
                        spamInfo: this.props.data.whisperThread && this.props.data.whisperThread.spamInfo,
                        threadID: this.props.threadID,
                        collapse: this.collapse,
                        onHeaderInteract: this.handleHeaderInteract,
                        onBlock: this.onBlock,
                        onUnblock: this.onUnblock,
                        onClose: this.handleClose,
                        showReportUserModal: this.props.showReportUserModal
                    }))))
                }, t.prototype.renderContent = function() {
                    var e;
                    return this.hadError ? (e = a.createElement(f.a, {
                        message: Object(h.d)("Sorry, something went wrong loading this conversation.", "WhisperThread")
                    }), this.props.participants.currentUser && this.props.participants.user && (e = a.createElement(ue, {
                        thread: this.getPlaceholderThreadFromLocalState(),
                        unreadMessagesCount: 0,
                        participantsByID: this.getUsersByID([this.props.participants.currentUser, this.props.participants.user]),
                        loadMore: this.loadMore,
                        collapsed: this.props.collapsed,
                        hasUnknownParticipant: this.hasUnknownParticipant()
                    }))) : e = this.props.data.loading || this.props.participants.loading || !this.props.data.whisperThread ? a.createElement(V._8, {
                        display: V.R.Flex,
                        justifyContent: V._7.Center,
                        alignItems: V.c.Center,
                        margin: 2,
                        fullHeight: !0,
                        flexGrow: 1
                    }, a.createElement(V._10, null)) : a.createElement(ue, {
                        thread: this.props.data.whisperThread,
                        participantsByID: this.getUsersByID(this.props.data.whisperThread.participants),
                        unreadMessagesCount: this.props.data.whisperThread.unreadMessagesCount,
                        loadMore: this.loadMore,
                        reportOutgoingWhisperRendered: this.reportOutgoingWhisperRendered,
                        collapsed: this.props.collapsed,
                        hasUnknownParticipant: this.hasUnknownParticipant()
                    }), e
                }, t.prototype.getUsersByID = function(e) {
                    for (var t = {}, n = 0, i = e; n < i.length; n++) {
                        var a = i[n];
                        a && (t[a.id] = a)
                    }
                    return t
                }, t
            }(a.Component),
            ye = Object(p.compose)(Object(v.a)(ve, {
                options: function(e) {
                    return {
                        variables: {
                            targetUserID: Object(ge.b)(e.threadID, e.currentUserID) || ""
                        },
                        skip: !e.currentUserID || !e.threadID
                    }
                },
                name: "participants"
            }), Object(v.a)(be, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.threadID
                        }
                    }
                },
                props: function(e) {
                    return i.__assign({}, e, {
                        loadMore: function() {
                            return e.data.fetchMore({
                                query: be,
                                variables: i.__assign({}, e.data.variables, {
                                    cursor: e.data.whisperThread && e.data.whisperThread.messages.edges[e.data.whisperThread.messages.edges.length - 1].cursor
                                }),
                                updateQuery: function(e, t) {
                                    var n = t.fetchMoreResult;
                                    if (!n.whisperThread) return {
                                        whisperThread: null
                                    };
                                    if (!e.whisperThread) return {
                                        whisperThread: n.whisperThread
                                    };
                                    var a = i.__assign({}, n.whisperThread.messages, {
                                        edges: Object(C.c)(e.whisperThread.messages.edges, n.whisperThread.messages.edges)
                                    });
                                    return {
                                        whisperThread: i.__assign({}, n.whisperThread, {
                                            messages: a
                                        })
                                    }
                                }
                            })
                        }
                    })
                }
            }), Object(b.a)([{
                topic: function(e) {
                    return Object(S.A)(e.currentUserID)
                },
                mapMessageTypesToProps: (me = {}, me[y.PubsubMessageType.WhisperReceived] = "whisperReceived", me[y.PubsubMessageType.WhisperSent] = "whisperSent", me),
                skipMessage: function(e, t) {
                    return !Object(fe.e)(e) && !Object(fe.d)(e) || e.data_object.thread_id !== t.threadID
                }
            }]), Object(_.a)(), Object(D.d)("WhispersThread", {
                autoReportInteractive: !0
            }))(ke);
        var _e, Ce = Object(o.b)(function(e) {
            return {
                isLoggedIn: Object(d.d)(e)
            }
        }, function(e) {
            return Object(s.b)({
                notifyWhisperThread: u.b,
                showReportUserModal: function(e) {
                    var t = i.__rest(e, []);
                    return Object(l.d)(c.a, t)
                }
            }, e)
        })(ye);
        n("0Yyt");
        n.d(t, "b", function() {
            return _e
        }), n.d(t, "a", function() {
            return Se
        });
        var Se = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.resizeAnimationHandle = null, t.renderThread = function(e) {
                    return e ? a.createElement(Ce, {
                        key: e.threadID,
                        currentUserID: t.props.currentUserID,
                        collapsed: e.collapsed,
                        hidden: e.hidden,
                        threadID: e.threadID,
                        onBlock: t.onBlock,
                        onCollapse: t.props.onCollapseThread,
                        onClose: t.props.onCloseThread,
                        onExpand: t.props.onExpandThread,
                        onFocus: t.props.onFocusThread,
                        onUnfocus: t.props.onUnfocusThread,
                        focused: t.props.focusedThreadID === e.threadID,
                        reportThreadData: t.props.reportThreadData
                    }) : null
                }, t.onBlock = function(e) {
                    t.props.archiveThread(e), t.props.onBlockThread(e)
                }, t.setOpenThreadsRef = function(e) {
                    return _e = e
                }, t.handleContentResize = function() {
                    t.resizeAnimationHandle || (t.resizeAnimationHandle = requestAnimationFrame(function() {
                        t.props.onResizeContent(), t.resizeAnimationHandle = null
                    }))
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this,
                    t = this.props.openedThreads.map(function(t) {
                        return e.renderThread(t)
                    });
                return a.createElement(V._8, {
                    className: "whispers-open-threads",
                    display: V.R.Flex,
                    flexDirection: V.T.RowReverse,
                    alignItems: V.c.End,
                    position: V._15.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    refDelegate: this.setOpenThreadsRef
                }, t, a.createElement(r.a, {
                    onResize: this.handleContentResize
                }))
            }, t
        }(a.Component)
    },
    "1OO3": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("7vx8"),
            r = 60,
            o = 60 * r,
            s = 24 * o,
            l = 7 * s,
            d = 4 * l;
        var c, u = n("MApH");
        n.d(t, "a", function() {
                return c
            }), t.b = function(e) {
                var t = this;
                return Object(a.a)(u, {
                    props: function(n) {
                        return {
                            banUserMutation: function(a, c) {
                                return void 0 === c && (c = null), i.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return i.__generator(this, function(i) {
                                        switch (i.label) {
                                            case 0:
                                                if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                                i.label = 1;
                                            case 1:
                                                return i.trys.push([1, 3, , 4]), [4, n.mutate({
                                                    variables: {
                                                        input: {
                                                            channelID: t,
                                                            bannedUserLogin: a,
                                                            expiresIn: c && function(e) {
                                                                if (!e) return "0s";
                                                                var t = e,
                                                                    n = "";
                                                                if (t > d) {
                                                                    var i = Math.floor(t / d);
                                                                    t -= i * d, n += i + "mo"
                                                                }
                                                                if (t > l) {
                                                                    var a = Math.floor(t / l);
                                                                    t -= a * l, n += a + "w"
                                                                }
                                                                if (t > s) {
                                                                    var c = Math.floor(t / s);
                                                                    t -= c * s, n += c + "d"
                                                                }
                                                                if (t > o) {
                                                                    var u = Math.floor(t / o);
                                                                    t -= u * o, n += u + "h"
                                                                }
                                                                if (t > r) {
                                                                    var m = Math.floor(t / r);
                                                                    t -= m * r, n += m + "m"
                                                                }
                                                                return t > 0 && (n += t + "s"), n
                                                            }(c)
                                                        }
                                                    }
                                                })];
                                            case 2:
                                                return [2, i.sent().data];
                                            case 3:
                                                throw i.sent(), new Error("Unable to ban user");
                                            case 4:
                                                return [3, 6];
                                            case 5:
                                                throw new Error("Ban user mutation is not ready");
                                            case 6:
                                                return [2]
                                        }
                                    })
                                })
                            }
                        }
                    }
                })
            },
            function(e) {
                e.Forbidden = "FORBIDDEN", e.TargetNotFound = "TARGET_NOT_FOUND", e.TargetIsSelf = "TARGET_IS_SELF", e.TargetIsAnonymous = "TARGET_IS_ANONYMOUS", e.TargetIsMod = "TARGET_IS_MOD", e.TargetIsBroadcaster = "TARGET_IS_BROADCASTER", e.TargetIsStaff = "TARGET_IS_STAFF", e.TargetIsAdmin = "TARGET_IS_ADMIN", e.TargetIsGlobalMod = "TARGET_IS_GLOBAL_MOD", e.TargetIsAlreadyBanned = "TARGET_ALREADY_BANNED", e.DurationInvalid = "DURATION_INVALID"
            }(c || (c = {}))
    },
    "1bR2": function(e, t, n) {
        e.exports = n.p + "assets/gift1-8573b4d1700bd278971c52e7d077d1c4.png"
    },
    "1pvm": function(e, t) {},
    "1tZx": function(e, t) {},
    "1vwK": function(e, t) {},
    "2B/Z": function(e, t) {},
    "2Hj/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("Ex+h"),
            s = n("l4QG");

        function l(e, t) {
            var n = e.activity,
                i = e.availability;
            if (!n) return null;
            switch (n.type) {
                case o.a.Playing:
                    return n.game && n.game.name ? Object(r.d)("playing {game}", {
                        game: n.game.name
                    }, "PresenceActivity") : Object(r.d)("playing", "PresenceActivity");
                case o.a.Watching:
                    var a = function(e) {
                        if (e && e.type === o.a.Watching && e.user) return e.user.hosting && e.user.hosting.displayName ? {
                            isHost: !0,
                            displayName: e.user.hosting.displayName
                        } : {
                            isHost: !1,
                            displayName: e.user.displayName
                        };
                        return null
                    }(n);
                    return a ? i && i === s.a.Offline ? !t && a.isHost ? Object(r.d)("was watching {user} with the {community} community", {
                        user: a.displayName,
                        community: n.user.displayName
                    }, "PresenceActivity") : !t && n.user.stream && n.user.stream.game && n.user.stream.game.name ? Object(r.d)("was watching {user} stream {game}", {
                        user: a.displayName,
                        game: n.user.stream.game.name
                    }, "PresenceActivity") : Object(r.d)("was watching {user}", {
                        user: a.displayName
                    }, "PresenceActivity") : !t && a.isHost ? Object(r.d)("watching {user} with the {community} community", {
                        user: a.displayName,
                        community: n.user.displayName
                    }, "PresenceActivity") : !t && n.user.stream && n.user.stream.game && n.user.stream.game.name ? Object(r.d)("watching {user} stream {game}", {
                        user: a.displayName,
                        game: n.user.stream.game.name
                    }, "PresenceActivity") : Object(r.d)("watching {user}", {
                        user: a.displayName
                    }, "PresenceActivity") : null;
                case o.a.Streaming:
                    return n.stream && n.stream.game && n.stream.game.name ? Object(r.d)("streaming {game}", {
                        game: n.stream.game.name
                    }, "PresenceActivity") : Object(r.d)("streaming", "PresenceActivity");
                default:
                    return null
            }
        }

        function d(e, t) {
            if (!t) return null;
            switch (t.type) {
                case o.a.Streaming:
                    return "/" + e;
                case o.a.Watching:
                    return "/" + t.user.login;
                default:
                    return null
            }
        }

        function c(e) {
            var t = Object(r.d)("Online", "PresenceAvailability");
            switch (e) {
                case s.a.Idle:
                case s.a.Away:
                    return Object(r.d)("Away", "PresenceAvailability");
                case s.a.Busy:
                    return Object(r.d)("Busy", "PresenceAvailability");
                case s.a.Offline:
                    return Object(r.d)("Offline", "PresenceAvailability");
                case s.a.Invisible:
                    return Object(r.d)("Invisible", "PresenceAvailability");
                case s.a.Online:
                default:
                    return t
            }
        }
        var u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this,
                        i = r.o.experiments.getAssignment("TWILIGHT_EXTENDED_PRESENCE");
                    return n.state = {
                        hasExtendedRichPresence: "variant_a" === i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = e.activity,
                        n = e.availability,
                        i = e.condensed,
                        r = this.state.hasExtendedRichPresence ? {
                            activity: t,
                            availability: n
                        } : {
                            activity: t
                        };
                    return a.createElement("span", {
                        "data-a-target": "presence-text"
                    }, l(r, i) || c(n))
                }, t
            }(a.Component),
            m = n("Odds"),
            p = function(e) {
                var t = m._17.Online;
                switch (e.availability) {
                    case s.a.Idle:
                    case s.a.Away:
                        t = m._17.Away;
                        break;
                    case s.a.Busy:
                        t = m._17.Busy;
                        break;
                    case s.a.Invisible:
                        t = m._17.Invisible;
                        break;
                    case s.a.Offline:
                        t = m._17.Offline;
                        break;
                    case s.a.Online:
                        t = m._17.Online;
                        break;
                    default:
                        t = m._17.Online
                }
                return a.createElement(m._16, {
                    status: t
                })
            },
            h = n("HZww");
        var g = n("aMxy"),
            f = n("mqvl"),
            v = n("TVUY");

        function b(e) {
            return function(t) {
                return function(e) {
                    return function(t) {
                        return function(n) {
                            function r(t) {
                                var i = n.call(this, t) || this;
                                return i.options = e(t), i
                            }
                            return i.__extends(r, n), r.prototype.componentDidMount = function() {
                                this.options.skip || this.subscribe(this.options)
                            }, r.prototype.componentWillReceiveProps = function(t) {
                                var n = e(t);
                                n.topic === this.options.topic || n.skip || (this.unsubscribe(), this.subscribe(n)), this.options = n
                            }, r.prototype.componentWillUnmount = function() {
                                this.unsubscribe()
                            }, r.prototype.render = function() {
                                return a.createElement(t, i.__assign({}, this.props))
                            }, r.prototype.subscribe = function(e) {
                                this.unsubscriber = Object(h.q)({
                                    fragment: e.fragment,
                                    id: e.id,
                                    topic: e.topic,
                                    type: e.type,
                                    mutator: e.mutator
                                })
                            }, r.prototype.unsubscribe = function() {
                                this.unsubscriber && this.unsubscriber()
                            }, r
                        }(a.Component)
                    }
                }(function(t) {
                    var n = e(t);
                    return {
                        id: "User:" + n.id,
                        skip: n.skip,
                        fragment: v,
                        topic: Object(h.m)(n.currentUserID),
                        type: g.PubsubMessageType.Presence,
                        mutator: function(e, t) {
                            if (!t) return null;
                            var i = n.id;
                            if (e.data.user_id !== +i) return t;
                            var a = "$User:" + i + ".activity";
                            return t.availability = e.data.availability.toUpperCase(), t.activity = Object(f.a)(e.data.activity, a), t
                        }
                    }
                })(t)
            }
        }
        n.d(t, "b", function() {
            return u
        }), n.d(t, "a", function() {
            return p
        }), n.d(t, !1, function() {
            return b
        }), n.d(t, "c", function() {
            return l
        }), n.d(t, "d", function() {
            return d
        }), n.d(t, !1, function() {
            return c
        })
    },
    "2I50": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ChatInput_SendCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendCheerInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sendCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "currentUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsBalance"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 120
            }
        };
        n.loc.source = {
            body: "mutation ChatInput_SendCheer($input: SendCheerInput!) {\nsendCheer(input: $input) {\nid\ncurrentUser {\nid\nbitsBalance\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2IkU": function(e, t) {},
    "2LJg": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "roomMessageContent"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "RoomMessage"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "content"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "fragments"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "text"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "content"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "Emote"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        alias: {
                                                            kind: "Name",
                                                            value: "emoteID"
                                                        },
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "setID"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "token"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "User"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "__typename"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 183
            }
        };
        n.loc.source = {
            body: "fragment roomMessageContent on RoomMessage {\ncontent {\ntext\nfragments {\ntext\ncontent {\n... on Emote {\nemoteID: id\nsetID\ntoken\n}\n... on User {\nid\nlogin\ndisplayName\n}\n__typename\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "2ZhA": function(e, t) {},
    "2emZ": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Emote = "emote", e.Mention = "mention", e.Hashtag = "hashtag", e.None = "none"
            }(i || (i = {}))
    },
    "2rJy": function(e, t) {},
    "37Pp": function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            a = n("6sO2"),
            r = n("FDYX"),
            o = n("Odds"),
            s = (n("M5Tl"), function(e) {
                var t = e.subscriptionProduct;
                if (void 0 === t) return i.createElement("div", null);
                var n = e.isOneTime ? Object(a.d)("{price} / One-time purchase", {
                    price: t.price
                }, "SubDiscountPriceLabel") : Object(a.d)("{price} / Month", {
                    price: t.price
                }, "SubDiscountPriceLabel");
                if (e.isGift ? Object(r.c)([e.subscriptionProduct]) : Object(r.d)([e.subscriptionProduct])) {
                    var s = void 0;
                    return s = e.isGift ? Object(a.d)("{price} (Save {percent})", {
                        price: Object(r.a)(e.subscriptionProduct, e.isGift),
                        percent: Object(a.e)(Object(r.b)(e.subscriptionProduct, e.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel") : Object(a.d)("{price} for the first month (Save {percent})", {
                        price: Object(r.a)(e.subscriptionProduct, e.isGift),
                        percent: Object(a.e)(Object(r.b)(e.subscriptionProduct, e.isGift) / 100, "percent")
                    }, "SubDiscountPriceLabel"), i.createElement(o._8, {
                        "data-test-selector": "sub-discount-price-label__discounted"
                    }, i.createElement(o.Q, {
                        color: o.K.Alt2,
                        decoration: o._47.Strikethrough
                    }, n), i.createElement(o.Q, {
                        className: "sub-discount-price-label__discount-price",
                        type: o._49.H5,
                        bold: !0
                    }, s))
                }
                return i.createElement(o._8, {
                    "data-test-selector": "sub-discount-price-label__non-discounted"
                }, i.createElement(o.Q, null, n))
            });
        n.d(t, !1, function() {
            return "sub-discount-price-label__discounted"
        }), n.d(t, !1, function() {
            return "sub-discount-price-label__non-discounted"
        }), n.d(t, "a", function() {
            return s
        })
    },
    "3KVC": function(e, t, n) {
        "use strict";
        t.a = function(e) {
            void 0 === e && (e = "");
            return i.test(e)
        }, t.b = function(e) {
            void 0 === e && (e = "");
            var t = e.match(i);
            if (null === t) return "";
            if (t && t.length > 0 && void 0 !== t.index) {
                var n = t[1];
                return n
            }
            return ""
        };
        var i = new RegExp("(?:^|\\s)(?:https?://)?(?:(?:www|go).)?twitch.tv/videos/(\\d+)(?:$|\\s)?")
    },
    "3LYq": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_AllowRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "AllowRejectedChatMessageInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "allowRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 141
            }
        };
        n.loc.source = {
            body: "mutation Chat_AllowRejectedChatMessage($input: AllowRejectedChatMessageInput!) {\nallowRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "3QSP": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_SubEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withVideo"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canPrimeSubscribe"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "tier"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "purchasedWithPrime"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withVideo"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcastType"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 266
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_SubEvent_User($channelID: ID! $withVideo: Boolean! $videoID: ID) {\nuser(id: $channelID) {\nid\nself {\ncanPrimeSubscribe\nsubscriptionBenefit {\nid\ntier\npurchasedWithPrime\n}\n}\n}\nvideo(id: $videoID) @include(if: $withVideo) {\nid\nbroadcastType\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "3T7g": function(e, t, n) {
        "use strict";
        var i = n("RbGx"),
            a = n("urTJ"),
            r = n("+V/3"),
            o = (n("AwFw"), n("TToO")),
            s = function() {
                function e(e, t, n) {
                    this.globalsBySet = new Map, this.channelsBySet = new Map, this.indexBadges(e, this.globalsBySet, n), Array.isArray(t) && this.indexBadges(t, this.channelsBySet, n)
                }
                return e.prototype.getBadge = function(e, t) {
                    var n = this.channelsBySet.get(e);
                    return n && n.has(t) ? n.get(t) || null : void 0 !== (n = this.globalsBySet.get(e)) && n.get(t) || null
                }, e.prototype.indexBadges = function(e, t, n) {
                    e.forEach(function(e) {
                        n && e.clickAction === r.b && (e = o.__assign({}, e, {
                            channelName: n
                        }));
                        var i = t.get(e.setID);
                        i || (i = new Map, t.set(e.setID, i)), i.set(e.version, e)
                    })
                }, e
            }();
        new s([], [], "");
        n.d(t, "b", function() {
            return i.a
        }), n.d(t, "a", function() {
            return a.a
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "c", function() {
            return s
        })
    },
    "3iBR": function(e, t, n) {
        "use strict";
        n.d(t, "m", function() {
            return r
        }), n.d(t, "c", function() {
            return o
        }), n.d(t, "b", function() {
            return s
        }), n.d(t, "a", function() {
            return l
        }), n.d(t, "i", function() {
            return d
        }), n.d(t, "k", function() {
            return c
        }), n.d(t, "j", function() {
            return u
        }), n.d(t, "l", function() {
            return m
        }), n.d(t, "g", function() {
            return p
        }), n.d(t, "h", function() {
            return h
        }), n.d(t, "d", function() {
            return g
        }), n.d(t, "e", function() {
            return f
        }), n.d(t, "f", function() {
            return v
        });
        var i, a = n("I89S"),
            r = {
                ERROR_DISPLAY_TIMEOUT: 5e3,
                GET_BALANCE_RATE_LIMIT: 5e3,
                UNDO_PROMPT_DURATION: 5e3
            },
            o = "https://d3aqoihi2n8ty8.cloudfront.net",
            s = o + "/cheer",
            l = o + "/actions",
            d = 8e5,
            c = 1e4,
            u = 500,
            m = 1e3,
            p = "cheer",
            h = a.a.Purple,
            g = "FIRST_PARTY",
            f = "THIRD_PARTY",
            v = ((i = {})[a.a.Gray] = "#979797", i[a.a.Purple] = "#9c3ee8", i[a.a.Green] = "#1db2a5", i[a.a.Blue] = "#0099fe", i[a.a.Red] = "#f43021", i[a.a.Yellow] = "#f3a71a", i)
    },
    "4Dne": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e) {
            return r.__awaiter(this, void 0, void 0, function() {
                var t, n, i, u, m, p, h, g;
                return r.__generator(this, function(r) {
                    switch (r.label) {
                        case 0:
                            return (t = e.friendActivity) ? (n = Object(d.d)(e.friendLogin, t)) ? (i = "/" === n[0] ? n.slice(1) : n, t.type !== s.a.Streaming ? [3, 1] : (u = {
                                target_action: a.Streaming,
                                target_channel: e.friendLogin,
                                target_game: t.stream.game && t.stream.game.name || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7])) : (o.j.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2]) : (o.j.warn("[trackPresenceClick] Attempted to track a click with no activity."), [2]);
                        case 1:
                            if (t.type !== s.a.Watching) return [3, 6];
                            m = void 0, p = null, r.label = 2;
                        case 2:
                            return r.trys.push([2, 4, , 5]), [4, o.o.apollo.client.query({
                                query: c,
                                variables: {
                                    login: t.user.login
                                }
                            })];
                        case 3:
                            return p = r.sent(), [3, 5];
                        case 4:
                            return h = r.sent(), o.j.error(h, "[trackPresenceClick] Failed to query watched user data.", {
                                watchedUser: t.user.login
                            }), [3, 5];
                        case 5:
                            return (g = p && p.data && p.data.user) ? m = g.hosting && g.hosting.stream ? g.hosting.stream.game && g.hosting.stream.game.name || void 0 : g.stream && g.stream.game && g.stream.game.name || void 0 : o.j.error(new Error("GraphQL empty response"), "[trackPresenceClick] Query for watched user info returned no data.", {
                                watchedUser: t.user.login
                            }), u = {
                                target_action: a.Watching,
                                target_channel: t.user.login,
                                target_game: m,
                                target_hosted_channel: t.user.hosting && t.user.hosting.login || void 0,
                                target_login: e.friendLogin,
                                target_url: i,
                                ui_context: e.context
                            }, [3, 7];
                        case 6:
                            return o.j.warn("[trackPresenceClick] Attempted to track a click on an unjoinable activity."), [2];
                        case 7:
                            return o.n.track(l.SpadeEventType.PresenceClick, u), [2]
                    }
                })
            })
        };
        var i, a, r = n("TToO"),
            o = n("6sO2"),
            s = n("Ex+h"),
            l = n("vH/s"),
            d = n("2Hj/"),
            c = n("K1Jg");
        n.n(c);
        ! function(e) {
            e.FriendsListButton = "friends", e.WhisperHeaderButton = "convo_join", e.WhisperHeaderLink = "convo_link"
        }(i || (i = {})),
        function(e) {
            e.Streaming = "streaming", e.Watching = "watching"
        }(a || (a = {}))
    },
    "4JjK": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.Ready = 0] = "Ready", e[e.Dimensions = 1] = "Dimensions", e[e.RequestAd = 2] = "RequestAd", e[e.OnStart = 3] = "OnStart", e[e.OnCredit = 4] = "OnCredit", e[e.OnFinish = 5] = "OnFinish", e[e.OnClose = 6] = "OnClose", e[e.OnError = 7] = "OnError", e[e.Adblock = 8] = "Adblock", e[e.LimitReached = 9] = "LimitReached"
            }(i || (i = {}))
    },
    "4Q5V": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("HW6M"),
            s = n("3zLD"),
            l = n("7vx8"),
            d = n("oIkB"),
            c = n("RbGx"),
            u = n("iydZ"),
            m = n("RH2O"),
            p = n("2KeS"),
            h = n("3T7g"),
            g = n("ass3"),
            f = n("Nay6"),
            v = n("aUOx"),
            b = n("Ncf8"),
            k = n("qkCi"),
            y = n("1OO3"),
            _ = n("KBUQ"),
            C = n("JtUK"),
            S = n("Kthq"),
            E = n("Odds"),
            N = (n("S4DY"), function(e) {
                var t = e.onBanUser,
                    n = E._25.Ban,
                    i = Object(r.d)("Ban {login}", {
                        login: e.senderLogin
                    }, "ModerationIcons"),
                    o = "chat-ban-button";
                return e.isMessageDeleted && (t = e.onUnbanUser, n = E._25.FollowCheck, i = Object(r.d)("Unban {login}", {
                    login: e.senderLogin
                }, "ModerationIcons"), o = "chat-unban-button"), a.createElement(E._35, {
                    color: E.K.Alt2,
                    display: E.R.Inline,
                    margin: {
                        right: .5
                    }
                }, a.createElement("button", {
                    className: "mod-icon",
                    onClick: t,
                    "data-test-selector": o
                }, a.createElement(E._52, {
                    align: E._53.Left,
                    label: i
                }, a.createElement(E._24, {
                    width: 16,
                    height: 16,
                    type: E._26.Inherit,
                    asset: n
                }))), a.createElement("button", {
                    className: "mod-icon",
                    onClick: e.onTimeoutUser,
                    "data-test-selector": "chat-timeout-button"
                }, a.createElement(E._52, {
                    align: E._53.Left,
                    label: Object(r.d)("Timeout {login}", {
                        login: e.senderLogin
                    }, "ModerationIcons")
                }, a.createElement(E._24, {
                    width: 16,
                    height: 16,
                    type: E._26.Inherit,
                    asset: E._25.Timeout
                }))))
            }),
            T = 600,
            w = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanUser = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return i.trys.push([0, 2, , 3]), [4, this.props.banUserMutation(this.props.senderLogin)];
                                    case 1:
                                        return e = i.sent().banUserFromChatRoom, this.props.onPushMessage && (e.error ? (n = Object(v.a)(Object(C.a)(this.props.senderLogin, e.error.code)), this.props.onPushMessage(n)) : (t = Object(b.a)(k.e.Ban, this.props.senderLogin, null, null), this.props.onPushMessage(t))), [3, 3];
                                    case 2:
                                        return i.sent(), this.props.onPushMessage && (n = Object(v.a)(Object(r.d)("Unable to ban user.", "ModerationIcons")), this.props.onPushMessage(n)), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t.onTimeoutUser = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return i.trys.push([0, 2, , 3]), [4, this.props.banUserMutation(this.props.senderLogin, T)];
                                    case 1:
                                        return e = i.sent().banUserFromChatRoom, this.props.onPushMessage && (e.error ? (n = Object(v.a)(Object(C.a)(this.props.senderLogin, e.error.code, !0)), this.props.onPushMessage(n)) : (t = Object(b.a)(k.e.Timeout, this.props.senderLogin, null, T), this.props.onPushMessage(t))), [3, 3];
                                    case 2:
                                        return i.sent(), this.props.onPushMessage && (n = Object(v.a)(Object(r.d)("Unable to timeout user.", "ModerationIcons")), this.props.onPushMessage(n)), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t.onUnbanUser = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t;
                            return i.__generator(this, function(n) {
                                switch (n.label) {
                                    case 0:
                                        return n.trys.push([0, 2, , 3]), [4, this.props.unbanUserMutation(this.props.senderLogin)];
                                    case 1:
                                        return e = n.sent().unbanUserFromChatRoom, this.props.onPushMessage && (e.error ? (t = Object(v.a)(Object(S.a)(this.props.senderLogin, e.error.code)), this.props.onPushMessage(t)) : (t = Object(v.a)(Object(r.d)("{bannedUserLogin} is no longer banned from this channel.", {
                                            bannedUserLogin: this.props.senderLogin
                                        }, "ModerationIcons")), this.props.onPushMessage(t))), [3, 3];
                                    case 2:
                                        return n.sent(), this.props.onPushMessage && (t = Object(v.a)(Object(r.d)("Unable to unban user.", "ModerationIcons")), this.props.onPushMessage(t)), [3, 3];
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(N, {
                        isMessageDeleted: this.props.isMessageDeleted,
                        onBanUser: this.onBanUser,
                        onTimeoutUser: this.onTimeoutUser,
                        onUnbanUser: this.onUnbanUser,
                        senderLogin: this.props.senderLogin
                    })
                }, t
            }(a.Component),
            D = function(e) {
                return {
                    channelID: e.channelID
                }
            },
            R = Object(s.compose)(Object(y.b)(D), Object(_.b)(D))(w),
            O = n("g7wA"),
            I = n("O9wU"),
            M = (n("B88H"), "chat-deleted-message-placeholder"),
            x = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        alwaysShowMessage: !1
                    }, t.renderModerationIcons = function() {
                        return t.props.isCurrentUserModerator && t.props.showModerationIcons ? a.createElement(R, {
                            channelID: t.props.channelID,
                            isMessageDeleted: t.props.message.deleted,
                            senderLogin: t.props.message.user.userLogin
                        }) : null
                    }, t.renderMessageBody = function() {
                        if (t.props.isDeleted && !t.state.alwaysShowMessage) {
                            var e = Object(r.d)("message deleted", "ChatLine");
                            return t.props.isCurrentUserModerator || t.props.isCurrentUserStaff ? a.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": M
                            }, a.createElement("a", {
                                href: "",
                                onClick: t.alwaysShowMessage
                            }, "<" + e + ">")) : a.createElement("span", {
                                key: "deleted",
                                className: "chat-line__message--deleted",
                                "data-a-target": M
                            }, "<" + e + ">")
                        }
                        return Object(O.e)(t.props.message.messageParts)
                    }, t.alwaysShowMessage = function(e) {
                        e && e.preventDefault(), t.setState({
                            alwaysShowMessage: !0
                        })
                    }, t.usernameClickHandler = function(e) {
                        t.props.onUsernameClick(t.props.message.user.userLogin, I.a.chat_message, t.props.message.id, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = e.badgeSets,
                        n = e.className,
                        i = e.message,
                        r = e.showTimestamps,
                        s = {},
                        l = ": ";
                    i.messageType === k.c.Action && (s = {
                        color: i.user.color
                    }, l = " ");
                    var d = null;
                    return r && (d = Object(O.j)(i.timestamp)), a.createElement("div", {
                        className: o(n, "chat-line__message"),
                        style: s,
                        "data-a-target": "chat-line-message"
                    }, d, this.renderModerationIcons(), a.createElement(h.b, {
                        badgeSets: t,
                        badgesToRender: i.badges
                    }), a.createElement("button", {
                        onClick: this.usernameClickHandler,
                        className: "chat-line__username"
                    }, a.createElement(f.a, {
                        userData: i.user
                    })), a.createElement("span", {
                        key: "separator",
                        "aria-hidden": "true"
                    }, l), this.renderMessageBody())
                }, t
            }(a.Component);
        var j = Object(s.compose)(Object(m.b)(void 0, function(e) {
                return Object(p.b)({
                    onUsernameClick: g.d
                }, e)
            }))(x),
            L = n("6Agf"),
            A = n("l21v"),
            F = n("3LYq"),
            U = n("IEOs"),
            B = {
                badges: {
                    twitchbot: "1"
                },
                bits: 0,
                color: "#6441A5",
                displayName: "AutoMod",
                id: "automod",
                userID: "automod",
                username: "automod",
                userType: L.a.GlobalMod,
                emotes: null
            },
            P = {
                VoHiYo: {
                    displayName: "VoHiYo",
                    id: "81274",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/81274/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/81274/3.0 3.0x",
                    token: "VoHiYo"
                }
            };
        var V = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isResolved: !1
                    }, t.allowAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        });
                        var e = t.props.message;
                        e.autoModType === k.a.MessageRejectedPrompt && t.props.allowRejectedChatMessage && t.props.allowRejectedChatMessage(Object(d.a)({
                            id: e.rejectedMessage.id
                        }))
                    }, t.denyAutoModRejectedMessage = function() {
                        t.setState({
                            isResolved: !0
                        });
                        var e = t.props.message;
                        e.autoModType === k.a.MessageRejectedPrompt && t.props.denyRejectedChatMessage && t.props.denyRejectedChatMessage(Object(d.a)({
                            id: e.rejectedMessage.id
                        }))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e, t = this.props.message;
                    switch (t.autoModType) {
                        case k.a.MessageRejectedPrompt:
                            e = function(e) {
                                var t;
                                switch (e) {
                                    case "aggressive":
                                        t = Object(r.d)("aggressive", "AutoModLine");
                                        break;
                                    case "sexual":
                                        t = Object(r.d)("sexual", "AutoModLine");
                                        break;
                                    case "profanity":
                                        t = Object(r.d)("profanity", "AutoModLine");
                                        break;
                                    case "identity":
                                        t = Object(r.d)("identity", "AutoModLine");
                                        break;
                                    default:
                                        return Object(r.d)("Message is being held for review. Allow will post it to chat.", "AutoModLine")
                                }
                                return Object(r.d)("Held a message for reason: {category}. Allow will post it to chat.", {
                                    category: t
                                }, "AutoModLine")
                            }(t.category);
                            break;
                        case k.a.MessageRejected:
                            e = Object(r.d)("Hey! Your message is being checked by mods and has not been sent.", "AutoModLine");
                            break;
                        case k.a.MessageAllowed:
                            e = Object(r.d)("Mods have allowed your message. Happy chatting!", "AutoModLine"), e += " VoHiYo";
                            break;
                        case k.a.MessageDenied:
                            e = Object(r.d)("Mods have removed your message.", "AutoModLine");
                            break;
                        default:
                            throw new Error("Invalid message type")
                    }
                    var n = Object(A.a)(e, B, u.a, !1, P);
                    switch (t.autoModType) {
                        case k.a.MessageRejectedPrompt:
                            if (this.state.isResolved) return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, Object(r.d)("Thank you for your feedback!", "ChatLine"));
                            return a.createElement(E._8, {
                                className: "chat-line__message"
                            }, a.createElement(c.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: n.badges
                            }), a.createElement(f.a, {
                                userData: n.user
                            }), a.createElement("span", {
                                key: "separator"
                            }, ": "), Object(O.e)(n.messageParts), a.createElement(E._8, {
                                key: "automod-prompt",
                                className: "chat-line__nested-component--float-right"
                            }, a.createElement(E.v, {
                                size: E.z.Small,
                                onClick: this.allowAutoModRejectedMessage,
                                type: E.B.Text
                            }, Object(r.d)("Allow", "AutoModLine")), a.createElement(E.Q, {
                                type: E._49.Span
                            }, "•"), a.createElement(E.v, {
                                size: E.z.Small,
                                onClick: this.denyAutoModRejectedMessage,
                                type: E.B.Text
                            }, Object(r.d)("Deny", "AutoModLine"))), a.createElement(j, i.__assign({}, this.props, {
                                isDeleted: !1,
                                showTimestamps: !1,
                                className: o(["chat-line__message--alert", "chat-line__message--special", "chat-line__message--clearfix"]),
                                message: t.rejectedMessage
                            })));
                        case k.a.MessageRejected:
                        case k.a.MessageAllowed:
                        case k.a.MessageDenied:
                            return a.createElement(E._8, {
                                className: o(["chat-line__message", "chat-line__message--special", "chat-line__message--alert"])
                            }, a.createElement(c.a, {
                                badgeSets: this.props.badgeSets,
                                badgesToRender: n.badges
                            }), a.createElement(f.a, {
                                userData: n.user
                            }), a.createElement("span", {
                                key: "separator"
                            }, ": "), Object(O.e)(n.messageParts));
                        default:
                            throw new Error("Invalid message type")
                    }
                }, t
            }(a.Component),
            W = Object(s.compose)(Object(l.a)(F, {
                name: "allowRejectedChatMessage",
                options: {}
            }), Object(l.a)(U, {
                name: "denyRejectedChatMessage",
                options: {}
            }))(V),
            H = (n("vadT"), function(e) {
                return a.createElement(E._8, {
                    className: "user-notice-line",
                    margin: {
                        y: .5
                    },
                    padding: {
                        right: 2,
                        y: .5
                    }
                }, e.children)
            }),
            G = n("91zu"),
            z = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message.params,
                        t = this.props.data,
                        n = t.channel,
                        i = t.loading,
                        o = t.error;
                    if (i || o) return null;
                    var s = Object(r.d)("{displayName} is raiding with a party of {viewerCount}.", {
                        displayName: a.createElement("strong", null, n.displayName),
                        viewerCount: a.createElement("strong", null, e.viewerCount)
                    }, "RaidIncomingMessage");
                    return a.createElement(H, {
                        "data-test-selector": "incoming-raid"
                    }, a.createElement(E._8, {
                        display: E.R.Flex,
                        alignItems: E.c.Center
                    }, a.createElement(E.m, {
                        alt: n.displayName,
                        src: n.profileImageURL,
                        size: 30
                    }), a.createElement(E._35, {
                        color: E.K.Base,
                        margin: {
                            left: 1
                        }
                    }, s)))
                }, t
            }(a.Component),
            q = Object(l.a)(G, {
                options: function(e) {
                    return {
                        variables: {
                            channelLogin: e.message.params.login
                        }
                    }
                }
            })(z),
            Q = n("H/22"),
            K = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.moderationActionEvent,
                        t = null;
                    if (e.moderationActionType === k.d.AutoModEnabled) t = Object(r.d)("AutoMod has been enabled for this channel.", "ModerationActionLine");
                    else if (e.level === Q.a.Channel) {
                        var n = e.args && e.args.join(" ").trim(),
                            i = n && n.length > 0 ? "/" + e.moderationActionType + " " + n : "" + e.moderationActionType;
                        t = Object(r.d)("{user} used: {command}.", {
                            user: e.createdByLogin,
                            command: i
                        }, "ModerationActionLine")
                    } else {
                        var o = e.createdByLogin,
                            s = e.targetUserLogin,
                            l = e.duration,
                            d = e.reason;
                        switch (e.moderationActionType) {
                            case k.d.Timeout:
                                t = l && d ? Object(r.d)("{user} timed out {target} for {duration} seconds. Reason: {reason}.", {
                                    user: o,
                                    target: s,
                                    duration: l,
                                    reason: d
                                }, "ModerationActionLine") : l ? Object(r.d)("{user} timed out {target} for {duration} seconds.", {
                                    user: o,
                                    target: s,
                                    duration: l
                                }, "ModerationActionLine") : Object(r.d)("{user} timed out {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case k.d.Ban:
                                t = d ? Object(r.d)("{user} banned {target}. Reason: {reason}.", {
                                    user: o,
                                    target: s,
                                    reason: d
                                }, "ModerationActionLine") : Object(r.d)("{user} banned {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case k.d.Untimeout:
                                t = Object(r.d)("{user} removed time out on {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case k.d.Unban:
                                t = Object(r.d)("{user} removed ban on {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case k.d.Mod:
                                t = Object(r.d)("{user} granted moderator privileges to {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            case k.d.Unmod:
                                t = Object(r.d)("{user} removed moderator privileges for {target}.", {
                                    user: o,
                                    target: s
                                }, "ModerationActionLine");
                                break;
                            default:
                                return null
                        }
                    }
                    return t ? a.createElement(E._8, {
                        className: "chat-line__status"
                    }, a.createElement(E.Q, {
                        type: E._49.Span
                    }, t)) : null
                }, t
            }(a.Component);

        function $() {
            return {
                raid_error_self: Object(r.d)("You cannot raid your own channel.", "RaidErrorSelfMessage"),
                raid_error_forbidden: Object(r.d)("You cannot raid this channel.", "RaidErrorAlreadyRaidingMessage"),
                raid_error_already_raiding: Object(r.d)("You already have a raid in progress.", "RaidErrorForbiddenMessage"),
                raid_error_too_many_viewers_to_raid: Object(r.d)("Sorry, raids can only support up to 20,000 viewers right now.", "RaidErrorTooManyViewersMessage"),
                raid_error_unexpected: Object(r.d)("There was a problem starting the raid. Please try again in a minute.", "RaidErrorUnexpectedMessage"),
                unraid_error_unexpected: Object(r.d)("There was a problem stopping the raid. Please try again in a minute.", "UnraidErrorUnexpectedMessage"),
                unraid_error_no_active_raid: Object(r.d)("You do not have an active raid.", "UnraidErrorNoActiveRaidMessage"),
                raid_notice_restricted_chat: Object(r.d)("This channel has follower or subscriber only chat.", "RaidNoticeRestrictedChatMessage"),
                raid_notice_mature: Object(r.d)("This channel is intended for mature audiences.", "RaidNoticeMatureMessage"),
                raid_notice_owner: Object(r.d)("This channel has started a raid, type {unraidCommand} if you want to cancel.", {
                    unraidCommand: "/unraid"
                }, "RaidNoticeOwnerMessage")
            }
        }
        var Y = function(e) {
                return a.createElement("span", null, $()[e.message.msgid])
            },
            J = n("yDzg"),
            Z = (n("BlKL"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        t.props.onUsernameClick(t.props.login, t.props.sourceType, t.props.contentID, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("button", {
                        className: "chatter-name",
                        onClick: this.usernameClickHandler
                    }, a.createElement(E.Q, {
                        bold: !0,
                        color: E.K.Base,
                        type: E._49.Span
                    }, this.props.children))
                }, t
            }(a.Component));
        var X = Object(s.compose)(Object(m.b)(void 0, function(e) {
            return Object(p.b)({
                onUsernameClick: g.d
            }, e)
        }))(Z);

        function ee(e) {
            switch (e) {
                case "Tier 2":
                    return Object(r.d)("Tier 2", "ChatLine");
                case "Tier 3":
                    return Object(r.d)("Tier 3", "ChatLine");
                default:
                    return Object(r.d)("Tier 1", "ChatLine")
            }
        }
        var te = function(e) {
            var t, n, i = a.createElement(X, {
                    contentID: e.event.user.id,
                    login: e.event.user.username,
                    sourceType: I.a.chat_message
                }, e.event.user.displayName),
                o = null;
            return o = e.event.isPrime ? Object(r.d)("{userLogin} just subscribed with {service}!", {
                userLogin: i,
                service: (t = e.event.channel, n = Object(J.a)("https://twitch.amazon.com/prime", {
                    ref: "subscriptionMessage",
                    channel: t
                }), a.createElement("a", {
                    className: "chat-line__message--link",
                    href: n,
                    target: "_blank",
                    rel: "noopener"
                }, Object(r.d)("Twitch Prime", "ChatLine")))
            }, "ChatLine") : Object(r.d)("{userLogin} just subscribed with a {subTier} sub!", {
                userLogin: i,
                subTier: ee(e.event.tier)
            }, "ChatLine"), a.createElement(E.Q, {
                color: E.K.Alt2,
                type: E._49.Span
            }, o)
        };
        var ne = function(e) {
                return a.createElement(E._35, {
                    color: E.K.Alt2,
                    display: E.R.Inline
                }, a.createElement(te, {
                    event: e.event
                }), a.createElement("span", null, " "), Object(r.d)("{userLogin} subscribed for {months} months in a row!", {
                    userLogin: a.createElement(X, {
                        contentID: e.event.user.id,
                        login: e.event.user.username,
                        sourceType: I.a.chat_message
                    }, e.event.user.displayName),
                    months: e.event.months
                }, "ChatLine"))
            },
            ie = n("Nctl"),
            ae = n.n(ie),
            re = (n("zI5R"), function(e) {
                if (!e.event.user) return null;
                var t = a.createElement(X, {
                        contentID: e.event.user.id,
                        login: e.event.user.username,
                        sourceType: I.a.chat_message
                    }, e.event.user.displayName),
                    n = Object(r.d)("{gifterButton}'s Cheer shared rewards to {selectedCount} others in Chat!", {
                        gifterButton: t,
                        selectedCount: e.event.selectedCount
                    }, "RewardGiftNoticeLine"),
                    i = e.event.minCheerAmount > 0 && Object(r.d)("Cheer at least {minCheerAmount} Bits to share with Chat!", {
                        minCheerAmount: e.event.minCheerAmount
                    }, "RewardGiftNoticeLine");
                return a.createElement(E._8, {
                    className: "reward-gift-user-notice",
                    margin: {
                        y: .5
                    }
                }, a.createElement(E._8, {
                    display: E.R.Flex,
                    alignItems: E.c.Center,
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, a.createElement("img", {
                    className: "reward-gift-user-notice__icon",
                    src: ae.a
                }), a.createElement(E.Q, {
                    color: E.K.Alt2,
                    type: E._49.Span
                }, n)), a.createElement(E._8, {
                    className: "reward-gift-user-notice__action",
                    padding: {
                        x: 1,
                        y: 1
                    }
                }, a.createElement(E.Q, {
                    bold: !0,
                    color: E.K.Link
                }, i)))
            }),
            oe = function(e) {
                var t = e.event.message,
                    n = t.user.isIntl ? t.user.userDisplayName + " (" + t.user.userLogin + ")" : t.user.userDisplayName,
                    i = Object(r.d)("{user} is new here. Say hello!", {
                        user: a.createElement(X, {
                            contentID: t.id,
                            login: t.user.userLogin,
                            sourceType: I.a.chat_message
                        }, "@", n)
                    }, "NewChatterRitual");
                return a.createElement(E._35, {
                    color: E.K.Alt2
                }, i)
            },
            se = function(e) {
                var t = a.createElement(X, {
                        contentID: e.event.user.id,
                        login: e.event.user.username,
                        sourceType: I.a.chat_message
                    }, e.event.user.displayName),
                    n = a.createElement(X, {
                        contentID: e.event.user.id,
                        login: e.event.recipientLogin,
                        sourceType: I.a.chat_message
                    }, e.event.recipientDisplayName),
                    i = null;
                return i = "custom" === e.event.tier ? function(e, t, n) {
                    return 1 === n ? Object(r.d)("{userLogin} gifted a Sub to {recipient}! It's their first Gift Sub in the channel!", {
                        userLogin: e,
                        recipient: t
                    }, "ChatLine") : n > 1 ? Object(r.d)("{userLogin} gifted a Sub to {recipient}! They've given {senderCount} Gift Subs in the channel!", {
                        userLogin: e,
                        recipient: t,
                        senderCount: n
                    }, "ChatLine") : Object(r.d)("{userLogin} gifted a subscription to {recipient}!", {
                        userLogin: e,
                        recipient: t
                    }, "ChatLine")
                }(t, n, e.event.senderCount) : function(e, t, n, i) {
                    var a = ee(t);
                    return 1 === i ? Object(r.d)("{userLogin} gifted a {subTier} Sub to {recipient}! It's their first Gift Sub in the channel!", {
                        userLogin: e,
                        subTier: a,
                        recipient: n
                    }, "ChatLine") : i > 1 ? Object(r.d)("{userLogin} gifted a {subTier} Sub to {recipient}! They've given {senderCount} Gift Subs in the channel!", {
                        userLogin: e,
                        subTier: a,
                        recipient: n,
                        senderCount: i
                    }, "ChatLine") : Object(r.d)("{userLogin} gifted a {subTier} Sub to {recipient}!", {
                        userLogin: e,
                        subTier: a,
                        recipient: n
                    }, "ChatLine")
                }(t, e.event.tier, n, e.event.senderCount), a.createElement(E.Q, {
                    color: E.K.Alt2,
                    type: E._49.Span
                }, i)
            };
        var le, de = n("6d2v"),
            ce = n("OAwv"),
            ue = Object(s.compose)(Object(l.a)(de, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.channelID
                        }
                    }
                }
            }))(function(e) {
                var t = e.data;
                if (t.loading) return null;
                var n = null;
                if (!t.error && t.user && t.user.subscriptionProducts && t.user.subscriptionProducts.length > 0) {
                    var i = t.user.subscriptionProducts.find(function(e) {
                        return !!e && !!e.url
                    });
                    i && (n = i.url)
                }
                if (!n) return a.createElement(E._8, null, Object(r.d)("This room is in subscribers only mode.", "SubsOnlyUpsellLine"));
                var o = a.createElement(E.O, {
                    targetBlank: !0,
                    to: n + "?" + ce.stringify({
                        ref: "subscriber_only_mode_chat"
                    })
                }, n);
                return a.createElement(E._8, null, Object(r.d)("This room is in subscribers only mode. To talk, purchase a channel subscription at {productLink}", {
                    productLink: o
                }, "SubsOnlyUpsellLine"))
            }),
            me = "https://www.twitch.tv/settings/connections";
        ! function(e) {
            e.Kickback = "msg_blizzard", e.Enabled = "blizzard_connect_on", e.Disabled = "blizzard_connect_off", e.AlreadyEnabled = "already_blizzard_mode_on", e.AlreadyDisabled = "already_blizzard_mode_off"
        }(le || (le = {}));
        var pe = function(e) {
                var t = null;
                switch (e.type) {
                    case le.Kickback:
                        var n = a.createElement(E.O, {
                            targetBlank: !0,
                            to: me
                        }, me);
                        t = Object(r.d)("You must connect your Blizzard account to send messages in this room. You can connect your Blizzard account in your Twitch settings at {settingsLink}", {
                            settingsLink: n
                        }, "BlizzardConnectModeNoticeLine");
                        break;
                    case le.Enabled:
                        t = Object(r.d)("This room now requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case le.Disabled:
                        t = Object(r.d)("This room no longer requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case le.AlreadyEnabled:
                        t = Object(r.d)("This room already requires a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    case le.AlreadyDisabled:
                        t = Object(r.d)("This room does not require a Blizzard account connection to chat.", "BlizzardConnectModeNoticeLine");
                        break;
                    default:
                        return null
                }
                return a.createElement(E._8, null, t)
            },
            he = (n("+5Qw"), "timeout_success"),
            ge = "ban_success",
            fe = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    if (!e.doesNotUpdate) return !0;
                    if (e.isCurrentUserModerator !== this.props.isCurrentUserModerator) return !0;
                    if (e.showModerationIcons !== this.props.showModerationIcons) return !0;
                    if (e.showTimestamps !== this.props.showTimestamps) return !0;
                    switch (e.message.type) {
                        case k.b.Message:
                            if (e.message.deleted) return !0;
                            break;
                        case k.b.Resubscription:
                        case k.b.Ritual:
                            if (e.message.message && e.message.message.deleted) return !0;
                            break;
                        case k.b.AutoMod:
                            if (e.message.autoModType === k.a.MessageRejectedPrompt && e.showAutoModActions !== this.props.showAutoModActions) return !0;
                            break;
                        case k.b.ModerationAction:
                            if (e.showModerationActions !== this.props.showModerationActions) return !0
                    }
                    return !1
                }, t.prototype.render = function() {
                    var e = this.props.message;
                    switch (e.type) {
                        case k.b.AutoMod:
                            return e.autoModType !== k.a.MessageRejectedPrompt || this.props.isCurrentUserModerator && this.props.showAutoModActions ? a.createElement(W, {
                                channelID: this.props.channelID,
                                message: e,
                                badgeSets: this.props.badgeSets,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                showModerationIcons: this.props.showModerationIcons,
                                currentUserLogin: this.props.currentUserLogin
                            }) : null;
                        case k.b.ModerationAction:
                            return this.props.isCurrentUserModerator && this.props.showModerationActions ? a.createElement(K, {
                                moderationActionEvent: e
                            }) : null;
                        case k.b.Connected:
                            return a.createElement(E._8, {
                                className: "chat-line__status",
                                "data-a-target": "chat-welcome-message"
                            }, a.createElement(E.Q, {
                                type: E._49.Span
                            }, Object(r.d)("Welcome to the chat room!", "ChatLine")));
                        case k.b.Disconnected:
                            return e.reason ? a.createElement(E._8, {
                                className: "chat-line__status"
                            }, a.createElement(E.Q, {
                                type: E._49.Span
                            }, Object(r.d)("You have been disconnected from chat for the following reason: {reason}", {
                                reason: e.reason
                            }, "ChatLine"))) : a.createElement(E._8, {
                                className: "chat-line__status"
                            }, a.createElement(E.Q, {
                                type: E._49.Span
                            }, Object(r.d)("Sorry, we were unable to connect to chat. Attempting to reconnect...", "ChatLine")));
                        case k.b.Hosted:
                            var t = null;
                            return t = e.isAutohost ? Object(r.d)("{host} is now auto hosting you for up to {viewerCount, number} viewers.", {
                                host: e.hostingChannel,
                                viewerCount: e.viewerCount
                            }, "ChatLine") : e.viewerCount <= 2 ? Object(r.d)("{host} is now hosting you.", {
                                host: e.hostingChannel
                            }, "ChatLine") : Object(r.d)("{host} is now hosting you for up to {viewerCount, number} viewers.", {
                                host: e.hostingChannel,
                                viewerCount: e.viewerCount
                            }, "ChatLine"), a.createElement(E._8, {
                                className: "chat-line__status"
                            }, a.createElement(E.Q, {
                                type: E._49.Span
                            }, t));
                        case k.b.Hosting:
                            return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, a.createElement(E.Q, {
                                type: E._49.Span
                            }, Object(r.d)("Now hosting {channel}", {
                                channel: e.hostedChannel
                            }, "ChatLine")));
                        case k.b.Unhost:
                            return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, a.createElement(E.Q, {
                                type: E._49.Span
                            }, Object(r.d)("No longer hosting.", "ChatLine")));
                        case k.b.Message:
                            return this.props.onRenderReportChatSent && e.user.userLogin === this.props.currentUserLogin && this.props.onRenderReportChatSent(), a.createElement(j, {
                                channelID: this.props.channelID,
                                badgeSets: this.props.badgeSets,
                                message: e,
                                isDeleted: e.deleted,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                onPushMessage: this.props.onPushMessage
                            });
                        case k.b.Moderation:
                            return this.props.isCurrentUserModerator ? a.createElement(E._8, {
                                className: "chat-line__moderation"
                            }, Object(O.f)(e)) : null;
                        case k.b.Subscription:
                            return a.createElement(H, null, this.props.isCurrentUserModerator && this.props.showModerationIcons && a.createElement(R, {
                                channelID: this.props.channelID,
                                onPushMessage: this.props.onPushMessage,
                                senderLogin: e.user.username
                            }), a.createElement(te, {
                                event: e
                            }));
                        case k.b.SubGift:
                            return a.createElement(H, null, this.props.isCurrentUserModerator && this.props.showModerationIcons && a.createElement(R, {
                                channelID: this.props.channelID,
                                onPushMessage: this.props.onPushMessage,
                                senderLogin: e.user.username
                            }), a.createElement(se, {
                                event: e
                            }));
                        case k.b.RewardGift:
                            return a.createElement(re, {
                                event: e
                            });
                        case k.b.BitsCharity:
                            return a.createElement(E._8, {
                                className: "chat-line__bits-charity",
                                padding: {
                                    right: 2,
                                    y: .5
                                }
                            }, Object(O.b)(e));
                        case k.b.Resubscription:
                            var n = null;
                            return e.message && (n = a.createElement(j, {
                                badgeSets: this.props.badgeSets,
                                channelID: this.props.channelID,
                                className: "chat-line--inline",
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                isDeleted: e.message.deleted,
                                message: e.message,
                                onPushMessage: this.props.onPushMessage,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps
                            })), a.createElement(H, null, !n && this.props.isCurrentUserModerator && this.props.showModerationIcons && a.createElement(R, {
                                channelID: this.props.channelID,
                                onPushMessage: this.props.onPushMessage,
                                senderLogin: e.user.username
                            }), a.createElement(ne, {
                                event: e
                            }), a.createElement(E._8, null, n));
                        case k.b.RoomMods:
                            return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, Object(O.g)(e.moderatorLogins));
                        case k.b.SlowMode:
                            return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, Object(O.h)(e));
                        case k.b.SubscriberOnlyMode:
                            return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, Object(O.i)(e));
                        case k.b.FollowerOnlyMode:
                            return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, Object(O.d)(e));
                        case k.b.EmoteOnlyMode:
                            return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, Object(O.c)(e));
                        case k.b.Clear:
                            return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, Object(r.d)("Chat was cleared by a moderator", "ChatLine"));
                        case k.b.Notice:
                            if (function(e) {
                                    return e.msgid in $()
                                }(e)) return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, a.createElement(Y, {
                                message: e
                            }));
                            switch (e.msgid) {
                                case "msg_subsonly":
                                    return a.createElement(E._8, {
                                        className: "chat-line__status"
                                    }, a.createElement(ue, {
                                        channelID: this.props.channelID
                                    }));
                                case le.Kickback:
                                case le.Enabled:
                                case le.Disabled:
                                case le.AlreadyEnabled:
                                case le.AlreadyDisabled:
                                    return a.createElement(E._8, {
                                        className: "chat-line__status"
                                    }, a.createElement(pe, {
                                        type: e.msgid
                                    }))
                            }
                            if (this.props.isCurrentUserModerator) switch (e.msgid) {
                                case he:
                                case ge:
                                    return null
                            }
                            return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, e.message);
                        case k.b.Info:
                            return a.createElement(E._8, {
                                className: "chat-line__status"
                            }, e.message);
                        case k.b.Raid:
                            return a.createElement(q, {
                                message: e
                            });
                        case k.b.Unraid:
                            return a.createElement(H, null, a.createElement(E.Q, {
                                color: E.K.Alt2
                            }, Object(r.d)("The raid has been cancelled.", "RaidCancelMessage")));
                        case k.b.Ritual:
                            return a.createElement(H, null, a.createElement(oe, {
                                event: e
                            }), a.createElement(j, {
                                badgeSets: this.props.badgeSets,
                                channelID: this.props.channelID,
                                className: "chat-line--inline",
                                currentUserDisplayName: this.props.currentUserDisplayName,
                                currentUserLogin: this.props.currentUserLogin,
                                isCurrentUserModerator: this.props.isCurrentUserModerator,
                                isCurrentUserStaff: this.props.isCurrentUserStaff,
                                isDeleted: e.message.deleted,
                                message: e.message,
                                onPushMessage: this.props.onPushMessage,
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps
                            }));
                        default:
                            return null
                    }
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return fe
        })
    },
    "4VHW": function(e, t) {},
    "4Xyl": function(e, t) {},
    "4d+L": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("Aj/L"),
            o = n("vh75"),
            s = n("TToO"),
            l = n("GiK3"),
            d = n("3zLD"),
            c = n("6sO2"),
            u = n("zgdU"),
            m = n("7vx8"),
            p = n("WIs4"),
            h = n("aMxy"),
            g = n("HZww"),
            f = n("11M/"),
            v = n("Z3Cb"),
            b = n("l21v"),
            k = n("CSlQ"),
            y = n("+Znq"),
            _ = n("+xm8"),
            C = n("V5M+"),
            S = n("f2i/"),
            E = n("oIkB"),
            N = n("+8VM"),
            T = n("Odds"),
            w = n("F8t6"),
            D = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.deleteRoom = function() {
                        t.props.deleteRoom(Object(E.a)({
                            roomID: t.props.roomID
                        })), t.props.onCloseModal()
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(T._35, {
                        background: T.n.Base,
                        className: "delete-room-modal",
                        position: T._15.Relative
                    }, l.createElement(T._8, {
                        padding: 2,
                        margin: {
                            top: 1
                        }
                    }, l.createElement(T._8, {
                        margin: {
                            bottom: 2
                        }
                    }, l.createElement(T.Q, {
                        type: T._49.H4
                    }, Object(c.d)("Delete #{roomName}?", {
                        roomName: this.props.roomName
                    }, "DeleteRoomModal")), l.createElement(T._8, {
                        padding: {
                            top: 1
                        }
                    }, l.createElement(T.Q, {
                        type: T._49.Span,
                        color: T.K.Alt2
                    }, Object(c.d)("This will remove all messages in this room permanently from your channel", "DeleteRoomModal")))), l.createElement(T._8, {
                        padding: {
                            top: 2
                        },
                        textAlign: T._45.Right
                    }, l.createElement(T._8, {
                        display: T.R.Inline,
                        margin: {
                            right: .5
                        }
                    }, l.createElement(T.v, {
                        type: T.B.Hollow,
                        onClick: this.props.onCloseModal,
                        "data-test-selector": "cancel-button"
                    }, Object(c.d)("No, keep this room", "DeleteRoomModal"))), l.createElement(T._8, {
                        display: T.R.Inline,
                        margin: {
                            left: .5
                        }
                    }, l.createElement(T.v, {
                        onClick: this.deleteRoom,
                        "data-test-selector": "confirm-button",
                        type: T.B.Alert
                    }, Object(c.d)("Yes, delete this room", "DeleteRoomModal"))))), l.createElement(N.a, {
                        closeOnBackdropClick: !0
                    }))
                }, t
            }(l.Component),
            R = Object(d.compose)(Object(m.a)(w, {
                name: "deleteRoom"
            }))(D);
        var O = Object(i.b)(null, function(e) {
                return Object(a.b)({
                    onCloseModal: C.c
                }, e)
            })(R),
            I = n("tQTt"),
            M = n("hmtx"),
            x = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.toggleMuteSetting = function() {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i;
                            return s.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        return e = this.props.data.room.self.isMuted, t = s.__assign({}, Object(E.a)({
                                            isMuted: !e,
                                            roomID: this.props.roomID
                                        }), {
                                            optimisticResponse: {
                                                updateRoomView: {
                                                    __typename: "UpdateRoomViewPayload",
                                                    roomView: {
                                                        isMuted: !e,
                                                        __typename: "RoomView"
                                                    }
                                                }
                                            }
                                        }), this.props.handleClick && this.props.handleClick(), [4, this.props.muteRoom(t)];
                                    case 1:
                                        return n = a.sent(), i = function(e) {
                                            return e.room.self.isMuted = n.data.updateRoomView.roomView.isMuted, e
                                        }, Object(E.e)(I, {
                                            id: this.props.roomID
                                        }, i), [2]
                                }
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data.loading) return l.createElement(T._14, {
                        height: 30,
                        width: 160
                    });
                    if (this.props.data.error || !this.props.data.room.owner.self.isChannelMember) return null;
                    var e = Object(c.d)("Mute all notifications", "MuteButton");
                    return this.props.data.room.self.isMuted && (e = Object(c.d)("Unmute all notifications", "MuteButton")), l.createElement(T._6, {
                        alpha: !0,
                        "data-test-selector": "mute-room-button",
                        onClick: this.toggleMuteSetting
                    }, l.createElement(T._35, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, e))
                }, t = s.__decorate([Object(m.a)(I, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                }), Object(m.a)(M, {
                    name: "muteRoom"
                })], t)
            }(l.Component),
            j = n("CIox"),
            L = n("oSFp"),
            A = n("mw/a"),
            F = n("CIWf"),
            U = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.openReportModal = function() {
                        t.props.isLoggedIn ? t.props.onShowModal(L.a, {
                            reportContext: {
                                contentID: t.props.roomID,
                                contentType: A.a.Room,
                                targetUserID: t.props.data.room.owner.id
                            },
                            title: Object(c.d)("Report {roomName}", {
                                roomName: t.props.data.room.name
                            }, "ReportRoomButton")
                        }) : t.props.login()
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return this.props.data.loading ? l.createElement(T._14, null) : this.props.data.error ? l.createElement(T._8, null) : l.createElement(T._6, {
                        alpha: !0,
                        alert: !0,
                        "data-test-selector": "report-room-button-selector",
                        onClick: this.openReportModal
                    }, l.createElement(T._35, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, Object(c.d)("Report", "RoomReportButton")))
                }, t = s.__decorate([Object(m.a)(F, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                })], t)
            }(l.Component),
            B = Object(j.f)(U),
            P = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onRoomNameChange = function(e) {
                        t.props.updateRoomName(e.target.value)
                    }, t.onRoomTopicChange = function(e) {
                        t.props.updateRoomTopic && t.props.updateRoomTopic(e.target.value)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(T._8, null, l.createElement(T.W, {
                        label: Object(c.d)("Room name", "RoomLabelsEditor"),
                        error: !!this.props.editRoomNameError,
                        errorMessage: this.props.editRoomNameError
                    }, l.createElement(T._4, {
                        type: T._5.Text,
                        value: this.props.roomName,
                        onChange: this.onRoomNameChange,
                        "data-test-selector": "name-input",
                        placeholder: Object(c.d)("Enter Room name here", "RoomLabelsEditor")
                    })), this.renderRoomTopicEditor())
                }, t.prototype.renderRoomTopicEditor = function() {
                    if (void 0 !== this.props.roomTopic) return l.createElement(T._8, null, l.createElement(T._35, {
                        fullWidth: !0,
                        margin: {
                            top: 1,
                            bottom: 1
                        }
                    }), l.createElement(T.W, {
                        label: Object(c.d)("Room topic", "RoomLabelsEditor"),
                        error: !!this.props.editRoomTopicError,
                        errorMessage: this.props.editRoomTopicError
                    }, l.createElement(T._46, {
                        noResize: !0,
                        value: this.props.roomTopic,
                        onChange: this.onRoomTopicChange,
                        error: !!this.props.editRoomTopicError,
                        "data-test-selector": "topic-input",
                        placeholder: Object(c.d)("What do you want your community to talk about in this room?", "RoomLabelsEditor")
                    })))
                }, t
            }(l.Component),
            V = n("gGMi"),
            W = (n("Jy6n"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isPreviewable: void 0 === t.props.isPreviewable || t.props.isPreviewable,
                        minimumAllowedRole: t.props.minimumAllowedRole || V.b.Everyone
                    }, t.togglePreviewability = function() {
                        t.setState({
                            isPreviewable: !t.state.isPreviewable
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t.toggleSubRole = function() {
                        return t.state.minimumAllowedRole === V.b.Moderator ? t.setMinRoleSub() : t.setMinRoleMod()
                    }, t.toggleAllRole = function() {
                        return t.state.minimumAllowedRole === V.b.Everyone ? t.setMinRoleSub() : t.setMinRoleAll()
                    }, t.setMinRoleMod = function() {
                        t.setState({
                            isPreviewable: !1,
                            minimumAllowedRole: V.b.Moderator
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t.setMinRoleSub = function() {
                        t.setState({
                            isPreviewable: !0,
                            minimumAllowedRole: V.b.Subscriber
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t.setMinRoleAll = function() {
                        t.setState({
                            isPreviewable: !0,
                            minimumAllowedRole: V.b.Everyone
                        }, function() {
                            t.props.updatePermissions(t.state)
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(T._8, null, l.createElement(T._35, {
                        padding: {
                            top: 1,
                            bottom: .5,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(T.Q, {
                        type: T._49.Span
                    }, Object(c.d)("Who can chat in this room?", "RoomPermissionsToggle"))), l.createElement(T._35, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            x: .5
                        },
                        display: T.R.Flex,
                        alignItems: T.c.Center
                    }, l.createElement(T._2, {
                        flexGrow: 1,
                        display: T.R.Flex,
                        alignItems: T.c.Center,
                        className: "room-permissions-toggle__role-name"
                    }, l.createElement("label", {
                        htmlFor: "room-permissions-toggle__mods-permission"
                    }, l.createElement(T.Q, {
                        type: T._49.Strong,
                        color: T.K.Alt
                    }, Object(c.d)("Mods", "RoomPermissionsToggle")))), l.createElement(T._51, {
                        id: "room-permissions-toggle__mods-permission",
                        disabled: !0,
                        checked: !0,
                        "data-test-selector": "moderator-role"
                    })), l.createElement(T._35, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            x: .5
                        },
                        display: T.R.Flex,
                        alignItems: T.c.Center
                    }, l.createElement(T._2, {
                        flexGrow: 1,
                        display: T.R.Flex,
                        alignItems: T.c.Center,
                        className: "room-permissions-toggle__role-name"
                    }, l.createElement("label", {
                        htmlFor: "room-permissions-toggle__subs-permission"
                    }, l.createElement(T.Q, {
                        type: T._49.Strong,
                        color: T.K.Alt
                    }, Object(c.d)("Subs", "RoomPermissionsToggle")))), l.createElement(T._51, {
                        id: "room-permissions-toggle__subs-permission",
                        checked: this.state.minimumAllowedRole !== V.b.Moderator,
                        onChange: this.toggleSubRole,
                        "data-test-selector": "subscriber-role"
                    })), l.createElement(T._35, {
                        padding: {
                            x: 1
                        },
                        margin: {
                            x: .5
                        },
                        display: T.R.Flex,
                        alignItems: T.c.Center
                    }, l.createElement(T._2, {
                        flexGrow: 1,
                        display: T.R.Flex,
                        alignItems: T.c.Center,
                        className: "room-permissions-toggle__role-name"
                    }, l.createElement("label", {
                        htmlFor: "room-permissions-toggle__everyone-permission"
                    }, l.createElement(T.Q, {
                        type: T._49.Strong,
                        color: T.K.Alt
                    }, Object(c.d)("Everyone", "RoomPermissionsToggle")))), l.createElement(T._51, {
                        id: "room-permissions-toggle__everyone-permission",
                        checked: this.state.minimumAllowedRole === V.b.Everyone,
                        onChange: this.toggleAllRole,
                        "data-test-selector": "everyone-role"
                    })), l.createElement(T._8, {
                        padding: {
                            x: .5
                        }
                    }, l.createElement(T._35, {
                        borderTop: !0,
                        margin: {
                            top: .5,
                            bottom: 1,
                            x: 1
                        }
                    })), l.createElement(T._35, {
                        display: T.R.Flex,
                        justifyContent: T._7.Between,
                        alignItems: T.c.Center,
                        padding: {
                            bottom: .5,
                            x: 1
                        },
                        margin: {
                            bottom: 1,
                            x: .5
                        }
                    }, l.createElement(T.Y, {
                        gutterSize: T.Z.None
                    }, l.createElement(T.L, {
                        cols: 8
                    }, l.createElement(T.Q, null, Object(c.d)("Allow others to read chat but not send messages", "RoomPermissionsToggle"))), l.createElement(T.L, {
                        cols: 4
                    }, l.createElement(T._8, {
                        display: T.R.Flex,
                        fullHeight: !0,
                        justifyContent: T._7.Center,
                        flexDirection: T.T.Column,
                        alignContent: T.b.End,
                        alignItems: T.c.End
                    }, this.renderPreviewabilityToggle())))))
                }, t.prototype.renderPreviewabilityToggle = function() {
                    var e = this.state.minimumAllowedRole !== V.b.Subscriber,
                        t = l.createElement(T._51, {
                            disabled: e,
                            checked: this.state.isPreviewable,
                            onChange: this.togglePreviewability,
                            "data-test-selector": "previewability-toggle"
                        });
                    return this.state.minimumAllowedRole === V.b.Moderator && (t = l.createElement(T._52, {
                        direction: T._54.Left,
                        width: 100,
                        label: Object(c.d)("This room is only for moderators", "RoomPermissionsToggle")
                    }, t)), t
                }, t
            }(l.Component)),
            H = {
                NAME_LENGTH_INVALID: function(e) {
                    var t = e.maxChars,
                        n = e.minChars;
                    return Object(c.d)("The name must be between {minChars} and {maxChars} characters.", {
                        minChars: n,
                        maxChars: t
                    }, "RoomErrorCodes")
                },
                SLOW_MODE_ENFORCEMENT_FAILED: function(e) {
                    var t = e.remainingDurationSeconds;
                    return Object(c.d)("This room is in slow mode and you are sending messages too quickly. You will be able to talk again in {remainingDurationSeconds} seconds.", {
                        remainingDurationSeconds: t
                    }, "RoomErrorCodes")
                },
                TOPIC_LENGTH_INVALID: function(e) {
                    var t = e.maxChars;
                    return Object(c.d)("The topic may not exceed {maxChars} characters.", {
                        maxChars: t
                    }, "RoomErrorCodes")
                },
                USER_CHAT_TIMED_OUT: function(e) {
                    var t = e.remainingDurationSeconds;
                    return Object(c.d)("You are timed out and cannot chat for {remainingDurationSeconds} seconds.", {
                        remainingDurationSeconds: t
                    }, "RoomErrorCodes")
                }
            },
            G = {
                AUTO_MOD_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("Your message contains inappropriate content.", "RoomErrorCodes")
                },
                EMOTE_ONLY_MODE_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("This Room is in emote-only mode and your message does not contain only emoticons.", "RoomErrorCodes")
                },
                NAME_CONTAINS_INVALID_CHARACTERS: function() {
                    return Object(c.d)("The name contains invalid characters.", "RoomErrorCodes")
                },
                NAME_NOT_UNIQUE: function() {
                    return Object(c.d)("There is already a room with this name.", "RoomErrorCodes")
                },
                NAME_INAPPROPRIATE: function() {
                    return Object(c.d)("The name contains inappropriate content.", "RoomErrorCodes")
                },
                R9K_MODE_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("This Room is in R9K mode and your message is not unique enough.", "RoomErrorCodes")
                },
                RATE_LIMIT_FAILED: function() {
                    return Object(c.d)("Your message was not sent because you are sending messages too quickly.", "RoomErrorCodes")
                },
                SPAM_ENFORCEMENT_FAILED: function() {
                    return Object(c.d)("This message has been flagged as spam.", "RoomErrorCodes")
                },
                TOPIC_INAPPROPRIATE: function() {
                    return Object(c.d)("The topic contains inappropriate content.", "RoomErrorCodes")
                },
                USER_SUSPENDED: function() {
                    return Object(c.d)("Your account has been suspended.", "RoomErrorCodes")
                }
            };

        function z(e, t) {
            return e in G ? G[e]() : e in H && t ? H[e](t) : Object(c.d)("Error", "RoomErrorCodes")
        }
        var q = /^([^\u0000-\u007F]|[a-z0-9_]|-)*$/,
            Q = 25,
            K = 3,
            $ = 100;

        function Y(e) {
            return q.test(e)
        }

        function J(e) {
            return e.length > Q
        }

        function Z(e) {
            return e.length <= Q && e.length >= K
        }

        function X(e) {
            return e.length <= $
        }
        var ee = n("kvxA"),
            te = (n("DY3c"), n("U+9K")),
            ne = {
                OPTIONS: "OPTIONS",
                PERMISSIONS: "PERMISSIONS",
                LABELS: "LABELS"
            },
            ie = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentView: ne.OPTIONS,
                        isSaveButtonStateSuccess: !1
                    }, t.updatePermissions = function(e) {
                        t.setState({
                            updatedPermissions: e,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.updateRoomName = function(e) {
                        var n;
                        if (Y(e = e.toLowerCase())) {
                            if (J(e)) {
                                n = z("NAME_LENGTH_INVALID", {
                                    maxChars: Q,
                                    minChars: K
                                })
                            }
                        } else n = z("NAME_CONTAINS_INVALID_CHARACTERS");
                        t.setState({
                            updatedRoomName: e,
                            editRoomNameError: n,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.updateRoomTopic = function(e) {
                        var n;
                        X(e) || (n = z("TOPIC_LENGTH_INVALID", {
                            maxChars: $
                        }));
                        t.setState({
                            updatedRoomTopic: e,
                            editRoomTopicError: n,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.setOptionsView = function() {
                        t.setState({
                            editRoomNameError: void 0,
                            editRoomTopicError: void 0,
                            currentView: ne.OPTIONS,
                            isSaveButtonStateSuccess: !1,
                            updatedRoomName: void 0,
                            updatedRoomTopic: void 0,
                            updatedPermissions: void 0
                        })
                    }, t.setPermissionsView = function() {
                        t.setState({
                            currentView: ne.PERMISSIONS,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.setLabelsView = function() {
                        t.setState({
                            currentView: ne.LABELS,
                            isSaveButtonStateSuccess: !1
                        })
                    }, t.saveUpdate = function() {
                        if (void 0 !== t.state.updatedRoomName || void 0 !== t.state.updatedRoomTopic || void 0 !== t.state.updatedPermissions)
                            if (t.state.updatedRoomName && !Z(t.state.updatedRoomName)) {
                                var e = z("NAME_LENGTH_INVALID", {
                                    maxChars: Q,
                                    minChars: K
                                });
                                t.setState({
                                    editRoomNameError: e
                                })
                            } else if (t.state.updatedRoomTopic && !X(t.state.updatedRoomTopic)) {
                            e = z("TOPIC_LENGTH_INVALID", {
                                maxChars: $
                            });
                            t.setState({
                                editRoomTopicError: e
                            })
                        } else {
                            var n = s.__assign({
                                roomID: t.props.roomID,
                                name: t.state.updatedRoomName,
                                topic: t.state.updatedRoomTopic
                            }, t.state.updatedPermissions);
                            t.props.updateRoom(Object(E.a)(n)).then(function(e) {
                                if (e.data.updateRoom.error) {
                                    var n = e.data.updateRoom.error,
                                        i = n.code,
                                        a = n.minLength,
                                        r = z(i, {
                                            maxChars: n.maxLength,
                                            minChars: a
                                        });
                                    i.includes("NAME") ? t.setState({
                                        editRoomNameError: r
                                    }) : i.includes("TOPIC") && t.setState({
                                        editRoomTopicError: r
                                    })
                                } else {
                                    Object(E.e)(ee, {
                                        id: t.props.roomID
                                    }, function(t) {
                                        return t.room.name = e.data.updateRoom.room.name, t.room.topic = e.data.updateRoom.room.topic, t.room.isPreviewable = e.data.updateRoom.room.isPreviewable, t.room.minimumAllowedRole = e.data.updateRoom.room.minimumAllowedRole, t
                                    }), t.setState({
                                        editRoomNameError: void 0,
                                        editRoomTopicError: void 0,
                                        isSaveButtonStateSuccess: !0,
                                        isTopicFocused: !1,
                                        updatedRoomName: void 0,
                                        updatedRoomTopic: void 0,
                                        updatedPermissions: void 0
                                    })
                                }
                            })
                        }
                    }, t.openDeleteRoomModal = function() {
                        t.props.onShowModal(O, {
                            roomID: t.props.roomID,
                            roomName: t.props.data.room.name
                        })
                    }, t.onRoomTopicChange = function(e) {
                        t.updateRoomTopic(e.target.value)
                    }, t.focusTopic = function() {
                        t.setState({
                            isSaveButtonStateSuccess: !1,
                            isTopicFocused: !0
                        })
                    }, t.blurTopic = function() {
                        t.setState({
                            updatedRoomTopic: void 0,
                            editRoomTopicError: void 0,
                            isSaveButtonStateSuccess: !1,
                            isTopicFocused: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data.loading) return l.createElement(T._14, null);
                    if (this.props.data.error || !this.props.data.room) return l.createElement(T._8, null);
                    var e;
                    switch (this.state.currentView) {
                        case ne.OPTIONS:
                            e = this.getOptionsView();
                            break;
                        case ne.PERMISSIONS:
                            e = this.getPermissionsView();
                            break;
                        case ne.LABELS:
                            e = this.getLabelsView();
                            break;
                        default:
                            e = this.getOptionsView()
                    }
                    return l.createElement(T._8, null, e)
                }, t.prototype.getOptionsView = function() {
                    return this.props.sessionUser && this.props.sessionUser.id.toString() === this.props.data.room.owner.id ? this.getBroadcasterOptionsView() : this.getNonBroadcasterOptionsView()
                }, t.prototype.getBroadcasterOptionsView = function() {
                    return l.createElement(T._8, {
                        padding: {
                            y: .5
                        }
                    }, this.getEditLabelsSection(), l.createElement(T._2, null, l.createElement(T._8, {
                        display: T.R.Flex
                    }, l.createElement(T._6, {
                        alpha: !0,
                        onClick: this.setPermissionsView,
                        "data-test-selector": "permissions-toggle"
                    }, l.createElement(T._35, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        },
                        display: T.R.Flex,
                        justifyContent: T._7.Between
                    }, Object(c.d)("Permissions", "RoomDetails"), l.createElement(T._8, {
                        display: T.R.Flex
                    }, l.createElement(T.Q, {
                        color: T.K.Alt2
                    }, V.a[this.props.data.room.minimumAllowedRole]), l.createElement(T._35, {
                        className: "room-details__open-edit",
                        color: T.K.Link,
                        margin: {
                            left: .5
                        }
                    }, l.createElement(T._24, {
                        asset: T._25.GlyphArrDown,
                        height: 13
                    }))))))), l.createElement(T._6, {
                        alert: !0,
                        alpha: !0,
                        onClick: this.openDeleteRoomModal,
                        "data-test-selector": "delete-button"
                    }, l.createElement(T._35, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        }
                    }, Object(c.d)("Delete", "RoomDetails"))), l.createElement(T._8, {
                        padding: {
                            x: 1
                        }
                    }, l.createElement(T._35, {
                        borderTop: !0,
                        margin: {
                            y: .5,
                            x: .5
                        }
                    })), l.createElement(x, {
                        roomID: this.props.roomID
                    }))
                }, t.prototype.getNonBroadcasterOptionsView = function() {
                    return l.createElement(T._8, {
                        padding: {
                            y: .5
                        }
                    }, this.props.forActiveRoom && !!this.props.data.room.topic.length && l.createElement(T._8, {
                        padding: {
                            bottom: .5,
                            top: 1,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(T.Q, {
                        className: "room-details__topic-description",
                        color: T.K.Alt2
                    }, this.props.data.room.topic), l.createElement(T._35, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    })), this.props.data.room.owner.self.isChannelMember && l.createElement(x, {
                        roomID: this.props.roomID
                    }), l.createElement(B, {
                        roomID: this.props.roomID,
                        isLoggedIn: this.props.isLoggedIn,
                        login: this.props.login,
                        onShowModal: this.props.onShowModal
                    }))
                }, t.prototype.getEditLabelsSection = function() {
                    var e = Object(c.d)("Edit name or topic", "RoomDetails");
                    this.props.forActiveRoom && (e = Object(c.d)("Edit name", "RoomDetails"));
                    var t = l.createElement(T._2, null, l.createElement(T._6, {
                        alpha: !0,
                        onClick: this.setLabelsView,
                        "data-test-selector": "edit-labels"
                    }, l.createElement(T._35, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        },
                        display: T.R.Flex,
                        justifyContent: T._7.Between
                    }, e, l.createElement(T._8, {
                        display: T.R.Flex
                    }, l.createElement(T._35, {
                        className: "room-details__open-edit",
                        color: T.K.Link,
                        margin: {
                            left: .5
                        }
                    }, l.createElement(T._24, {
                        asset: T._25.GlyphArrDown,
                        height: 13
                    }))))));
                    return this.props.forActiveRoom ? l.createElement(T._8, null, l.createElement(T._8, {
                        padding: {
                            top: 1,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(T._2, {
                        position: T._15.Relative
                    }, this.getTopicField()), !this.state.isTopicHovered && l.createElement(T._35, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            top: 1
                        }
                    })), l.createElement(T._8, {
                        padding: {
                            top: .5
                        }
                    }, t)) : t
                }, t.prototype.getLabelsView = function() {
                    var e = void 0 !== this.state.updatedRoomName ? this.state.updatedRoomName : this.props.data.room.name,
                        t = void 0 !== this.state.updatedRoomTopic ? this.state.updatedRoomTopic : this.props.data.room.topic,
                        n = Object(c.d)("Edit name or topic", "RoomDetailsReturn");
                    return this.props.forActiveRoom && (n = Object(c.d)("Edit name", "RoomDetailsReturn")), l.createElement(T._8, null, l.createElement(T._2, null, l.createElement(T._8, {
                        display: T.R.Flex,
                        padding: {
                            y: .5
                        }
                    }, l.createElement(T._6, {
                        alpha: !0,
                        onClick: this.setOptionsView
                    }, l.createElement(T._35, {
                        padding: {
                            y: .5
                        },
                        margin: {
                            left: 1
                        },
                        display: T.R.Flex
                    }, l.createElement(T._35, {
                        className: "room-details__close-edit",
                        color: T.K.Link,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(T._24, {
                        asset: T._25.GlyphArrDown,
                        height: 13
                    })), n)))), l.createElement(T._8, {
                        padding: {
                            x: .5
                        }
                    }, l.createElement(T._35, {
                        borderTop: !0,
                        margin: {
                            x: 1
                        }
                    })), l.createElement(T._8, {
                        padding: {
                            x: 1,
                            y: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(P, {
                        editRoomNameError: this.state.editRoomNameError,
                        editRoomTopicError: this.props.forActiveRoom ? void 0 : this.state.editRoomTopicError,
                        roomName: e,
                        updateRoomName: this.updateRoomName,
                        roomTopic: this.props.forActiveRoom ? void 0 : t,
                        updateRoomTopic: this.updateRoomTopic
                    })), l.createElement(T._35, {
                        margin: {
                            y: 1,
                            left: 1,
                            right: 3
                        },
                        padding: {
                            left: .5,
                            right: 5
                        }
                    }, this.getSaveButton()))
                }, t.prototype.getPermissionsView = function() {
                    return l.createElement(T._8, null, l.createElement(T._2, null, l.createElement(T._8, {
                        display: T.R.Flex,
                        padding: {
                            y: .5
                        }
                    }, l.createElement(T._6, {
                        alpha: !0,
                        onClick: this.setOptionsView
                    }, l.createElement(T._35, {
                        padding: {
                            y: .5
                        },
                        margin: {
                            left: 1
                        },
                        display: T.R.Flex
                    }, l.createElement(T._35, {
                        className: "room-details__close-edit",
                        color: T.K.Link,
                        margin: {
                            right: 1
                        }
                    }, l.createElement(T._24, {
                        asset: T._25.GlyphArrDown,
                        height: 13
                    })), Object(c.d)("Permissions", "RoomDetailsReturn"))))), l.createElement(T._8, {
                        padding: {
                            x: .5
                        }
                    }, l.createElement(T._35, {
                        borderTop: !0,
                        margin: {
                            x: 1
                        }
                    })), l.createElement(W, {
                        isPreviewable: this.props.data.room.isPreviewable,
                        minimumAllowedRole: this.props.data.room.minimumAllowedRole,
                        updatePermissions: this.updatePermissions
                    }), l.createElement(T._35, {
                        margin: {
                            y: 1,
                            left: 1
                        },
                        padding: {
                            left: .5
                        }
                    }, this.getSaveButton()))
                }, t.prototype.getSaveButton = function() {
                    return l.createElement(T.v, {
                        onClick: this.saveUpdate,
                        state: this.state.isSaveButtonStateSuccess ? T.A.Success : T.A.Default,
                        type: this.state.isSaveButtonStateSuccess ? T.B.Text : T.B.Default
                    }, Object(c.d)("Save", "RoomDetails"))
                }, t.prototype.getTopicField = function() {
                    var e, t = void 0 === this.state.updatedRoomTopic ? this.props.data.room.topic : this.state.updatedRoomTopic,
                        n = Object(c.d)("What do you want your community to talk about in this room?", "RoomDetails");
                    return e = this.state.isTopicFocused ? l.createElement(T._46, {
                        autoFocus: !0,
                        noResize: !0,
                        onChange: this.onRoomTopicChange,
                        value: t,
                        placeholder: n
                    }) : l.createElement(T.Q, {
                        className: "room-details__topic-description",
                        color: T.K.Alt2,
                        italic: !t
                    }, t || n, l.createElement(T.O, {
                        onClick: this.focusTopic
                    }, l.createElement(T._8, {
                        padding: {
                            left: .5
                        },
                        className: "room-details__edit-topic"
                    }, Object(c.d)("Edit", "RoomDetails")))), l.createElement("div", null, e, this.state.editRoomTopicError && l.createElement(T.Q, {
                        color: T.K.Error
                    }, this.state.editRoomTopicError), this.state.isTopicFocused && l.createElement(T._8, {
                        display: T.R.Flex,
                        justifyContent: T._7.End
                    }, !this.state.isSaveButtonStateSuccess && l.createElement(T._8, {
                        padding: {
                            top: .5
                        }
                    }, l.createElement(T.v, {
                        onClick: this.blurTopic,
                        type: T.B.Text
                    }, Object(c.d)("Cancel", "RoomDetails"))), l.createElement(T._8, {
                        padding: {
                            top: .5,
                            left: 1
                        }
                    }, this.getSaveButton())))
                }, t = s.__decorate([Object(m.a)(ee, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                }), Object(m.a)(te, {
                    name: "updateRoom"
                })], t)
            }(l.Component);
        var ae = Object(i.b)(function(e) {
            return {
                sessionUser: Object(r.c)(e),
                isLoggedIn: Object(r.d)(e)
            }
        }, function(e) {
            return Object(a.b)({
                login: function() {
                    return Object(S.f)(_.a.ReportChannel)
                },
                onShowModal: C.d
            }, e)
        })(ie);

        function re(e, t) {
            return e.minimumAllowedRole === V.b.Everyone ? T._25.Hash : t ? T._25.Unlock : T._25.Lock
        }
        var oe, se = n("P7hg"),
            le = (n("Dr46"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data.loading) return l.createElement(T.Q, {
                        color: T.K.Alt,
                        "data-test-selector": "placeholder-text"
                    }, this.props.roomName);
                    if (this.props.data.error) return l.createElement(T._8, null);
                    var e = {
                        isPreviewable: this.props.data.room.isPreviewable,
                        minimumAllowedRole: this.props.data.room.minimumAllowedRole
                    };
                    return l.createElement(y.a, null, l.createElement("div", null, l.createElement(T._35, {
                        display: T.R.Flex,
                        alignItems: T.c.Center,
                        className: "active-room-button"
                    }, l.createElement(T._8, {
                        className: "active-room-button__states",
                        display: T.R.Flex
                    }, l.createElement(T._24, {
                        height: 14,
                        asset: re(e, this.props.data.room.self.permissions.sendMessages)
                    })), l.createElement(T.Q, {
                        color: T.K.Alt
                    }, this.props.data.room.name), l.createElement(T._8, {
                        className: "room-details__close-edit active-room-button__cch-dropdown"
                    }, l.createElement(T._24, {
                        asset: T._25.AngleRight,
                        type: T._26.Alt,
                        height: 11
                    })))), l.createElement(T.q, {
                        direction: T.r.BottomLeft,
                        size: T.s.Medium
                    }, l.createElement(ae, {
                        forActiveRoom: !0,
                        roomID: this.props.roomID
                    })))
                }, t = s.__decorate([Object(k.d)("ActiveRoomButton"), Object(m.a)(se, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    }
                })], t)
            }(l.Component)),
            de = n("Bh5x");
        n("4Xyl");
        ! function(e) {
            e[e.BadPermissions = 0] = "BadPermissions", e[e.Banned = 1] = "Banned", e[e.Deleted = 2] = "Deleted", e[e.NoPreview = 3] = "NoPreview"
        }(oe || (oe = {}));
        var ce, ue = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && this.props.data.loading ? l.createElement(T._14, {
                        lineCount: 4,
                        width: 160
                    }) : this.props.data && this.props.data.error ? l.createElement(T._8, null) : l.createElement(T._35, {
                        borderLeft: !0,
                        fullHeight: !0,
                        fullWidth: !0,
                        className: "invalid-room-view"
                    }, l.createElement(T._8, {
                        display: T.R.Flex,
                        justifyContent: T._7.Center,
                        padding: 1
                    }, l.createElement("img", {
                        src: "https://static-cdn.jtvnw.net/emoticons/v1/86/3.0",
                        width: "54",
                        height: "45"
                    })), this.getCopy(), l.createElement(T._8, {
                        textAlign: T._45.Center,
                        padding: {
                            y: 3,
                            x: 2
                        }
                    }, l.createElement(T.v, {
                        type: T.B.Hollow,
                        onClick: this.props.handleStreamChatClick
                    }, Object(c.d)("Back to Stream Chat", "InvalidRoomView"))))
                }, t.prototype.getCopy = function() {
                    var e = null,
                        t = Object(c.d)("You don't have to go home, but you can't stay here. This room has been deleted.", "InvalidRoomView"),
                        n = Object(c.d)("The broadcaster's settings mean you can't participate in this room.", "InvalidRoomView");
                    switch (this.props.type) {
                        case oe.Deleted:
                            e = l.createElement(T.Q, null, t);
                            break;
                        case oe.BadPermissions:
                            e = l.createElement(T.Q, null, n);
                            break;
                        case oe.Banned:
                            e = l.createElement(T.Q, null, Object(c.d)("You are banned and can't rejoin Rooms", "InvalidRoomView"));
                            break;
                        case oe.NoPreview:
                            var i = this.props.data.room.owner.displayName,
                                a = this.props.data.room.name,
                                r = Object(c.d)("You are viewing {displayName}’s #{roomName}. Chat participation is restricted to channel subscribers to chat or preview.", {
                                    displayName: i,
                                    roomName: a
                                }, "InvalidRoomView");
                            e = l.createElement(T.Q, null, r);
                            break;
                        default:
                            e = l.createElement(T.Q, null, n)
                    }
                    return l.createElement(T._8, {
                        textAlign: T._45.Center
                    }, l.createElement(T._8, {
                        padding: {
                            y: 1,
                            x: 2
                        }
                    }, e))
                }, t = s.__decorate([Object(m.a)(de, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    },
                    skip: function(e) {
                        return e.type !== oe.NoPreview
                    }
                }), Object(k.d)("InvalidRoomView")], t)
            }(l.Component),
            me = n("QKs+"),
            pe = n("ass3"),
            he = n("uekS");
        ! function(e) {
            e[e.RoomMessageEvent = 0] = "RoomMessageEvent", e[e.ModerationEvent = 1] = "ModerationEvent", e[e.SystemMessageEvent = 2] = "SystemMessageEvent", e[e.DeletedMessageEvent = 3] = "DeletedMessageEvent"
        }(ce || (ce = {}));
        var ge = n("X7fs"),
            fe = n("INp2");

        function ve(e) {
            return s.__assign({}, e, {
                kind: ce.RoomMessageEvent
            })
        }

        function be(e) {
            return {
                kind: ce.SystemMessageEvent,
                id: Object(fe.a)("roomSystemMessage"),
                text: e
            }
        }
        var ke = 900,
            ye = 300,
            _e = 100,
            Ce = function() {
                function e(e, t, n, i, a, r) {
                    void 0 === a && (a = ye), void 0 === r && (r = ke);
                    var o = this;
                    this.roomID = e, this.channelID = t, this.onBufferUpdate = n, this.onInitialLoad = i, this.maxVisibleSize = a, this.maxBufferSize = r, this.consumeRoomEvent = function(e, t, n) {
                        if (o.processRoomEvent(e)) {
                            var i = !n && o.offset + o.maxVisibleSize === o.buffer.length,
                                a = !n && o.offset + o.maxVisibleSize >= o.buffer.length;
                            if (o.buffer.length >= o.maxBufferSize && i) {
                                var r = o.buffer.shift();
                                o.eventMap.delete(r.id), o._hasOlderLeft = !0, i = !1, o.oldestCursor = void 0;
                                for (var s = 0, l = o.buffer; s < l.length; s++) {
                                    var d = l[s];
                                    if (d && o.eventMap.get(d.id)) {
                                        o.oldestCursor = o.eventMap.get(d.id);
                                        break
                                    }
                                }
                            }
                            o.buffer.length < o.maxBufferSize && (o.addRoomEventToBuffer(e, t, n), o._isBulkLoad = !1, a && (i && (o.offset = o.offset + 1), o._isDirty = !0, o.onBufferUpdate()))
                        }
                    }, this.loadNewest = function() {
                        o._hasNewerLeft ? o.resetBufferState() : o.offset = Math.max(o.buffer.length - o.maxVisibleSize, 0), o._isDirty = !0, o.onBufferUpdate()
                    }, this.loadOlder = function() {
                        return s.__awaiter(o, void 0, void 0, function() {
                            return s.__generator(this, function(e) {
                                return this.offset > 0 ? (this.offset = Math.max(this.offset - _e, 0), this._isBulkLoad = !0, this._isDirty = !0, this.onBufferUpdate(), [2]) : [2, this.loadMore(!0)]
                            })
                        })
                    }, this.loadNewer = function() {
                        return s.__awaiter(o, void 0, void 0, function() {
                            return s.__generator(this, function(e) {
                                if (this.newestCursor) {
                                    if (this.offset + this.maxVisibleSize < this.buffer.length) return this.offset = Math.min(this.offset + _e, this.buffer.length - this.maxVisibleSize), this._isBulkLoad = !0, this._isDirty = !0, this.onBufferUpdate(), [2];
                                    if (this._hasNewerLeft) return [2, this.loadMore(!1)]
                                }
                                return [2]
                            })
                        })
                    }, this.resetBufferState = function() {
                        o.buffer = [], o.eventMap = new Map, o.offset = 0, o._isDirty = !1, o._hasNewerLeft = !0, o._hasOlderLeft = !0, o.newestCursor = void 0, o.oldestCursor = void 0
                    }, this.loadMore = function(e) {
                        return Object(he.d)(Object(he.c)(c.o.apollo.client.link, {
                            query: ge,
                            variables: {
                                roomID: o.roomID,
                                channelID: o.channelID,
                                last: e ? _e : void 0,
                                before: e ? o.oldestCursor : void 0,
                                first: e ? void 0 : _e,
                                after: e ? void 0 : o.newestCursor
                            }
                        })).then(function(t) {
                            if (t.data && t.data.room.messages) {
                                var n = !1;
                                if (t.data.room.messages.edges.forEach(function(t) {
                                        if (!o.eventMap.has(t.node.id)) {
                                            var i = ve(t.node),
                                                a = o.processRoomEvent(i);
                                            a && (n = !0, o.addRoomEventToBuffer(a, t.cursor, e), o._isBulkLoad = !0)
                                        }
                                    }), e && o._hasOlderLeft && t.data.room.messages.edges.length < _e && (o._hasOlderLeft = !1, n = !0), !e && o._hasNewerLeft && t.data.room.messages.edges.length < _e && (o._hasNewerLeft = !1, n = !0), o.buffer.length > o.maxBufferSize) {
                                    if (e) {
                                        for (var i = 0, a = o.buffer.splice(o.maxBufferSize, o.buffer.length - o.maxBufferSize); i < a.length; i++) {
                                            l = a[i];
                                            o.eventMap.delete(l.id)
                                        }
                                        o._hasNewerLeft = !0, o.newestCursor = void 0;
                                        for (l = 0; l < o.buffer.length; l++) {
                                            if ((u = o.buffer[o.buffer.length - l - 1]) && o.eventMap.get(u.id)) {
                                                o.newestCursor = o.eventMap.get(u.id);
                                                break
                                            }
                                        }
                                    } else {
                                        for (var r = 0, s = o.buffer.splice(0, o.buffer.length - o.maxBufferSize); r < s.length; r++) {
                                            var l = s[r];
                                            o.eventMap.delete(l.id)
                                        }
                                        o._hasOlderLeft = !0, o.oldestCursor = void 0;
                                        for (var d = 0, c = o.buffer; d < c.length; d++) {
                                            var u;
                                            if ((u = c[d]) && o.eventMap.get(u.id)) {
                                                o.oldestCursor = o.eventMap.get(u.id);
                                                break
                                            }
                                        }
                                    }
                                }
                                n && (e || (o.offset = Math.max(o.buffer.length - o.maxVisibleSize, 0)), o._isDirty = !0, o.onBufferUpdate())
                            }
                            o._loadedOnce || (o._loadedOnce = !0, o.onInitialLoad())
                        })
                    }, this.addRoomEventToBuffer = function(e, t, n) {
                        t || (t = n ? o.oldestCursor : o.newestCursor), o.eventMap.has(e.id) || (n ? (o.oldestCursor = t, o.buffer.unshift(e)) : (o.newestCursor = t, o.buffer.push(e)), o.oldestCursor = o.oldestCursor || o.newestCursor, o.newestCursor = o.newestCursor || o.oldestCursor), o.eventMap.set(e.id, t || null)
                    }, this.processRoomEvent = function(e) {
                        switch (e.kind) {
                            case ce.ModerationEvent:
                                for (var t = new Date(e.purgeAfter), n = 0; n < o.buffer.length; n++) {
                                    var i = o.buffer[n];
                                    i.kind === ce.RoomMessageEvent && i.sender.id === e.userID && t <= new Date(i.sentAt) && (o.buffer[n] = s.__assign({}, i, {
                                        deletedAt: (new Date).toISOString()
                                    }), o._isDirty = !0, o.onBufferUpdate())
                                }
                                return null;
                            case ce.DeletedMessageEvent:
                                var a = o.buffer.findIndex(function(t) {
                                    return t.kind === ce.RoomMessageEvent && t.id === e.id
                                });
                                return a && (o.buffer[a] = s.__assign({}, o.buffer[a], {
                                    deletedAt: (new Date).toISOString()
                                }), o._isDirty = !0, o.onBufferUpdate()), null;
                            case ce.RoomMessageEvent:
                                return e.sender.id && o.blockedUsers.has(e.sender.id) ? null : e;
                            case ce.SystemMessageEvent:
                                return e;
                            default:
                                return null
                        }
                    }, this.resetBufferState(), this._loadedOnce = !1, this.blockedUsers = new Set
                }
                return e.prototype.toArray = function() {
                    this._isDirty = !1;
                    var e = Math.min(this.offset + this.maxVisibleSize, this.buffer.length);
                    return this.buffer.slice(this.offset, e)
                }, Object.defineProperty(e.prototype, "length", {
                    get: function() {
                        return this.buffer.length
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "isDirty", {
                    get: function() {
                        return this._isDirty
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "isBulkLoad", {
                    get: function() {
                        return this._isBulkLoad
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "hasNewerLeft", {
                    get: function() {
                        return !!this.newestCursor && (this._hasNewerLeft || this.offset + this.maxVisibleSize < this.buffer.length)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "hasOlderLeft", {
                    get: function() {
                        return this._hasOlderLeft || this.offset > 0
                    },
                    enumerable: !0,
                    configurable: !0
                }), e.prototype.setBlockedUsers = function(e) {
                    this.blockedUsers = new Set(e)
                }, e
            }(),
            Se = n("mwvJ"),
            Ee = n("3KVC"),
            Ne = {
                EMOTE: "Emote",
                MENTION: "User"
            },
            Te = "/me ";
        var we = function() {
                return function(e, t, n) {
                    var i = this;
                    this.roomID = e, this.channelID = t, this.consumeRoomEvent = n, this.unsubscribe = function() {
                        i.unsubscribeChatRoomTopic && i.unsubscribeChatRoomTopic(), i.unsubscribeChatRoomsChanneTopic && i.unsubscribeChatRoomsChanneTopic()
                    }, this.unsubscribeChatRoomTopic = c.k.subscribe({
                        topic: Object(g.e)(this.roomID),
                        onMessage: function(e) {
                            var t, n, a, r, o, s = (t = e.data, n = t.message, a = t.cursor, r = n.content.fragments.map(function(e) {
                                var t = {
                                        text: e.text,
                                        content: null,
                                        __typename: "RoomMessageFragment"
                                    },
                                    n = e.emoticon,
                                    i = e.mention,
                                    a = e.text;
                                return n && (t.content = {
                                    emoteID: n.id,
                                    setID: n.set_id,
                                    token: a,
                                    __typename: Ne.EMOTE
                                }), i && (t.content = {
                                    id: i.user_id,
                                    login: i.login,
                                    displayName: i.display_name,
                                    __typename: Ne.MENTION
                                }), t
                            }), o = n.sender.badges.map(function(e) {
                                return {
                                    setID: e.id,
                                    version: e.version,
                                    __typename: "Badge"
                                }
                            }), {
                                cursor: "" + a,
                                node: {
                                    id: n.id,
                                    deletedAt: null,
                                    sentAt: n.sent_at,
                                    content: {
                                        text: n.content.text,
                                        fragments: r,
                                        __typename: "RoomMessageContent"
                                    },
                                    sender: {
                                        id: n.sender.user_id,
                                        login: n.sender.login,
                                        chatColor: n.sender.chat_color,
                                        displayName: n.sender.display_name,
                                        displayBadges: o,
                                        __typename: "User"
                                    },
                                    __typename: "RoomMessage"
                                },
                                __typename: "RoomMessageEdge"
                            });
                            switch (e.type) {
                                case h.PubsubMessageType.ChatRoomMessageCreated:
                                    i.consumeRoomEvent(ve(s.node), s.cursor);
                                    break;
                                case h.PubsubMessageType.ChatRoomMessageDeleted:
                                    i.consumeRoomEvent(function(e) {
                                        return {
                                            kind: ce.DeletedMessageEvent,
                                            id: e.id
                                        }
                                    }(s.node))
                            }
                        }
                    }), this.unsubscribeChatRoomsChanneTopic = c.k.subscribe({
                        topic: Object(g.f)(this.channelID),
                        onMessage: function(e) {
                            switch (e.type) {
                                case h.PubsubMessageType.PurgeMessageRequest:
                                    var t = e;
                                    i.consumeRoomEvent((n = t.data.channel_id, a = t.data.user_id, r = t.data.purge_after, {
                                        kind: ce.ModerationEvent,
                                        id: Object(fe.a)(a + "-moderation-event"),
                                        channelID: n,
                                        userID: a,
                                        purgeAfter: r
                                    }))
                            }
                            var n, a, r
                        }
                    })
                }
            }(),
            De = n("Ldv2"),
            Re = n("3T7g"),
            Oe = n("bkpq"),
            Ie = n("1F7R"),
            Me = n("1OO3"),
            xe = n("KBUQ"),
            je = n("O0Qc"),
            Le = n("JtUK"),
            Ae = n("Kthq"),
            Fe = 600,
            Ue = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.banUser = function(e) {
                        var n = Object(je.n)("/ban " + e);
                        if (n && !n.duration) {
                            var i = n.bannedUserLogin;
                            return i ? {
                                deferred: t.props.banUserMutation(i).then(function(e) {
                                    var t = e.banUserFromChatRoom;
                                    return t.error ? {
                                        notice: Object(Le.a)(i, t.error.code)
                                    } : {
                                        notice: Object(c.d)("{userLogin} is now banned from this channel.", {
                                            userLogin: i
                                        }, "BanCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: Object(c.d)("Unable to ban user.", "BanCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(c.d)("Please specify a user to ban.", "BanCommandHandler")
                                })
                            }
                        }
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Usage: /ban [login]", "BanCommandHandler")
                            })
                        }
                    }, t.unbanUser = function(e) {
                        return e ? {
                            deferred: t.props.unbanUserMutation(e).then(function(t) {
                                var n = t.unbanUserFromChatRoom;
                                return n.error ? {
                                    notice: Object(Ae.a)(e, n.error.code)
                                } : {
                                    notice: Object(c.d)("{bannedUserLogin} is no longer banned from this channel.", {
                                        bannedUserLogin: e
                                    }, "BanCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unban user.", "BanCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Please specify a user to unban.", "BanCommandHandler")
                            })
                        }
                    }, t.timeoutUser = function(e) {
                        var n = Object(je.n)("/ban " + e);
                        if (n) {
                            var i = n.bannedUserLogin,
                                a = n.duration || Fe;
                            return i ? {
                                deferred: t.props.banUserMutation(i, a).then(function(e) {
                                    var t = e.banUserFromChatRoom;
                                    return t.error ? {
                                        notice: Object(Le.a)(i, t.error.code, !0)
                                    } : {
                                        notice: Object(c.d)("{userLogin} has been timed out for {duration} seconds.", {
                                            userLogin: i,
                                            duration: a
                                        }, "BanCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: Object(c.d)("Unable to timeout user.", "BanCommandHandler")
                                    }
                                })
                            } : {
                                deferred: Promise.resolve({
                                    notice: Object(c.d)("Please specify a user to timeout.", "BanCommandHandler")
                                })
                            }
                        }
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Usage: /timeout [login] [duration in seconds]", "BanCommandHandler")
                            })
                        }
                    }, t.untimeoutUser = function(e) {
                        return e ? {
                            deferred: t.props.unbanUserMutation(e).then(function(t) {
                                var n = t.unbanUserFromChatRoom;
                                return n.error ? {
                                    notice: Object(Ae.a)(e, n.error.code, !0)
                                } : {
                                    notice: Object(c.d)("{login} is no longer timed out in this channel.", {
                                        login: e
                                    }, "BanCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to untimeout user.", "BanCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Please specify a user to untimeout.", "BanCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(T._8, {
                        display: T.R.Hide
                    }, l.createElement(Ie.a, {
                        command: "ban",
                        handler: this.banUser
                    }), l.createElement(Ie.a, {
                        command: "unban",
                        handler: this.unbanUser
                    }), l.createElement(Ie.a, {
                        command: "timeout",
                        handler: this.timeoutUser
                    }), l.createElement(Ie.a, {
                        command: "untimeout",
                        handler: this.untimeoutUser
                    }))
                }, t
            }(l.Component),
            Be = function(e) {
                return {
                    channelID: e.channelID
                }
            },
            Pe = Object(d.compose)(Object(xe.b)(Be), Object(Me.b)(Be))(Ue),
            Ve = n("XdSf"),
            We = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.updateChatColor = function(e) {
                        var n = Object(je.o)("/color " + e);
                        if (n && n.color) {
                            var i = n.color;
                            return {
                                deferred: t.props.updateChatColorMutation(i).then(function() {
                                    return {
                                        notice: Object(c.d)("Your color has been changed.", "ColorCommandHandler")
                                    }
                                }).catch(function() {
                                    return {
                                        notice: Object(c.d)("Unable to change your color.", "ColorCommandHandler")
                                    }
                                })
                            }
                        }
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/color [color]" - Change your username color. Color must be in hex (#000000) or one of the following: Blue, BlueViolet, CadetBlue, Chocolate, Coral, DodgerBlue, Firebrick, GoldenRod, Green, HotPink, OrangeRed, Red, SeaGreen, SpringGreen, YellowGreen.', "ColorCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(T._8, {
                        display: T.R.Hide
                    }, l.createElement(Ie.a, {
                        command: "color",
                        handler: this.updateChatColor
                    }))
                }, t
            }(l.Component),
            He = Object(Ve.a)()(We),
            Ge = n("TCxx"),
            ze = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setEmoteOnlyMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/emoteonly" - Enables emote-only mode (only emoticons may be used in chat). Use "emoteonlyoff" to disable.', "EmoteOnlyCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableEmotesOnlyMode: !0
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("emote-only mode has been enabled for this room.", "EmoteOnlyCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to set emote-only mode.", "EmoteOnlyCommandHandler")
                                }
                            })
                        }
                    }, t.unsetEmoteOnlyMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/emoteonlyoff" - Disables emote-only mode.', "EmoteOnlyCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableEmotesOnlyMode: !1
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("emote-only mode has been disabled for this room.", "EmoteOnlyCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unset emote-only mode.", "EmoteOnlyCommandHandler")
                                }
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(T._8, {
                        display: T.R.Hide
                    }, l.createElement(Ie.a, {
                        command: "emoteonly",
                        handler: this.setEmoteOnlyMode
                    }), l.createElement(Ie.a, {
                        command: "emoteonlyoff",
                        handler: this.unsetEmoteOnlyMode
                    }))
                }, t
            }(l.Component),
            qe = Object(m.a)(Ge, {
                name: "updateRoomModes"
            })(ze),
            Qe = n("R9op"),
            Ke = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.showHelp = function(e) {
                        var n = t.props.chatCommands.sort().map(function(e) {
                            return "/" + e
                        });
                        return {
                            deferred: Promise.resolve({
                                notice: Object(c.d)("Available commands: {commands}.", {
                                    commands: n.join(", ")
                                }, "HelpCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(T._8, {
                        display: T.R.Hide
                    }, l.createElement(Ie.a, {
                        command: "help",
                        handler: this.showHelp
                    }))
                }, t
            }(l.Component);
        var $e, Ye = Object(i.b)(function(e) {
                return {
                    chatCommands: Object(Qe.b)(e)
                }
            })(Ke),
            Je = n("uLsu"),
            Ze = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.sendMessage = function(e) {
                        return t.props.sendMessage("/me " + e), {}
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(T._8, {
                        display: T.R.Hide
                    }, l.createElement(Ie.a, {
                        command: "me",
                        handler: this.sendMessage
                    }))
                }, t
            }(l.Component),
            Xe = n("EsrG");
        ! function(e) {
            e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserAlreadyModded = "TARGET_ALREADY_MOD", e.UserBanned = "TARGET_IS_CHAT_BANNED", e.UserNotFound = "TARGET_NOT_FOUND"
        }($e || ($e = {}));
        var et, tt = n("Ta4Q");
        ! function(e) {
            e.ChannelNotFound = "CHANNEL_NOT_FOUND", e.Forbidden = "FORBIDDEN", e.UserNotFound = "TARGET_NOT_FOUND", e.UserNotMod = "TARGET_NOT_MOD"
        }(et || (et = {}));
        var nt = n("zLjL"),
            it = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.modUser = function(e) {
                        var n = e.trim().split(/\s+/),
                            i = n[0];
                        return 1 === n.length && i && 0 !== i.length ? {
                            deferred: t.props.modUserMutation(i).then(function(e) {
                                if (e.modUser.error) switch (e.modUser.error.code) {
                                    case $e.Forbidden:
                                        return {
                                            notice: rt()
                                        };
                                    case $e.UserAlreadyModded:
                                        return {
                                            notice: Object(c.d)("{login} is already a moderator of this channel.", {
                                                login: i
                                            }, "ModCommandHandler")
                                        };
                                    case $e.UserBanned:
                                        return {
                                            notice: Object(c.d)("{login} is banned in this channel. You must unban this user before granting mod status.", {
                                                login: i
                                            }, "ModCommandHandler")
                                        };
                                    case $e.UserNotFound:
                                        return {
                                            notice: at(i)
                                        };
                                    default:
                                        return {
                                            notice: ot()
                                        }
                                }
                                return {
                                    notice: Object(c.d)("You have added {login} as a moderator of this channel.", {
                                        login: i
                                    }, "ModCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: ot()
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/mod [login]" - Grant mod status to a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                            })
                        }
                    }, t.mods = function(e) {
                        return {
                            deferred: c.o.apollo.client.query({
                                query: nt,
                                fetchPolicy: "network-only",
                                variables: {
                                    id: t.props.channelID
                                }
                            }).then(function(e) {
                                if (!e.data.user) return {
                                    notice: st()
                                };
                                if (0 === e.data.user.mods.edges.length) return {
                                    notice: Object(c.d)("There are no moderators of this channel.", "ModCommandHandler")
                                };
                                var t = e.data.user.mods.edges.map(function(e) {
                                    return e.node.login
                                }).join(", ");
                                return {
                                    notice: Object(c.d)("The moderators of this channel are: {mods}.", {
                                        mods: t
                                    }, "ModCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: st()
                                }
                            })
                        }
                    }, t.unmodUser = function(e) {
                        var n = e.trim().split(/\s+/),
                            i = n[0];
                        return 1 === n.length && i && 0 !== i.length ? {
                            deferred: t.props.unmodUserMutation(i).then(function(e) {
                                if (e.unmodUser.error) switch (e.unmodUser.error.code) {
                                    case et.Forbidden:
                                        return {
                                            notice: rt()
                                        };
                                    case et.UserNotFound:
                                        return {
                                            notice: at(i)
                                        };
                                    case et.UserNotMod:
                                        return {
                                            notice: Object(c.d)("{login} is currently not a moderator of this channel.", {
                                                login: i
                                            }, "ModCommandHandler")
                                        };
                                    default:
                                        return {
                                            notice: lt()
                                        }
                                }
                                return {
                                    notice: Object(c.d)("You have removed {login} as a moderator of this channel.", {
                                        login: i
                                    }, "ModCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: lt()
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/unmod [login]" - Revoke mod status from a user. Use "mods" to list the moderators of this channel.', "ModCommandHandler")
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(T._8, {
                        display: T.R.Hide
                    }, l.createElement(Ie.a, {
                        command: "mod",
                        handler: this.modUser
                    }), l.createElement(Ie.a, {
                        command: "mods",
                        handler: this.mods
                    }), l.createElement(Ie.a, {
                        command: "unmod",
                        handler: this.unmodUser
                    }))
                }, t
            }(l.Component);

        function at(e) {
            return Object(c.d)("Invalid username: {login}", {
                login: e
            }, "ModCommandHandler")
        }

        function rt() {
            return Object(c.d)("You don't have permission to perform that action.", "ModCommandHandler")
        }

        function ot() {
            return Object(c.d)("Unable to add moderator.", "ModCommandHandler")
        }

        function st() {
            return Object(c.d)("There was a problem fetching the list of mods.", "ModCommandHandler")
        }

        function lt() {
            return Object(c.d)("Unable to remove moderator.", "ModCommandHandler")
        }
        var dt, ct = function(e) {
                return {
                    channelID: e.channelID
                }
            },
            ut = Object(d.compose)(function(e) {
                var t = this;
                return Object(m.a)(tt, {
                    props: function(n) {
                        return {
                            unmodUserMutation: function(i) {
                                return s.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return s.__generator(this, function(a) {
                                        if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                            variables: {
                                                input: {
                                                    channelID: t,
                                                    targetLogin: i
                                                }
                                            }
                                        }).then(function(e) {
                                            return e.data
                                        })];
                                        throw new Error("unmodUser mutation is not ready")
                                    })
                                })
                            }
                        }
                    }
                })
            }(ct), function(e) {
                var t = this;
                return Object(m.a)(Xe, {
                    props: function(n) {
                        return {
                            modUserMutation: function(i) {
                                return s.__awaiter(t, void 0, void 0, function() {
                                    var t;
                                    return s.__generator(this, function(a) {
                                        if (t = e(n.ownProps).channelID, n.mutate) return [2, n.mutate({
                                            variables: {
                                                input: {
                                                    channelID: t,
                                                    targetLogin: i
                                                }
                                            }
                                        }).then(function(e) {
                                            return e.data
                                        })];
                                        throw new Error("modUser mutation is not ready")
                                    })
                                })
                            }
                        }
                    }
                })
            }(ct))(it),
            mt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setR9kMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/r9k" - Enables r9k mode. See http://link.twitch.tv/r9k for details. Use "r9koff" to disable.', "R9kCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableR9KMode: !0
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("r9k mode has been enabled for this room.", "R9kCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to set r9k mode.", "R9kCommandHandler")
                                }
                            })
                        }
                    }, t.unsetR9kMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/r9koff" - Disables r9k mode.', "R9kCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableR9KMode: !1
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("r9k mode has been disabled for this room.", "R9kCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unset r9k mode.", "R9kCommandHandler")
                                }
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(T._8, {
                        display: T.R.Hide
                    }, l.createElement(Ie.a, {
                        command: "r9k",
                        handler: this.setR9kMode
                    }), l.createElement(Ie.a, {
                        command: "r9koff",
                        handler: this.unsetR9kMode
                    }))
                }, t
            }(l.Component),
            pt = Object(m.a)(Ge, {
                name: "updateRoomModes"
            })(mt),
            ht = 120,
            gt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setSlowMode = function(e) {
                        var n = Object(je.p)("/slow " + e);
                        return n ? {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableSlowMode: !0,
                                        slowModeDurationSeconds: n.duration || ht
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                                        length: n.duration || ht
                                    }, "SlowCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to set slow mode.", "SlowCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/slow [duration]" - Enables slow mode (limit how often users may send messages). Duration (optional, default=120) must be a positive number of seconds. Use "slowoff" to disable.', "SlowCommandHandler")
                            })
                        }
                    }, t.unsetSlowMode = function(e) {
                        return e && e.trim().length > 0 ? {
                            deferred: Promise.resolve({
                                notice: Object(c.d)('Usage: "/slowoff" - Disables slow mode.', "SlowCommandHandler")
                            })
                        } : {
                            deferred: t.props.updateRoomModes({
                                variables: {
                                    input: {
                                        roomID: t.props.roomID,
                                        enableSlowMode: !1
                                    }
                                }
                            }).then(function() {
                                return {
                                    notice: Object(c.d)("This room is no longer in slow mode.", "SlowCommandHandler")
                                }
                            }).catch(function() {
                                return {
                                    notice: Object(c.d)("Unable to unset slow mode.", "SlowCommandHandler")
                                }
                            })
                        }
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(T._8, {
                        display: T.R.Hide
                    }, l.createElement(Ie.a, {
                        command: "slow",
                        handler: this.setSlowMode
                    }), l.createElement(Ie.a, {
                        command: "slowoff",
                        handler: this.unsetSlowMode
                    }))
                }, t
            }(l.Component),
            ft = Object(m.a)(Ge, {
                name: "updateRoomModes"
            })(gt),
            vt = n("+WrY"),
            bt = n("BMQ2"),
            kt = n("ZiSq"),
            yt = n("QCOJ"),
            _t = n("hcyD"),
            Ct = n("VB5+"),
            St = n("QFW6"),
            Et = function() {
                var e = Array.from(Array(21).keys()).map(function(e) {
                    return Nt(e)
                });
                return l.createElement(T._8, {
                    className: "fake-room-list",
                    display: T.R.Flex,
                    flexDirection: T.T.Column,
                    flexWrap: T.U.NoWrap,
                    overflow: T._11.Hidden,
                    flexGrow: 1
                }, l.createElement(T._8, {
                    className: "fake-room-list__lines"
                }, e))
            },
            Nt = function(e) {
                return l.createElement(T._8, {
                    padding: {
                        x: 2,
                        y: .5
                    },
                    key: e
                }, l.createElement(T._2, {
                    display: T.R.InlineBlock,
                    margin: {
                        right: 1
                    }
                }, l.createElement(T.Q, {
                    type: T._49.Span
                }, l.createElement(T._14, {
                    width: 70
                }))), l.createElement(T._2, {
                    display: T.R.InlineBlock
                }, l.createElement(T.Q, {
                    type: T._49.Span
                }, l.createElement(T._14, {
                    width: 50 + 89 * e % 151
                }))))
            },
            Tt = n("zCIC"),
            wt = n("O9wU"),
            Dt = (n("UiRd"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        var n = e.currentTarget.getAttribute("data-username");
                        n && t.props.onUsernameClick(n, wt.a.member_list, "", e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props,
                        n = t.viewers,
                        i = t.header,
                        a = n.map(function(t) {
                            return l.createElement("div", {
                                key: "member-list-group-item-" + t
                            }, l.createElement("button", {
                                className: "member-list-group__button",
                                "data-username": t,
                                onClick: e.usernameClickHandler
                            }, l.createElement(T.Q, {
                                transform: T._48.Capitalize
                            }, t)))
                        });
                    return l.createElement(T._8, {
                        className: "member-list-group",
                        padding: {
                            bottom: 2
                        }
                    }, l.createElement(T.Q, {
                        transform: T._48.Uppercase
                    }, i), a)
                }, t
            }(l.Component)),
            Rt = n("GS+L");
        n("Vvm+");
        ! function(e) {
            e.Admin = "ADMIN", e.GlobalMod = "GLOBALMOD", e.Moderator = "MOD", e.Broadcaster = "BROADCASTER", e.Staff = "STAFF", e.Regular = "REGULAR"
        }(dt || (dt = {}));
        var Ot = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {}, t
            }
            return s.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = this.props.data.loading && l.createElement(T._10, {
                    fillContent: !0
                });
                return l.createElement(T._8, {
                    className: "member-list",
                    fullWidth: !0,
                    fullHeight: !0,
                    flexShrink: 0,
                    zIndex: T._62.Default
                }, l.createElement(T._8, {
                    className: "member-list__pane",
                    display: T.R.Flex,
                    flexDirection: T.T.Column,
                    flexWrap: T.U.NoWrap,
                    position: T._15.Absolute,
                    attachBottom: !0,
                    attachLeft: !0,
                    attachRight: !0
                }, l.createElement(T._8, {
                    className: "member-list__header",
                    display: T.R.Flex,
                    justifyContent: T._7.Center,
                    alignItems: T.c.Center,
                    padding: {
                        y: 1
                    },
                    margin: {
                        bottom: 2
                    },
                    flexShrink: 0
                }, l.createElement(T._8, {
                    position: T._15.Absolute,
                    attachLeft: !0,
                    margin: {
                        left: 1
                    }
                }, l.createElement(T.w, {
                    icon: T._25.Close,
                    ariaLabel: Object(c.d)("Close", "MemberList"),
                    onClick: this.props.closeMemberList,
                    "data-test-selector": "member-list-close-button"
                })), l.createElement(T.Q, null, Object(c.d)("Member List", "MemberList"))), this.renderMembers(), e))
            }, t.prototype.renderMembers = function() {
                if (this.props.data.loading || this.props.data.error) return null;
                var e = [],
                    t = this.props.data.room.members.edges,
                    n = this.props.onUsernameClick,
                    i = {
                        broadcaster: t.filter(function(e) {
                            return e.type === dt.Broadcaster
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        staff: t.filter(function(e) {
                            return e.type === dt.Staff
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        admin: t.filter(function(e) {
                            return e.type === dt.Admin
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        globalMod: t.filter(function(e) {
                            return e.type === dt.GlobalMod
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        moderator: t.filter(function(e) {
                            return e.type === dt.Moderator
                        }).map(function(e) {
                            return e.node.displayName
                        }),
                        member: t.filter(function(e) {
                            return e.type === dt.Regular
                        }).map(function(e) {
                            return e.node.displayName
                        })
                    };
                return i.broadcaster.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-broadcaster",
                    header: Object(c.d)("Broadcaster", "MemberList"),
                    viewers: i.broadcaster,
                    onUsernameClick: n
                })), i.staff.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-staff",
                    header: Object(c.d)("Staff", "MemberList"),
                    viewers: i.staff,
                    onUsernameClick: n
                })), i.admin.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-admins",
                    header: Object(c.d)("Admins", "MemberList"),
                    viewers: i.admin,
                    onUsernameClick: n
                })), i.globalMod.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-global-mods",
                    header: Object(c.d)("Global Moderators", "MemberList"),
                    viewers: i.globalMod,
                    onUsernameClick: n
                })), i.moderator.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-moderators",
                    header: Object(c.d)("Moderators", "MemberList"),
                    viewers: i.moderator,
                    onUsernameClick: n
                })), i.member.length > 0 && e.push(l.createElement(Dt, {
                    key: "member-group-members",
                    header: Object(c.d)("Members", "MemberList"),
                    viewers: i.member,
                    onUsernameClick: n
                })), l.createElement(Tt.b, {
                    className: "member-list__list"
                }, l.createElement(T._8, {
                    padding: {
                        x: 2
                    }
                }, e))
            }, t = s.__decorate([Object(k.d)("MemberList"), Object(m.a)(Rt, {
                options: function(e) {
                    return {
                        variables: {
                            roomID: e.roomID
                        }
                    }
                }
            })], t)
        }(l.Component);
        var It = Object(i.b)(null, function(e) {
                return Object(a.b)({
                    onUsernameClick: pe.d
                }, e)
            })(Ot),
            Mt = n("6BvN"),
            xt = n("c3pS"),
            jt = n("iydZ"),
            Lt = n("/LBW"),
            At = n("ieBa"),
            Ft = n("KSGD"),
            Ut = n("SZoP"),
            Bt = n("Bir6"),
            Pt = n("2emZ"),
            Vt = n("e1CU"),
            Wt = 5,
            Ht = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.autocompleteType = Pt.a.Mention, n.canBeTriggeredByTab = !0, n.getMatches = function(e, t) {
                        return t || e.startsWith("@") ? n.getMentions(e, t) : null
                    }, n.getMentions = function(e, t) {
                        var i = t ? e : e.substring(1),
                            a = new RegExp("^" + Object(Bt.a)(i), "i");
                        return n.state.sortedRoomMembers.filter(function(e) {
                            return a.test(e.login) || a.test(e.displayName)
                        }).slice(0, Wt).map(function(i) {
                            return {
                                current: e,
                                replacement: (t ? "" : "@") + i.displayName,
                                element: n.renderMention(i)
                            }
                        })
                    }, n.renderMention = function(e) {
                        return l.createElement("span", null, Object(Ut.a)(e.login, e.displayName))
                    }, n.sortChatMembers = function(e) {
                        var t = [{
                                id: e.channelID,
                                login: e.channelLogin,
                                chatColor: "",
                                displayName: Object(Vt.a)(e.channelDisplayName, e.channelLogin).userDisplayName,
                                displayBadges: [],
                                __typename: "User"
                            }],
                            n = e.roomMembers;
                        return n.sort(function(e, t) {
                            return e.login < t.login ? -1 : e.login > t.login ? 1 : 0
                        }), t.concat(n)
                    }, n.state = {
                        sortedRoomMembers: n.sortChatMembers(t)
                    }, n
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.roomMembers === e.roomMembers && this.props.channelDisplayName === e.channelDisplayName && this.props.channelLogin === e.channelLogin && this.props.channelID === e.channelID || this.setState({
                        sortedRoomMembers: this.sortChatMembers(e)
                    })
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: Ft.func
                }, t
            }(l.Component),
            Gt = (n("KnZO"), function() {
                return l.createElement(T._8, {
                    fullWidth: !0,
                    position: T._15.Absolute,
                    className: "rooms-bits-prompt"
                }, l.createElement(T._35, {
                    border: !0,
                    background: T.n.Base,
                    elevation: 3,
                    fullWidth: !0,
                    padding: 1,
                    textAlign: T._45.Center,
                    className: "rooms-bits-prompt__content"
                }, l.createElement(T._8, {
                    padding: {
                        y: 1
                    }
                }, l.createElement(T.Q, {
                    color: T.K.Link,
                    type: T._49.H4,
                    bold: !0
                }, Object(c.d)("Cheering is not available in Rooms", "DisabledBitsCard"))), l.createElement(T._8, {
                    display: T.R.Flex,
                    justifyContent: T._7.Center
                }, l.createElement("img", {
                    src: "https://static-cdn.jtvnw.net/emoticons/v1/86/3.0",
                    width: "42",
                    height: "35"
                })), l.createElement(T._8, {
                    padding: {
                        y: 1
                    }
                }, l.createElement(T.Q, null, Object(c.d)("To Cheer in this channel to support the streamer, please cheer in Stream Chat", "DisabledBitsCard")))))
            }),
            zt = n("NXs7"),
            qt = n("NikC"),
            Qt = n("0nzt"),
            Kt = n("Ouuk"),
            $t = n("jF7o"),
            Yt = n("VsL1"),
            Jt = n("v4vD"),
            Zt = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onDarkModeToggle = function() {
                        var e = t.props.darkModeEnabled ? zt.a.Light : zt.a.Dark;
                        t.props.onThemeChanged(e, !t.props.isPopout)
                    }, t.onModIconsToggle = function() {
                        Object(Yt.b)("showModIcons", !t.props.showModerationIcons), t.props.showModerationIcons ? t.props.onModIconsDisable() : t.props.onModIconsEnable()
                    }, t.onSlowModeToggle = function() {
                        0 === t.props.data.room.modes.slowModeDurationSeconds ? t.props.sendMessage("/slow") : t.props.sendMessage("/slowoff")
                    }, t.onTimestampToggle = function() {
                        Object(Yt.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable()
                    }, t.onChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("/popout/" + t.props.data.room.owner.login + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(Kt.a)() && (e.focus(), Object($t.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.hasModPermissions = function() {
                        var e = t.props.sessionUser,
                            n = t.props.data,
                            i = n.room,
                            a = n.user;
                        return !!e && (a.roles.isStaff || a.roles.isGlobalMod || a.roles.isSiteAdmin || e.id === i.owner.id || !!i.owner.self && i.owner.self.isModerator)
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.props.data.loading ? l.createElement(T._14, {
                        lineCount: 4
                    }) : this.props.data.error ? l.createElement(T._8, null) : l.createElement(Tt.b, {
                        className: "room-settings"
                    }, l.createElement(T._35, {
                        className: "room-settings__content",
                        background: T.n.Base,
                        color: T.K.Base,
                        padding: 2
                    }, this.renderChatOptions(), this.renderModTools()))
                }, t.prototype.renderChatOptions = function() {
                    if (!this.props.data) return null;
                    var e = this.props.isPopout && l.createElement(T.J, {
                        checked: this.props.darkModeEnabled,
                        "data-test-selector": "dark-mode-checkbox",
                        id: "room-settings-dark-mode",
                        label: Object(c.d)("Dark Mode", "RoomSettings"),
                        onChange: this.onDarkModeToggle
                    });
                    return l.createElement(T._8, null, l.createElement(T._35, {
                        padding: {
                            bottom: 2
                        }
                    }, l.createElement(T.Q, {
                        color: T.K.Alt2,
                        transform: T._48.Uppercase
                    }, Object(c.d)("Chat Options", "RoomSettings"))), l.createElement(T._8, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(T.J, {
                        checked: this.props.showTimestamps,
                        "data-test-selector": "timestamps-selector",
                        id: "room-settings-timestamp",
                        label: Object(c.d)("Timestamps", "RoomSettings"),
                        onChange: this.onTimestampToggle
                    })), l.createElement(T._8, {
                        margin: {
                            bottom: 1
                        }
                    }, e), l.createElement(T._8, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement("button", {
                        onClick: this.onChatPopout,
                        "data-test-selector": "popout-button"
                    }, Object(c.d)("Popout", "RoomSettings"))))
                }, t.prototype.renderModTools = function() {
                    if (this.hasModPermissions()) return l.createElement(T._35, {
                        borderTop: !0,
                        "data-test-selector": "mod-tools",
                        margin: {
                            top: 2
                        },
                        padding: {
                            top: 2
                        }
                    }, l.createElement(T._8, {
                        margin: {
                            bottom: 2
                        }
                    }, l.createElement(T.Q, {
                        color: T.K.Alt2,
                        transform: T._48.Uppercase
                    }, Object(c.d)("Mod Tools", "RoomSettings"))), l.createElement(T._8, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(T.J, {
                        checked: this.props.showModerationIcons,
                        "data-test-selector": "mod-icons-checkbox",
                        id: "room-settings-mod-icons",
                        label: Object(c.d)("Mod Icons", "RoomSettings"),
                        onChange: this.onModIconsToggle
                    })), l.createElement(T._8, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(T.J, {
                        checked: 0 !== this.props.data.room.modes.slowModeDurationSeconds,
                        id: "room-settings-slow-mode",
                        label: Object(c.d)("Slow Mode", "RoomSettings"),
                        onChange: this.onSlowModeToggle
                    })))
                }, t = s.__decorate([Object(m.a)(Jt, {
                    options: function(e) {
                        return {
                            variables: {
                                roomID: e.roomID,
                                isLoggedIn: !!e.sessionUser,
                                userID: e.sessionUser && e.sessionUser.id
                            }
                        }
                    }
                }), Object(k.d)("RoomSettings")], t)
            }(l.Component);
        var Xt, en = Object(i.b)(function(e) {
                return {
                    darkModeEnabled: Object(Qt.a)(e) === zt.a.Dark,
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps,
                    theatreModeEnabled: e.ui.theatreModeEnabled,
                    sessionUser: Object(r.c)(e)
                }
            }, function(e) {
                return Object(a.b)({
                    onChatHide: function() {
                        return o.Q()
                    },
                    onChatUnhide: function() {
                        return o.T()
                    },
                    onModIconsDisable: function() {
                        return o.D()
                    },
                    onModIconsEnable: function() {
                        return o.K()
                    },
                    onTimestampsDisable: function() {
                        return o.I()
                    },
                    onTimestampsEnable: function() {
                        return o.P()
                    },
                    onThemeChanged: function(e) {
                        return Object(qt.b)(e, void 0, !1)
                    }
                }, e)
            })(Zt),
            tn = /\S/;
        ! function(e) {
            e[e.Bits = 0] = "Bits", e[e.Emotes = 1] = "Emotes", e[e.None = 2] = "None"
        }(Xt || (Xt = {}));
        var nn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onKeyDown = function(e) {
                        switch (e.charCode || e.keyCode) {
                            case Mt.a.Enter:
                                return void(e.shiftKey || (e.preventDefault(), n.handleMessageSend()))
                        }
                    }, n.onMessageValueUpdate = function(e) {
                        n.setState({
                            currentMessageInput: e
                        })
                    }, n.handleMessageSend = function() {
                        tn.test(n.state.currentMessageInput) && (n.props.sendMessage(n.state.currentMessageInput), n.setState({
                            currentMessageInput: ""
                        }), n.chatInputRef.focus(), n.autocompleteInputRef.setValue(""))
                    }, n.onClickEmote = function(e) {
                        var t = n.state.currentMessageInput;
                        n.state.currentMessageInput.length > 0 && !n.state.currentMessageInput.endsWith(" ") && (t += " "), t += e + " ", n.setState({
                            currentMessageInput: t
                        }), n.autocompleteInputRef.setValue(t)
                    }, n.onShowMemberList = function() {
                        n.state.showCard !== Xt.None && n.setState({
                            showCard: Xt.None
                        }), n.props.showMemberList()
                    }, n.onEmotePickerToggle = function() {
                        n.setState(function(e) {
                            return {
                                showCard: e.showCard !== Xt.Emotes ? Xt.Emotes : Xt.None
                            }
                        })
                    }, n.syncMembers = function() {
                        n.props.activeMembers.isDirty && n.setState({
                            roomMembers: n.props.activeMembers.getActiveMembers()
                        })
                    }, n.setChatInputRef = function(e) {
                        return n.chatInputRef = e
                    }, n.setAutocompleteInputRef = function(e) {
                        return n.autocompleteInputRef = e
                    }, n.state = {
                        roomMembers: t.activeMembers.getActiveMembers(),
                        currentMessageInput: "",
                        showCard: Xt.None
                    }, n
                }
                return s.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.syncMembersHandle = setInterval(this.syncMembers, 250)
                }, t.prototype.componentWillUnmount = function() {
                    this.syncMembersHandle && (clearInterval(this.syncMembersHandle), this.syncMembersHandle = 0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    if (t.currentMessageInput !== this.state.currentMessageInput && e.bitsConfig) {
                        var n = !1;
                        Object(jt.c)(t.currentMessageInput, e.bitsConfig).forEach(function(e) {
                            e.type === Se.a.Emote && (n = !0)
                        }), n ? (this.setState({
                            showCard: Xt.Bits
                        }), Object(Lt.h)({
                            actionName: Lt.a.CheeringInRoom,
                            displayedBalance: 0
                        })) : this.setState({
                            showCard: Xt.None
                        })
                    }
                }, t.prototype.render = function() {
                    var e = [l.createElement(At.b, {
                        key: "emote-picker",
                        onClick: this.onEmotePickerToggle
                    })];
                    return l.createElement(T._8, {
                        className: "room-input",
                        padding: {
                            x: 2,
                            bottom: 2
                        }
                    }, l.createElement(T._8, {
                        position: T._15.Relative,
                        zIndex: T._62.Default
                    }, this.state.showCard === Xt.Bits && l.createElement(Gt, null), l.createElement(At.c, {
                        channelOwnerID: this.props.channelID,
                        onClickEmote: this.onClickEmote,
                        toggleVisibility: this.onEmotePickerToggle,
                        visible: this.state.showCard === Xt.Emotes
                    }), l.createElement(xt.b, {
                        componentType: xt.a.TextArea,
                        suggestionSource: xt.c.Chat,
                        onValueUpdate: this.onMessageValueUpdate,
                        onKeyDown: this.onKeyDown,
                        componentRefDelegate: this.setChatInputRef,
                        refDelegate: this.setAutocompleteInputRef,
                        noResize: !0,
                        paddingRight: 30 * e.length,
                        placeholder: Object(c.d)("Send a message", "RoomInput"),
                        "data-test-selector": "room-input-textarea"
                    }, l.createElement(xt.d, {
                        emotes: this.props.emotes
                    }), l.createElement(Ht, {
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        roomMembers: this.state.roomMembers
                    })), l.createElement(T._8, {
                        position: T._15.Absolute,
                        attachRight: !0,
                        attachTop: !0
                    }, e)), l.createElement(T._8, {
                        display: T.R.Flex,
                        justifyContent: T._7.Between,
                        margin: {
                            top: 1
                        }
                    }, l.createElement(T._8, {
                        display: T.R.Flex,
                        flexDirection: T.T.Row
                    }, l.createElement(y.a, null, l.createElement(T.w, {
                        icon: T._25.Gear,
                        ariaLabel: Object(c.d)("Room Settings", "RoomInput")
                    }), l.createElement(T.q, {
                        direction: T.r.Top,
                        noTail: !0,
                        offsetY: "11px"
                    }, l.createElement(en, {
                        roomID: this.props.roomID,
                        isPopout: this.props.isPopout,
                        sendMessage: this.props.sendMessage
                    }))), l.createElement(T.w, {
                        ariaLabel: Object(c.d)("Member List", "RoomInput"),
                        icon: T._25.ViewerList,
                        onClick: this.onShowMemberList
                    })), l.createElement(T.v, {
                        onClick: this.handleMessageSend,
                        "data-test-selector": "room-input-button"
                    }, Object(c.d)("Chat", "RoomInput"))))
                }, t
            }(l.Component),
            an = Object(d.compose)(Object(k.d)("RoomInput", {
                autoReportInteractive: !0
            }))(nn),
            rn = n("zMie"),
            on = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data && this.props.data.loading) return l.createElement(T._8, null);
                    if (this.props.data && this.props.data.error) return l.createElement(T._8, null);
                    if (this.props.data && !this.props.allowedToChat) {
                        var e = this.props.data.room,
                            t = Object(c.d)("You are viewing {displayName}’s #{roomName}. You have to subscribe to chat here! Subscribe above the player.", {
                                displayName: e.owner.displayName,
                                roomName: e.name
                            }, "RoomInteractionPane");
                        return l.createElement(T._8, {
                            padding: {
                                bottom: 2,
                                x: 2
                            }
                        }, l.createElement(T._35, {
                            padding: {
                                bottom: 1,
                                x: 2
                            },
                            borderTop: !0
                        }), l.createElement(T._8, {
                            padding: {
                                bottom: 1
                            }
                        }, l.createElement(T._8, {
                            display: T.R.Flex,
                            flexDirection: T.T.Column,
                            fullHeight: !0,
                            justifyContent: T._7.Center
                        }, l.createElement(T.Q, {
                            "data-test-selector": "subscription-upsell",
                            color: T.K.Alt
                        }, t))), l.createElement(T.v, {
                            type: T.B.Hollow,
                            onClick: this.props.handleStreamChatClick
                        }, Object(c.d)("Back to Stream Chat", "RoomInteractionPane")))
                    }
                    return l.createElement(T._8, {
                        "data-test-selector": "interaction-enabled"
                    }, l.createElement(an, {
                        activeMembers: this.props.activeMembers,
                        bitsConfig: this.props.bitsConfig,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        emotes: this.props.emotes,
                        isPopout: this.props.isPopout,
                        roomID: this.props.roomID,
                        sendMessage: this.props.sendMessage,
                        showMemberList: this.props.showMemberList
                    }))
                }, t = s.__decorate([Object(m.a)(rn, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.roomID
                            }
                        }
                    },
                    skip: function(e) {
                        return e.allowedToChat
                    }
                }), Object(k.d)("RoomInteractionPane")], t)
            }(l.Component),
            sn = n("Th9g"),
            ln = n("g7wA"),
            dn = (n("eDxU"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleUsernameClick = function(e) {
                        t.props.onUsernameClick(t.props.sender.login, wt.a.room_message, t.props.roomID, e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.sender,
                        t = [l.createElement("span", {
                            key: "username-display",
                            className: "message-author__display-name",
                            "data-test-selector": "message-username",
                            style: {
                                color: e.chatColor
                            }
                        }, e.displayName)];
                    return Object(Ut.b)(e.displayName) || t.push(l.createElement("span", {
                        key: "username-login",
                        style: {
                            color: e.chatColor
                        },
                        className: "message-author__intl-login",
                        "data-test-selector": "message-username-canonical"
                    }, " (" + e.login + ")")), l.createElement("button", {
                        onClick: this.handleUsernameClick,
                        className: "message-author__username"
                    }, l.createElement("span", {
                        key: e.id + "-messageauthor"
                    }, t))
                }, t
            }(l.Component)),
            cn = (n("G/62"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanUser = function() {
                        t.props.sendMessage("/ban " + t.props.message.sender.login)
                    }, t.onTimeoutUser = function() {
                        t.props.sendMessage("/timeout " + t.props.message.sender.login)
                    }, t.onUnbanUser = function() {
                        t.props.sendMessage("/unban " + t.props.message.sender.login)
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.message.deletedAt,
                        t = this.onBanUser,
                        n = T._25.Ban,
                        i = Object(c.d)("Ban", "RoomMessageModIcons");
                    return e && (t = this.onUnbanUser, n = T._25.FollowCheck, i = Object(c.d)("Unban", "RoomMessageModIcons")), l.createElement(T._8, {
                        display: T.R.InlineFlex,
                        margin: {
                            right: .5
                        },
                        className: "room-message-mod-icons"
                    }, l.createElement(T._3, {
                        color: T.K.Alt2,
                        display: T.R.InlineFlex
                    }, l.createElement("button", {
                        className: "room-message-mod-icons__mod-icon",
                        "data-test-selector": "default-action-button",
                        onClick: t
                    }, l.createElement(T._52, {
                        label: i
                    }, l.createElement(T._24, {
                        width: 16,
                        height: 16,
                        type: T._26.Inherit,
                        asset: n
                    })))), l.createElement(T._3, {
                        color: T.K.Alt2,
                        display: T.R.InlineFlex
                    }, l.createElement("button", {
                        className: "room-message-mod-icons__mod-icon",
                        "data-test-selector": "timeout-action-button",
                        onClick: this.onTimeoutUser
                    }, l.createElement(T._52, {
                        label: Object(c.d)("Timeout", "RoomMessageModIcons")
                    }, l.createElement(T._24, {
                        width: 16,
                        height: 16,
                        type: T._26.Inherit,
                        asset: T._25.Timeout
                    })))))
                }, t
            }(l.Component)),
            un = (n("Ecgh"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        shouldShowDeletedBody: !1
                    }, t.showDeleted = function(e) {
                        e && e.preventDefault(), t.setState({
                            shouldShowDeletedBody: !0
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.shouldComponentUpdate = function(e, t) {
                    return e.showModerationIcons !== this.props.showModerationIcons || (e.showTimestamps !== this.props.showTimestamps || (t.shouldShowDeletedBody !== this.state.shouldShowDeletedBody || (e.hasModPermissions !== this.props.hasModPermissions || e.message.deletedAt !== this.props.message.deletedAt)))
                }, t.prototype.render = function() {
                    var e = this.props.message.sender.displayBadges,
                        t = {},
                        n = ": ";
                    return this.props.message.content.text.startsWith(Te) && (t = {
                        color: this.props.message.sender.chatColor
                    }, n = " "), l.createElement(T._8, {
                        padding: {
                            x: 2,
                            y: .5
                        }
                    }, l.createElement("div", {
                        id: this.props.message.id,
                        className: "room-message",
                        style: t
                    }, this.renderTimestamp(), this.renderModerationIcons(), l.createElement(Re.b, {
                        badgeSets: this.props.badgeSets,
                        badgesToRender: e
                    }), l.createElement(dn, {
                        roomID: this.props.roomID,
                        messageID: this.props.message.id,
                        sender: this.props.message.sender,
                        onUsernameClick: this.props.onUsernameClick
                    }), l.createElement("span", {
                        key: "separator"
                    }, n), this.renderMessageBody()))
                }, t.prototype.renderMessageBody = function() {
                    if (!this.props.message.deletedAt || this.state.shouldShowDeletedBody) return Object(ln.e)((e = this.props.message, t = this.props.currentUserLogin, n = e.content.text.startsWith(Te), i = [], a = /^(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,6}(?:\/[\w./@#%&()\-+=:?~]*)?)$/g, e.content.fragments.forEach(function(r, o) {
                        var s = r.content;
                        if (s && s.__typename === Ne.EMOTE) {
                            var l = s;
                            i.push({
                                type: Se.a.Emote,
                                content: {
                                    alt: r.text,
                                    images: {
                                        themed: !1,
                                        sources: {
                                            "1x": Object(b.f)(l.emoteID, 1),
                                            "2x": Object(b.f)(l.emoteID, 2),
                                            "4x": Object(b.f)(l.emoteID, 4)
                                        }
                                    }
                                }
                            })
                        } else if (s && s.__typename === Ne.MENTION) {
                            var d = s;
                            i.push({
                                type: Se.a.Mention,
                                content: {
                                    sender: e.sender.login,
                                    recipient: r.text.slice(1),
                                    isCurrentUserRecipient: !!t && t === d.login
                                }
                            })
                        } else if (a.test(r.text)) {
                            var c = r.text.split(/\s+/);
                            c.forEach(function(e, t) {
                                a.lastIndex = 0;
                                var n = a.exec(e);
                                if (n) {
                                    var r = n.index;
                                    0 !== r && i.push({
                                        type: Se.a.Text,
                                        content: "" + e.slice(0, r)
                                    });
                                    var o = a.lastIndex,
                                        s = (n[1] ? "" : "https://") + e.slice(r, o);
                                    if (Object(Ee.a)(s)) {
                                        var l = Object(Ee.b)(s);
                                        i.push({
                                            type: Se.a.VideoLink,
                                            content: {
                                                id: l,
                                                url: s,
                                                displayText: e.slice(r, o)
                                            }
                                        })
                                    } else i.push({
                                        type: Se.a.Link,
                                        content: {
                                            displayText: e.slice(r, o),
                                            url: s
                                        }
                                    });
                                    var d = e.slice(o),
                                        u = "";
                                    t < c.length - 1 && (u = " "), d && i.push({
                                        type: Se.a.Text,
                                        content: "" + d + u
                                    })
                                } else {
                                    var m = i.length && i[i.length - 1];
                                    if (u = "", t < c.length - 1 && (u = " "), m && m.type === Se.a.Text) m.content += e + u;
                                    else {
                                        var p = "";
                                        t && (p = " "), i.push({
                                            type: Se.a.Text,
                                            content: p + e + u
                                        })
                                    }
                                }
                            })
                        } else {
                            var u = r.text;
                            n && 0 === o && u.startsWith(Te) && (u = u.substr(3)), i.push({
                                type: Se.a.Text,
                                content: u
                            })
                        }
                    }), i));
                    var e, t, n, i, a, r = Object(c.d)("message deleted", "RoomMessage"),
                        o = this.props.hasModPermissions ? l.createElement(T.O, {
                            onClick: this.showDeleted,
                            "data-test-selector": "show-deleted"
                        }, "<" + r + ">") : "<" + r + ">";
                    return l.createElement("span", {
                        key: "deleted",
                        className: "room-message--deleted",
                        "data-test-selector": "deleted-message"
                    }, o)
                }, t.prototype.renderTimestamp = function() {
                    return this.props.showTimestamps ? l.createElement("span", {
                        key: "timestamp",
                        className: "room-message__timestamp",
                        "data-test-selector": "room-message-timestamp"
                    }, Object(ln.a)(new Date(this.props.message.sentAt))) : null
                }, t.prototype.renderModerationIcons = function() {
                    return this.props.showModerationIcons && this.props.hasModPermissions ? l.createElement(cn, {
                        channelID: this.props.channelID,
                        message: this.props.message,
                        sendMessage: this.props.sendMessage
                    }) : null
                }, t
            }(l.Component)),
            mn = (n("DS3o"), function(e) {
                return l.createElement(T._35, {
                    className: "room-system-message",
                    color: T.K.Alt2,
                    key: e.message.id,
                    padding: {
                        x: 2,
                        y: .5
                    }
                }, l.createElement(T.Q, null, e.message.text))
            }),
            pn = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    switch (this.props.message.kind) {
                        case ce.SystemMessageEvent:
                            return l.createElement(mn, {
                                message: this.props.message
                            });
                        case ce.RoomMessageEvent:
                            return l.createElement(un, {
                                showModerationIcons: this.props.showModerationIcons,
                                showTimestamps: this.props.showTimestamps,
                                badgeSets: this.props.badgeSets,
                                channelID: this.props.channelID,
                                currentUserLogin: this.props.currentUserLogin,
                                roomID: this.props.roomID,
                                hasModPermissions: this.props.hasModPermissions,
                                message: this.props.message,
                                sendMessage: this.props.sendMessage,
                                onUsernameClick: this.props.onUsernameClick
                            });
                        default:
                            return null
                    }
                }, t
            }(l.Component),
            hn = (n("AsjC"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
            gn = 10,
            fn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        disableInfiniteTrigger: !0,
                        isAutoScrolling: !0
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.handleScrollEvent = function(e) {
                        if (t.scroll && t.scroll.scrollContent && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type)) {
                            var n = t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight;
                            n <= gn && !t.state.isAutoScrolling ? t.setState({
                                isAutoScrolling: !0
                            }) : n > gn && t.state.isAutoScrolling && t.setState({
                                isAutoScrolling: !1
                            })
                        }
                    }, t.handleClickMoreMessages = function() {
                        t.setState({
                            isAutoScrolling: !0
                        }, t.scrollToBottom), t.props.loadNewest()
                    }, t.loadOlder = function() {
                        return t.isLoadingOlder = !0, t.props.loadOlder()
                    }, t.loadNewer = function() {
                        return t.isLoadingOlder = !1, t.props.loadNewer()
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    this.setState({
                        disableInfiniteTrigger: !1
                    }), this.scroll && this.scroll.scrollContent && (this.scrollToBottom(), hn.forEach(function(t) {
                        e.scroll.scrollContent && e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                    }))
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    hn.forEach(function(t) {
                        e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.isBulkLoad && this.isLoadingOlder && this.scroll && this.scroll.scrollContent && (this.prevScrollTop = this.scroll.scrollContent.scrollTop), e.isBulkLoad && !this.isLoadingOlder && this.scroll && this.scroll.scrollContent) {
                        var t = this.props.messages[this.props.messages.length - 1] && this.props.messages[this.props.messages.length - 1].id;
                        if (t && document.getElementById(t)) {
                            var n = document.getElementById(t).offsetTop;
                            this.prevScrollTop = this.scroll.scrollContent.scrollTop - n
                        } else this.prevScrollTop = this.scroll.scrollContent.scrollTop
                    }
                }, t.prototype.componentDidUpdate = function(e) {
                    if (e.messages !== this.props.messages && (this.state.isAutoScrolling && this.scrollToBottom(), this.props.isBulkLoad && e.messages && this.props.messages))
                        if (this.isLoadingOlder) {
                            var t = e.messages[0] && e.messages[0].id,
                                n = this.props.messages[0] && this.props.messages[0].id;
                            if (t && n && t !== n) {
                                var i = document.getElementById(t);
                                if (i && this.scroll && this.scroll.scrollContent) {
                                    var a = i.offsetTop;
                                    this.scroll.scrollContent.scrollTop = this.prevScrollTop + a
                                }
                            }
                        } else {
                            var r = e.messages[e.messages.length - 1] && e.messages[e.messages.length - 1].id,
                                o = this.props.messages[this.props.messages.length - 1] && this.props.messages[this.props.messages.length - 1].id;
                            if (r && o && r !== o) {
                                var s = document.getElementById(r);
                                if (s && this.scroll && this.scroll.scrollContent) {
                                    a = s.offsetTop;
                                    this.scroll.scrollContent.scrollTop = this.prevScrollTop + a
                                }
                            }
                        }
                }, t.prototype.render = function() {
                    var e = this.getRoomLines();
                    return l.createElement(T._8, {
                        className: "room-list",
                        display: T.R.Flex,
                        flexDirection: T.T.Column,
                        flexWrap: T.U.NoWrap,
                        overflow: T._11.Hidden,
                        flexGrow: 1
                    }, l.createElement(Tt.b, {
                        className: "room-list__lines",
                        scrollRef: this.saveScrollRef
                    }, l.createElement(T._8, {
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: T._11.Hidden,
                        padding: {
                            bottom: 1
                        }
                    }, l.createElement(Tt.a, {
                        "data-test-selector": "backward-infinite-scroll",
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadOlder,
                        pixelThreshold: 400,
                        orientation: sn.b.Down,
                        contentLength: e.length,
                        forceLoadMoreContent: this.props.hasOlderLeft,
                        requestCap: 2
                    }), e, l.createElement(Tt.a, {
                        "data-test-selector": "forward-infinite-scroll",
                        enabled: !this.state.disableInfiniteTrigger,
                        loadMore: this.loadNewer,
                        pixelThreshold: 400,
                        orientation: sn.b.Up,
                        contentLength: e.length,
                        forceLoadMoreContent: this.props.hasNewerLeft,
                        requestCap: 2
                    }))), l.createElement(T._8, {
                        className: "room-list__more-messages-placeholder",
                        position: T._15.Relative,
                        margin: {
                            x: 2
                        }
                    }, this.moreMessages()))
                }, t.prototype.moreMessages = function() {
                    return this.state.isAutoScrolling ? null : l.createElement(T._35, {
                        alignItems: T.c.Center,
                        attachBottom: !0,
                        display: T.R.Flex,
                        fullWidth: !0,
                        background: T.n.Overlay,
                        justifyContent: T._7.Center,
                        position: T._15.Absolute
                    }, l.createElement(T.v, {
                        onClick: this.handleClickMoreMessages,
                        overlay: !0,
                        type: T.B.Text,
                        fullWidth: !0
                    }, Object(c.d)("More messages below.", "RoomList")))
                }, t.prototype.scrollToBottom = function() {
                    this.scroll.scrollToBottom()
                }, t.prototype.getRoomLines = function() {
                    var e = this,
                        t = this.props.messages;
                    return 0 === t.length && (t = [be(Object(c.d)("Welcome to the chat room!", "RoomList"))]), t.map(function(t) {
                        return l.createElement(pn, {
                            key: t.id,
                            badgeSets: e.props.badgeSets,
                            channelID: e.props.channelID,
                            currentUserLogin: e.props.currentUserLogin,
                            roomID: e.props.roomID,
                            hasModPermissions: e.props.hasModPermissions,
                            message: t,
                            showModerationIcons: e.props.showModerationIcons,
                            showTimestamps: e.props.showTimestamps,
                            sendMessage: e.props.sendMessage,
                            onUsernameClick: e.props.onUsernameClick
                        })
                    })
                }, t
            }(l.Component);
        var vn = n("Ucyv"),
            bn = 200,
            kn = function() {
                return function(e) {
                    var t = this;
                    this.resetWithRoomOwnerID = function(e) {
                        t.activeMemberIDs = new Set, t.activeMembers = {}, t.roomOwnerID = e, t.currentUserID = null, t.isDirty = !0
                    }, this.getActiveMembers = function() {
                        return t.isDirty = !1, Object.keys(t.activeMembers).map(function(e) {
                            return t.activeMembers[e]
                        })
                    }, this.setCurrentUserID = function(e) {
                        t.currentUserID = e, t.activeMemberIDs.has(e) && (t.isDirty = !0, t.removeActiveMember(e))
                    }, this.consumeRoomMessage = function(e) {
                        t.handleActiveMember(e.sender)
                    }, this.handleActiveMember = function(e) {
                        e.id !== t.roomOwnerID && e.id !== t.currentUserID && (t.activeMemberIDs.has(e.id) ? (t.activeMemberIDs.delete(e.id), t.addActiveMember(e)) : (t.addActiveMember(e), t.trimActiveMembers(), t.isDirty = !0))
                    }, this.addActiveMember = function(e) {
                        t.activeMemberIDs.add(e.id), t.activeMembers[e.id] = e
                    }, this.removeActiveMember = function(e) {
                        t.activeMemberIDs.delete(e), delete t.activeMembers[e]
                    }, this.trimActiveMembers = function() {
                        if (!(t.activeMemberIDs.size <= bn))
                            for (var e = t.activeMemberIDs.size - bn, n = t.activeMemberIDs.values(), i = 0; i < e; i++) {
                                var a = n.next().value;
                                t.removeActiveMember(a)
                            }
                    }, this.resetWithRoomOwnerID(e)
                }
            }(),
            yn = n("gv4B"),
            _n = n("/eRw"),
            Cn = (n("TT/W"), ["137512364", "188864445", "188863650", "190160460", "192718746"]),
            Sn = 3e4,
            En = 6e4,
            Nn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        showMemberList: !1,
                        hasSeenFirstTimeRoomTopic: !1
                    }, n.hasQueuedUpdate = !1, n.isLastReadAtThrottled = !1, n.lastReadAtThrottleTimer = null, n.renderPlaceholders = function() {
                        return l.createElement(T._35, {
                            className: "room-pane",
                            display: T.R.Flex,
                            flexDirection: T.T.Column,
                            flexWrap: T.U.NoWrap,
                            position: T._15.Relative,
                            flexGrow: 1,
                            fullHeight: !0,
                            overflow: T._11.Hidden,
                            color: T.K.Base,
                            background: T.n.Alt2,
                            borderLeft: !0
                        }, l.createElement(Et, null))
                    }, n.sendMessage = function(e) {
                        if (e && 0 !== e.length && n.props.sessionUser) {
                            var t = Object(je.l)(e, n.props.channel.login);
                            if (t.command)
                                if (t.handled) t.result && t.result.deferred && t.result.deferred.then(function(e) {
                                    var t = e.notice;
                                    t && n.props.onRoomEvent(be(t))
                                });
                                else {
                                    var i = Object(c.d)("Unrecognized command: /{command}", {
                                        command: t.command
                                    }, "RoomPane");
                                    n.props.onRoomEvent(be(i))
                                }
                            else n.sendRoomMessage(e);
                            Object(_t.a)({
                                channelID: n.props.channelID,
                                channelLogin: n.props.channel.login,
                                isHostMode: n.props.isHostMode,
                                roomID: n.props.roomID,
                                roomMinimumRole: n.props.minimumAllowedRole,
                                player: n.props.isPopout ? yt.a.Embed : yt.a.Web,
                                subOnlyMode: n.props.minimumAllowedRole === V.b.Subscriber
                            });
                            for (var a = 0, r = Object(b.c)(e, n.props.sessionUser.displayName, !1); a < r.length; a++) {
                                var o = r[a];
                                o.type === Se.a.Mention && o.content.recipient !== o.content.sender && Object(Ct.a)({
                                    channelLogin: n.props.channel.login,
                                    isHostMode: n.props.isHostMode,
                                    mentionedUserDisplayName: o.content.recipient,
                                    roomID: n.props.roomID,
                                    roomMinimumRole: n.props.minimumAllowedRole,
                                    userLogin: n.props.sessionUser.login
                                })
                            }
                        }
                    }, n.sendRoomMessage = function(e) {
                        return s.__awaiter(n, void 0, void 0, function() {
                            var t, n, i, a, r, o, l, d, c;
                            return s.__generator(this, function(u) {
                                switch (u.label) {
                                    case 0:
                                        return [4, this.props.sendRoomMessage(Object(E.a)({
                                            roomID: this.props.roomID,
                                            message: e
                                        }))];
                                    case 1:
                                        return t = u.sent(), n = t.data.sendRoomMessage, i = n.message, a = n.error, null !== i ? (r = {
                                            sender: s.__assign({}, i.sender, {
                                                displayBadges: this.props.user.displayBadges
                                            })
                                        }, o = s.__assign({}, i, r), this.props.onRoomEvent(ve(o))) : null !== a && (l = a.code, d = a.remainingDurationSeconds, c = void 0, c = d ? z(l, {
                                            remainingDurationSeconds: d
                                        }) : z(l), this.props.onRoomEvent(be(c))), [2]
                                }
                            })
                        })
                    }, n.showMemberList = function() {
                        n.props.closeRoomPicker && n.props.closeRoomPicker(), n.setState({
                            showMemberList: !0
                        })
                    }, n.closeMemberList = function() {
                        n.setState({
                            showMemberList: !1
                        })
                    }, n.hasModPermissions = function() {
                        var e = n.props,
                            t = e.channel,
                            i = e.channelID,
                            a = e.sessionUser,
                            r = e.user;
                        return !!a && (r.roles.isStaff || r.roles.isGlobalMod || r.roles.isSiteAdmin || a.id === i || !!t.self && t.self.isModerator)
                    }, n.onUpdateLastReadAt = function() {
                        var e;
                        Object(he.d)(Object(he.c)(c.o.apollo.client.link, s.__assign({
                            query: vn
                        }, (e = n.props.roomID, s.__assign({}, Object(E.a)({
                            lastReadAt: (new Date).toISOString(),
                            roomID: e
                        }))))))
                    }, n.throttleLastReadAtUpdate = function() {
                        n.onUpdateLastReadAt(), n.isLastReadAtThrottled = !0, n.lastReadAtThrottleTimer = setTimeout(n.unthrottleLastReadAtUpdate, Sn)
                    }, n.unthrottleLastReadAtUpdate = function() {
                        n.hasQueuedUpdate ? (n.throttleLastReadAtUpdate(), n.hasQueuedUpdate = !1) : n.isLastReadAtThrottled = !1
                    }, n.activeMembers = new kn(t.channelID), t.sessionUser && n.activeMembers.setCurrentUserID(t.sessionUser.id), n.trackingIntervalHandle = setInterval(function() {
                        Object(St.c)({
                            channelID: n.props.channelID,
                            channelLogin: n.props.channel.login,
                            clientTime: Date.now(),
                            isHostMode: n.props.isHostMode,
                            roomID: n.props.roomID,
                            roomMinimumRole: n.props.minimumAllowedRole
                        })
                    }, En), n
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t, n, i = this,
                        a = this.props;
                    !e.loading && ((e.isFirstTimeVisit || Cn.includes(this.props.channelID)) && e.roomTopic.length > 0 && !this.state.hasSeenFirstTimeRoomTopic || void 0 !== this.props.roomTopic && this.props.roomTopic !== e.roomTopic) && (this.setState({
                        hasSeenFirstTimeRoomTopic: !0
                    }), this.props.onRoomEvent((t = e.roomTopic, n = Object(c.d)('Broadcaster set this room\'s topic to "{topic}"', {
                        topic: t
                    }, "RoomTopic"), {
                        kind: ce.SystemMessageEvent,
                        id: Object(fe.a)("initialRoomTopicMessage"),
                        text: n
                    }))), e.sessionUser && a.sessionUser !== e.sessionUser && this.activeMembers.setCurrentUserID(e.sessionUser.id), a.channelID !== e.channelID && this.activeMembers.resetWithRoomOwnerID(e.channelID);
                    var r = a.roomEvents.length;
                    (this.props.loading && !e.loading || r !== e.roomEvents.length) && a.roomEvents[r - 1] === e.roomEvents[r - 1] && e.roomEvents.slice(r).forEach(function(e) {
                        e.kind === ce.RoomMessageEvent && i.activeMembers.consumeRoomMessage(ve(e))
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    (e.loading && !this.props.loading || e.roomEvents.length !== this.props.roomEvents.length) && (this.isLastReadAtThrottled ? this.hasQueuedUpdate = !0 : this.throttleLastReadAtUpdate())
                }, t.prototype.componentWillUnmount = function() {
                    this.lastReadAtThrottleTimer && clearTimeout(this.lastReadAtThrottleTimer), this.trackingIntervalHandle && clearInterval(this.trackingIntervalHandle)
                }, t.prototype.render = function() {
                    if (this.props.loading || !this.props.bufferLoaded) return this.renderPlaceholders();
                    if (this.props.error) return l.createElement(T._8, null);
                    var e = this.state.showMemberList && l.createElement(It, {
                            roomID: this.props.roomID,
                            closeMemberList: this.closeMemberList
                        }),
                        t = this.props.emoteSetsData && this.props.emoteSetsData.emoteSets || [],
                        n = this.props.emoteSetsData && this.props.emoteSetsData.emoteMap || {};
                    return l.createElement(T._35, {
                        className: "room-pane",
                        display: T.R.Flex,
                        flexDirection: T.T.Column,
                        flexWrap: T.U.NoWrap,
                        position: T._15.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: T._11.Hidden,
                        color: T.K.Base,
                        background: T.n.Alt2,
                        borderLeft: !0
                    }, l.createElement(Pe, {
                        channelID: this.props.channelID
                    }), l.createElement(He, null), l.createElement(qe, {
                        roomID: this.props.roomID
                    }), l.createElement(Ye, null), l.createElement(Je.a, {
                        currentUserLogin: this.props.sessionUser && this.props.sessionUser.login
                    }), l.createElement(Ze, {
                        sendMessage: this.sendRoomMessage
                    }), l.createElement(ut, {
                        channelID: this.props.channelID
                    }), l.createElement(pt, {
                        roomID: this.props.roomID
                    }), l.createElement(ft, {
                        roomID: this.props.roomID
                    }), l.createElement(vt.a, {
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        userLogin: this.props.user.login,
                        userID: this.props.user.id,
                        emoteMap: n
                    }), l.createElement(bt.a, {
                        channelID: this.props.channelID,
                        send: this.sendMessage
                    }), l.createElement(fn, {
                        badgeSets: this.props.badgeSets,
                        channelID: this.props.channelID,
                        currentUserLogin: this.props.sessionUser && this.props.sessionUser.login,
                        roomID: this.props.roomID,
                        hasModPermissions: this.hasModPermissions(),
                        isBulkLoad: this.props.isBulkLoad,
                        loadOlder: this.props.loadOlder,
                        loadNewer: this.props.loadNewer,
                        messages: this.props.roomEvents,
                        hasOlderLeft: this.props.hasOlderLeft,
                        hasNewerLeft: this.props.hasNewerLeft,
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        sendMessage: this.sendMessage,
                        onUsernameClick: this.props.onUsernameClick,
                        loadNewest: this.props.loadNewest
                    }), e, l.createElement(on, {
                        activeMembers: this.activeMembers,
                        allowedToChat: this.props.allowedToChat,
                        bitsConfig: this.props.bitsConfig,
                        channelDisplayName: this.props.channel.displayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channel.login,
                        emotes: t,
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        isPopout: this.props.isPopout,
                        roomID: this.props.roomID,
                        sendMessage: this.sendMessage,
                        showMemberList: this.showMemberList
                    }), l.createElement(T._8, {
                        className: "room-pane__viewer-card",
                        fullHeight: !0,
                        fullWidth: !0,
                        position: T._15.Absolute,
                        zIndex: T._62.Default
                    }, l.createElement(kt.a, {
                        isPopout: this.props.isPopout,
                        isEmbedded: !1,
                        onSendMessage: this.sendMessage,
                        channelID: this.props.channelID
                    })))
                }, t
            }(l.Component),
            Tn = Object(d.compose)(Object(m.a)(yn, {
                props: function(e) {
                    var t;
                    e.data && e.data.room && e.data.room.owner.cheer && (t = Object(Oe.a)(e.data.room.owner.cheer.emotes || []));
                    var n = new Re.c([]);
                    return e.data && e.data.badges && e.data.room && e.data.room.owner.broadcastBadges && (n = new Re.c(e.data.badges, e.data.room.owner.broadcastBadges, e.data.room.owner.login)), {
                        error: e.data && e.data.error,
                        loading: !e.data || e.data.loading,
                        badgeSets: n,
                        bitsConfig: t,
                        channel: e.data && e.data.room && e.data.room.owner,
                        roomTopic: e.data && e.data.room && e.data.room.topic,
                        user: e.data && e.data.user,
                        isFirstTimeVisit: e.data && e.data.room && null === e.data.room.self.lastReadAt,
                        minimumAllowedRole: e.data && e.data.room && e.data.room.minimumAllowedRole
                    }
                },
                options: function(e) {
                    return {
                        fetchPolicy: "network-only",
                        variables: {
                            channelID: e.channelID,
                            roomID: e.roomID,
                            isLoggedIn: e.isLoggedIn,
                            userID: e.sessionUser && e.sessionUser.id
                        }
                    }
                }
            }), Object(De.a)(), Object(m.a)(_n, {
                name: "sendRoomMessage"
            }), Object(k.d)("RoomPane"))(Nn),
            wn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onRoomBufferUpdate = function() {
                        n.syncBufferHandle || (n.syncBufferHandle = setTimeout(n.syncBufferedMessages, 0))
                    }, n.onInitialLoad = function() {
                        n.syncBufferedMessages(!0)
                    }, n.syncBufferedMessages = function(e) {
                        void 0 === e && (e = !1), n.roomBuffer && n.roomBuffer.isDirty && (n.state.bufferLoaded || e) && n.setState({
                            bufferLoaded: n.state.bufferLoaded || e,
                            roomEvents: n.roomBuffer.toArray(),
                            hasOlderLeft: n.roomBuffer.hasOlderLeft,
                            hasNewerLeft: n.roomBuffer.hasNewerLeft,
                            isBulkLoad: n.roomBuffer.isBulkLoad
                        }, function() {
                            n.clearBufferHandle()
                        })
                    }, n.clearBufferHandle = function() {
                        n.syncBufferHandle && (clearTimeout(n.syncBufferHandle), n.syncBufferHandle = 0)
                    }, n.roomBuffer = new Ce(t.roomID, t.channelID, n.onRoomBufferUpdate, n.onInitialLoad), n.roomService = new we(t.roomID, t.channelID, n.roomBuffer.consumeRoomEvent), n.roomBuffer.setBlockedUsers(t.blockedUsers), n.state = {
                        roomEvents: [],
                        isBulkLoad: !1,
                        bufferLoaded: !1,
                        hasOlderLeft: !0,
                        hasNewerLeft: !0
                    }, n
                }
                return s.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.blockedUsers !== e.blockedUsers && this.roomBuffer.setBlockedUsers(e.blockedUsers)
                }, t.prototype.componentWillUnmount = function() {
                    this.roomService.unsubscribe(), this.clearBufferHandle()
                }, t.prototype.componentDidMount = function() {
                    this.roomBuffer.loadOlder()
                }, t.prototype.render = function() {
                    return l.createElement(Tn, s.__assign({}, this.props, {
                        hasOlderLeft: this.state.hasOlderLeft,
                        hasNewerLeft: this.state.hasNewerLeft,
                        isBulkLoad: this.state.isBulkLoad,
                        bufferLoaded: this.state.bufferLoaded,
                        loadNewer: this.roomBuffer.loadNewer,
                        loadOlder: this.roomBuffer.loadOlder,
                        onRoomEvent: this.roomBuffer.consumeRoomEvent,
                        roomEvents: this.state.roomEvents,
                        closeRoomPicker: this.props.closeRoomPicker,
                        loadNewest: this.roomBuffer.loadNewest
                    }))
                }, t
            }(l.Component);
        var Dn = Object(d.compose)(Object(i.b)(function(e) {
                return {
                    sessionUser: Object(r.c)(e),
                    isLoggedIn: Object(r.d)(e),
                    showModerationIcons: e.chat.showModIcons,
                    showTimestamps: e.chat.showTimestamps
                }
            }, function(e) {
                return Object(a.b)({
                    onUsernameClick: pe.d
                }, e)
            }), Object(me.a)())(wn),
            Rn = n("CHV0"),
            On = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    c.k.subscribe({
                        topic: Object(g.f)(this.props.channelID),
                        onMessage: function(t) {
                            t.type === h.PubsubMessageType.ChatRoomDeleted && e.props.roomID === t.data.room.room_id && e.props.onDelete && e.props.onDelete()
                        }
                    })
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.data;
                    !t || !e.data || t.loading || e.data.loading || e.data.room.isPreviewable === t.room.isPreviewable && e.data.room.minimumAllowedRole === t.room.minimumAllowedRole || t.refetch()
                }, t.prototype.render = function() {
                    return this.props.data ? this.props.data.loading ? l.createElement(T._8, null) : this.props.data.error || !this.props.data.room || this.props.data.room.minimumAllowedRole === V.b.Moderator && !this.props.data.room.self.permissions.readMessages ? l.createElement(ue, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: oe.BadPermissions
                    }) : this.props.isDeleted ? l.createElement(ue, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: oe.Deleted
                    }) : this.props.data.room.self.permissions.readMessages || this.props.data.room.minimumAllowedRole !== V.b.Subscriber ? this.props.data.chatRoomBanStatus && this.props.data.chatRoomBanStatus.isPermanent ? l.createElement(ue, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: oe.Banned
                    }) : l.createElement(Dn, {
                        key: this.props.roomID,
                        allowedToChat: this.props.data.room.self.permissions.sendMessages,
                        channelID: this.props.channelID,
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        closeRoomPicker: this.props.closeRoomPicker,
                        isHostMode: this.props.isHostMode
                    }) : l.createElement(ue, {
                        handleStreamChatClick: this.props.handleStreamChatClick,
                        roomID: this.props.roomID,
                        type: oe.NoPreview
                    }) : null
                }, t
            }(l.Component),
            In = Object(d.compose)(Object(m.a)(Rn, {
                options: function(e) {
                    return {
                        variables: {
                            roomID: e.roomID,
                            channelID: e.channelID,
                            userID: e.sessionUser && e.sessionUser.id
                        }
                    }
                },
                skip: function(e) {
                    return !e.sessionUser
                }
            }), Object(p.a)(function(e) {
                return {
                    query: Rn,
                    variables: {
                        roomID: e.roomID,
                        channelID: e.channelID,
                        userID: e.sessionUser && e.sessionUser.id
                    },
                    topic: Object(g.e)(e.roomID),
                    type: h.PubsubMessageType.ChatRoomUpdated,
                    mutator: function(e, t) {
                        return e.type === h.PubsubMessageType.ChatRoomUpdated && (t.room.name = e.data.room.name, t.room.topic = e.data.room.topic, t.room.isPreviewable = e.data.room.is_previewable, t.room.minimumAllowedRole = e.data.room.minimum_allowed_role), t
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: Rn,
                    variables: {
                        roomID: e.roomID,
                        channelID: e.channelID,
                        userID: e.sessionUser && e.sessionUser.id
                    },
                    topic: Object(g.g)("" + (e.sessionUser && e.sessionUser.id)),
                    type: h.PubsubMessageType.ChatRoomsRoomViewUpdated,
                    mutator: function(t, n) {
                        return t.data.room_view.room.room_id === e.roomID && (n.room.self.permissions.readMessages = t.data.room_view.permissions.read_messages, n.room.self.permissions.sendMessages = t.data.room_view.permissions.send_messages, n.user.self.isModerator = t.data.room_view.permissions.moderate), n
                    }
                }
            }), Object(k.d)("Room"))(On);
        var Mn = Object(i.b)(function(e) {
                return {
                    sessionUser: Object(r.c)(e)
                }
            })(In),
            xn = n("M8zv"),
            jn = n.n(xn),
            Ln = n("cxb0"),
            An = n("Oioc"),
            Fn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClick = function() {
                        var e = s.__assign({}, Object(E.a)({
                            channelID: t.props.channelID
                        }), {
                            optimisticResponse: {
                                joinChannelRooms: {
                                    __typename: "JoinChannelRoomsPayload",
                                    channel: {
                                        self: {
                                            isChannelMember: !0,
                                            __typename: "UserSelfConnection"
                                        },
                                        __typename: "User"
                                    }
                                }
                            }
                        });
                        t.props.joinRooms(e).then(function(e) {
                            Object(E.e)(Ln, {
                                channelID: t.props.channelID,
                                userID: t.props.sessionUser && t.props.sessionUser.id
                            }, function(t) {
                                return t.user.self.isChannelMember = e.data.joinChannelRooms.channel.self.isChannelMember, t
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return this.shouldRender() ? l.createElement(T._8, null, this.getButtonContent(), this.renderBanText()) : null
                }, t.prototype.shouldRender = function() {
                    return this.props.data && !this.props.data.error && this.props.data.user && this.props.sessionUser && this.props.sessionUser.id.toString() !== this.props.channelID && !this.props.data.user.self.isChannelMember
                }, t.prototype.getButtonContent = function() {
                    var e = this.props.data;
                    if (e && !e.loading) {
                        var t = e.user.displayName,
                            n = Object(c.d)("Join {displayName}'s Rooms", {
                                displayName: t
                            }, "JoinRoomsButton");
                        return l.createElement(T.v, {
                            "data-test-selector": "join-rooms-button",
                            disabled: !(!e.chatRoomBanStatus || !e.chatRoomBanStatus.isPermanent),
                            onClick: this.handleClick
                        }, n)
                    }
                    if (e && e.loading) return l.createElement(T._14, {
                        width: 160,
                        height: 30
                    })
                }, t.prototype.renderBanText = function() {
                    var e = this.props.data;
                    if (e && e.chatRoomBanStatus && e.chatRoomBanStatus.isPermanent) return l.createElement(T._8, {
                        padding: {
                            top: .5
                        }
                    }, l.createElement(T.Q, {
                        "data-test-selector": "ban-status-text",
                        color: T.K.Error
                    }, Object(c.d)("You are banned and can't rejoin Rooms", "JoinRoomsButton")))
                }, t
            }(l.Component),
            Un = Object(d.compose)(Object(m.a)(An, {
                name: "joinRooms"
            }), Object(m.a)(Ln, {
                options: function(e) {
                    return {
                        variables: {
                            channelID: e.channelID,
                            userID: e.sessionUser && e.sessionUser.id
                        }
                    }
                },
                skip: function(e) {
                    return !e.sessionUser
                }
            }), Object(k.d)("JoinRoomsButton"))(Fn);
        var Bn, Pn = Object(i.b)(function(e) {
            return {
                sessionUser: Object(r.c)(e)
            }
        })(Un);
        ! function(e) {
            e.Moderator = "moderator", e.Subscriber = "subscriber"
        }(Bn || (Bn = {}));
        var Vn = function(e) {
                return c.l.get("roomUpsellHistory", {})[e] || !1
            },
            Wn = function(e) {
                var t;
                c.l.set("roomUpsellHistory", s.__assign({}, c.l.get("roomUpsellHistory", {}), ((t = {})[e] = !0, t)))
            },
            Hn = n("q+qZ"),
            Gn = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.createRoom = function() {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i, a, r;
                            return s.__generator(this, function(o) {
                                switch (o.label) {
                                    case 0:
                                        return Z(this.props.roomName) ? [4, this.props.createRoom(Object(E.a)({
                                            name: this.props.roomName,
                                            topic: this.props.roomTopic,
                                            isPreviewable: this.props.isRoomPreviewable,
                                            minimumAllowedRole: this.props.roomMinimumAllowedRole
                                        }))] : [3, 2];
                                    case 1:
                                        if (!(e = o.sent()).data.createRoom.error) switch (this.props.roomMinimumAllowedRole) {
                                            case V.b.Subscriber:
                                                Wn(Bn.Subscriber);
                                                break;
                                            case V.b.Moderator:
                                                Wn(Bn.Moderator)
                                        }
                                        return this.props.onCreateHandler && (r = void 0, e.data.createRoom.error && (t = e.data.createRoom.error, n = t.code, i = t.minLength, a = t.maxLength, r = z(n, {
                                            maxChars: a,
                                            minChars: i
                                        })), this.props.onCreateHandler(r)), [3, 3];
                                    case 2:
                                        this.props.onCreateHandler && (r = z("NAME_LENGTH_INVALID", {
                                            maxChars: Q,
                                            minChars: K
                                        }), this.props.onCreateHandler(r)), o.label = 3;
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.isPrimaryCTA ? T.B.Default : T.B.Hollow;
                    return l.createElement(T.v, {
                        onClick: this.createRoom,
                        type: e,
                        "data-test-selector": "create-room-button"
                    }, this.getButtonText())
                }, t.prototype.getButtonText = function() {
                    return Object(c.d)("Create", "CreateRoomButton")
                }, t
            }(l.Component),
            zn = Object(d.compose)(Object(m.a)(Hn, {
                name: "createRoom"
            }))(Gn),
            qn = (n("E9JN"), {
                align: T._53.Right,
                direction: T._54.Top,
                label: "",
                offsetX: "-2%"
            }),
            Qn = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onCreateHandler = function(e) {
                        e ? n.setState({
                            roomCreationError: e
                        }) : n.props.onCloseRoomCreator()
                    }, n.onRoomNameChange = function(e) {
                        var t, i = e.target.value.toLowerCase();
                        if (Y(i)) {
                            if (J(i)) {
                                t = z("NAME_LENGTH_INVALID", {
                                    maxChars: Q,
                                    minChars: K
                                })
                            }
                        } else t = z("NAME_CONTAINS_INVALID_CHARACTERS");
                        n.setState({
                            roomName: i,
                            roomCreationError: t
                        })
                    }, n.updatePermissions = function(e) {
                        n.setState({
                            isRoomPreviewable: e.isPreviewable,
                            roomMinimumAllowedRole: e.minimumAllowedRole
                        })
                    }, n.state = {
                        roomName: t.roomName || "",
                        roomTopic: "",
                        isRoomPreviewable: !0,
                        roomMinimumAllowedRole: V.b.Everyone
                    }, n
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = V.a[this.state.roomMinimumAllowedRole];
                    qn.label = Object(c.d)("Chat Permission: {permissionRole}", {
                        permissionRole: e
                    }, "RoomCreator");
                    var t = {
                        isPreviewable: this.state.isRoomPreviewable,
                        minimumAllowedRole: this.state.roomMinimumAllowedRole
                    };
                    return l.createElement(T._8, {
                        className: "room-creator",
                        padding: {
                            y: 1,
                            x: 2
                        }
                    }, l.createElement(T._8, null, l.createElement(T._8, {
                        position: T._15.Relative
                    }, l.createElement(T._4, {
                        autoFocus: !0,
                        "data-test-selector": "room-creator-input",
                        error: !!this.state.roomCreationError,
                        icon: re(t, !0),
                        type: T._5.Text,
                        value: this.state.roomName,
                        onChange: this.onRoomNameChange,
                        maxLength: 26,
                        placeholder: Object(c.d)("Enter Room name here", "RoomCreator")
                    }), this.renderRoomCreationError(), l.createElement(T._8, {
                        position: T._15.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        display: T.R.Flex,
                        className: "room-creator__permissions"
                    }, l.createElement(T._35, {
                        display: T.R.Flex,
                        alignItems: T.c.Center,
                        padding: {
                            right: 1
                        }
                    }, l.createElement(y.a, {
                        tooltipProps: qn
                    }, l.createElement(T.O, null, l.createElement(T._8, {
                        display: T.R.Flex
                    }, l.createElement(T._8, {
                        padding: {
                            right: .5
                        }
                    }, Object(c.d)("{permissionRole}", {
                        permissionRole: e
                    }, "RoomCreator")), l.createElement(T._24, {
                        asset: T._25.GlyphArrDown
                    }))), l.createElement(T.q, {
                        direction: T.r.BottomRight,
                        size: T.s.Small,
                        noTail: !0,
                        offsetY: "0.5rem",
                        offsetX: "-1rem"
                    }, l.createElement(W, {
                        updatePermissions: this.updatePermissions
                    })))))), l.createElement(T._8, {
                        display: T.R.Flex,
                        margin: {
                            top: 1
                        },
                        justifyContent: T._7.End
                    }, l.createElement(T._8, {
                        padding: {
                            right: 1
                        }
                    }, l.createElement(T.v, {
                        onClick: this.props.onCloseRoomCreator,
                        type: T.B.Text
                    }, Object(c.d)("Cancel", "RoomCreator"))), l.createElement(zn, {
                        isPrimaryCTA: !0,
                        roomName: this.state.roomName,
                        roomTopic: this.state.roomTopic,
                        isRoomPreviewable: this.state.isRoomPreviewable,
                        roomMinimumAllowedRole: this.state.roomMinimumAllowedRole,
                        onCreateHandler: this.onCreateHandler,
                        "data-test-selector": "create-room-button"
                    })), l.createElement(T._35, {
                        borderTop: !0,
                        fullWidth: !0,
                        margin: {
                            y: 1
                        }
                    })))
                }, t.prototype.renderRoomCreationError = function() {
                    if (this.state.roomCreationError) return l.createElement(T.Q, {
                        color: T.K.Error,
                        "data-test-selector": "room-creation-error-text"
                    }, this.state.roomCreationError)
                }, t
            }(l.Component),
            Kn = n("rCmJ"),
            $n = n("pe3h"),
            Yn = (n("XViT"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onClick = function() {
                        !n.props.sessionUser || n.props.data && !n.props.data.room.owner.self.isChannelMember || n.props.handleClick(n.props.roomID, n.props.roomName)
                    }, n.closeViews = function() {
                        n.setState({
                            showOptionView: !1
                        })
                    }, n.toggleOptionView = function() {
                        n.state.showOptionView ? n.closeViews() : n.state.showOptionView || n.setState({
                            showOptionView: !0
                        })
                    }, n.state = {
                        showOptionView: !1
                    }, n
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data;
                    if (e && e.loading) return l.createElement(T._14, {
                        width: 160
                    });
                    if (e && e.error) return l.createElement(T._8, null);
                    var t = !this.props.sessionUser || e && !e.room.owner.self.isChannelMember,
                        n = T._25.Lock,
                        i = !1,
                        a = !1;
                    e && (n = re({
                        isPreviewable: e && e.room.isPreviewable,
                        minimumAllowedRole: e && e.room.minimumAllowedRole
                    }, e.room.self.permissions.sendMessages), i = e.room.self.isUnread && e.room.owner.self.isChannelMember, a = e.room.self.isMuted && e.room.owner.self.isChannelMember);
                    return l.createElement(T._35, {
                        position: T._15.Relative,
                        "data-test-selector": "interactable-wrapper",
                        className: "room-picker-option\n          " + (this.props.isActiveRoom ? "room-picker-option--active" : "") + "\n          " + (this.state.showOptionView && !t ? "room-picker-option--hover" : "") + "\n          " + (t ? "room-picker-option--disabled" : "")
                    }, l.createElement(T._6, {
                        onClick: this.onClick,
                        disabled: t,
                        "data-test-selector": "room-option-interactable",
                        hover: this.state.showOptionView && !t
                    }, l.createElement(T._8, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        display: T.R.Flex,
                        className: "room-picker-option__label",
                        fullWidth: !0
                    }, l.createElement(T._8, {
                        display: T.R.Flex,
                        alignItems: T.c.Center,
                        flexGrow: 1
                    }, l.createElement(T._35, {
                        className: "room-picker-option__permission-icon",
                        display: T.R.Flex,
                        padding: {
                            right: .5
                        }
                    }, l.createElement(T._24, {
                        height: 14,
                        asset: n
                    })), l.createElement(T.Q, {
                        bold: i && !this.props.isActiveRoom
                    }, this.props.roomName)), l.createElement(T._8, {
                        display: T.R.Flex,
                        alignItems: T.c.Center,
                        margin: {
                            right: 2
                        }
                    }, a && l.createElement(T._35, {
                        padding: {
                            left: .5
                        },
                        display: T.R.Flex,
                        className: "room-picker-option__muted-icon"
                    }, l.createElement(T._24, {
                        asset: T._25.WhisperMuted
                    })), this.renderMentionsPill()))), this.renderRoomDetailsBalloonToggle())
                }, t.prototype.renderRoomDetailsBalloonToggle = function() {
                    var e = this.props.data;
                    if (!this.props.sessionUser || !e || e.chatRoomBanStatus && e.chatRoomBanStatus.isPermanent) return null;
                    var t = e.room.owner.self.isChannelMember;
                    return l.createElement(T._8, {
                        margin: {
                            right: 1
                        },
                        position: T._15.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        display: t ? void 0 : T.R.Block,
                        className: "room-picker-option__settings " + (t ? "" : "room-picker-option__settings--disabled")
                    }, l.createElement(Kn.a, {
                        onClickOut: this.closeViews
                    }, l.createElement("div", {
                        className: "room-picker-option__picker-settings " + (this.state.showOptionView ? "room-picker-option__picker-settings--show" : "")
                    }, l.createElement(T.w, {
                        ariaLabel: Object(c.d)("More options", "RoomPickerOption"),
                        "data-test-selector": "room-details",
                        icon: T._25.More,
                        onClick: this.toggleOptionView,
                        overlay: t
                    })), l.createElement(T.q, {
                        direction: T.r.BottomRight,
                        noTail: !0,
                        size: T.s.Small,
                        offsetY: "-0.5rem",
                        offsetX: "1rem",
                        show: !!this.state.showOptionView
                    }, l.createElement(ae, {
                        roomID: this.props.roomID
                    }))))
                }, t.prototype.renderMentionsPill = function() {
                    return this.props.isActiveRoom || !this.props.data || this.props.data.room.self.unreadMentionCount <= 0 || this.props.data.room.self.isMuted || !this.props.data.room.owner.self.isChannelMember ? null : l.createElement(T._8, {
                        padding: {
                            left: .5
                        }
                    }, l.createElement(T._12, {
                        label: this.props.data.room.self.unreadMentionCount.toString(),
                        type: T._13.Alert
                    }))
                }, t = s.__decorate([Object(m.a)($n, {
                    options: function(e) {
                        return {
                            variables: {
                                roomID: e.roomID,
                                channelID: e.channelID,
                                userID: e.sessionUser && e.sessionUser.id
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.sessionUser
                    }
                })], t)
            }(l.Component)),
            Jn = (n("fNhT"), function(e) {
                var t, n, i, a, r, o;
                return e.type === Bn.Subscriber ? (t = Object(c.d)("subscriber-room", "RoomUpsell_SubUpsellName"), n = Object(c.d)("Create a place for your subscribers to hang out", "RoomUpsell_SubUpsellTopic"), i = Object(c.d)("subscriber-room", "RoomUpsell_SubUpsellNameCreate"), a = Object(c.d)("Create a place for your subscribers to hang out", "RoomUpsell_SubUpsellTopicCreate"), r = V.b.Subscriber, o = !0) : (t = Object(c.d)("moderator-room", "RoomUpsell_ModUpsellName"), n = Object(c.d)("Give your moderators a place to sharpen their swords", "RoomUpsell_ModUpsellTopic"), i = Object(c.d)("moderator-room", "RoomUpsell_ModUpsellNameCreate"), a = Object(c.d)("Give your moderators a place to sharpen their swords", "RoomUpsell_ModUpsellTopicCreate"), r = V.b.Moderator, o = !1), l.createElement(T._35, {
                    display: T.R.Flex,
                    padding: {
                        y: 1,
                        x: 2
                    },
                    className: "room-upsell",
                    elevation: 2
                }, l.createElement(T.Y, {
                    gutterSize: T.Z.None
                }, l.createElement(T.L, {
                    cols: 9
                }, l.createElement(T._8, {
                    display: T.R.Flex
                }, l.createElement(T._8, {
                    padding: {
                        right: .5
                    },
                    display: T.R.Flex,
                    alignItems: T.c.Center
                }, l.createElement(T._24, {
                    type: T._26.Alt2,
                    height: 14,
                    asset: T._25.Unlock
                })), l.createElement(T.Q, {
                    color: T.K.Alt,
                    type: T._49.Strong
                }, t)), l.createElement(T.Q, {
                    color: T.K.Alt2,
                    className: "room-upsell__text"
                }, n)), l.createElement(T.L, {
                    cols: 3
                }, l.createElement(T._8, {
                    display: T.R.Flex,
                    flexDirection: T.T.Column,
                    fullHeight: !0,
                    justifyContent: T._7.Center,
                    padding: {
                        left: .5
                    }
                }, l.createElement(zn, {
                    isPrimaryCTA: !1,
                    roomName: i,
                    roomTopic: a,
                    isRoomPreviewable: o,
                    roomMinimumAllowedRole: r
                })))))
            }),
            Zn = n("d7Cs"),
            Xn = n("4hnS"),
            ei = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleLeave = function() {
                        return s.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return s.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return e = s.__assign({}, Object(E.a)({
                                            channelID: this.props.channelID
                                        }), {
                                            optimisticResponse: {
                                                leaveChannelRooms: {
                                                    __typename: "LeaveChannelRoomsPayload",
                                                    channel: {
                                                        self: {
                                                            isChannelMember: !0,
                                                            __typename: "UserSelfConnection"
                                                        },
                                                        __typename: "User"
                                                    }
                                                }
                                            }
                                        }), this.props.handleDismiss(), [4, this.props.leaveRooms(e)];
                                    case 1:
                                        return t = i.sent(), n = function(e) {
                                            return e.user.self.isChannelMember = t.data.leaveChannelRooms.channel.self.isChannelMember, e
                                        }, Object(E.e)(Zn, {
                                            id: this.props.channelID
                                        }, n), [2]
                                }
                            })
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.props.data.loading || this.props.data.error) return l.createElement(T._8, null);
                    var e = this.props.data.user.displayName;
                    return l.createElement(T._8, {
                        padding: {
                            y: 1,
                            x: 1
                        },
                        margin: {
                            x: .5
                        }
                    }, l.createElement(T.Q, {
                        color: T.K.Error
                    }, Object(c.d)("Leave {displayName}'s Rooms?", {
                        displayName: e
                    }, "LeaveRoomsPrompt")), l.createElement(T._8, {
                        display: T.R.Flex,
                        padding: {
                            top: .5
                        }
                    }, l.createElement(T._8, {
                        padding: {
                            right: .5
                        }
                    }, l.createElement(T.v, {
                        "data-test-selector": "confirm-leave-button",
                        onClick: this.handleLeave,
                        type: T.B.Alert
                    }, Object(c.d)("Leave", "LeaveRoomsPrompt"))), l.createElement(T.v, {
                        "data-test-selector": "cancel-leave-button",
                        onClick: this.props.handleDismiss,
                        type: T.B.Hollow
                    }, Object(c.d)("Cancel", "LeaveRoomsPrompt"))))
                }, t = s.__decorate([Object(k.d)("LeaveRoomsPrompt"), Object(m.a)(Xn, {
                    name: "leaveRooms"
                }), Object(m.a)(Zn, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.channelID
                            }
                        }
                    }
                })], t)
            }(l.Component),
            ti = n("Fvfv"),
            ni = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        shouldShowLeaveRoomsPrompt: !1
                    }, t.openLeaveRoomsPrompt = function() {
                        t.setState({
                            shouldShowLeaveRoomsPrompt: !0
                        })
                    }, t.closeLeaveRoomsPrompt = function() {
                        t.setState({
                            shouldShowLeaveRoomsPrompt: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.render = function() {
                    return this.props.data.loading || this.props.data.error ? l.createElement(T._8, null) : this.shouldRender() ? l.createElement(y.a, null, l.createElement(T.w, {
                        "data-test-selector": "toggle-balloon-button",
                        ariaLabel: Object(c.d)("More options", "RoomsMemberOptions"),
                        icon: T._25.More
                    }), l.createElement(T.q, {
                        direction: T.r.BottomRight,
                        noTail: !0,
                        offsetY: "0rem"
                    }, l.createElement(T._8, {
                        padding: {
                            y: .5
                        }
                    }, this.renderLeaveOption()))) : null
                }, t.prototype.shouldRender = function() {
                    return this.props.isLoggedIn && this.props.data.user.self.isChannelMember
                }, t.prototype.renderLeaveOption = function() {
                    return this.state.shouldShowLeaveRoomsPrompt ? l.createElement(ei, {
                        channelID: this.props.channelID,
                        handleDismiss: this.closeLeaveRoomsPrompt
                    }) : l.createElement(T._6, {
                        alpha: !0,
                        alert: !0,
                        "data-test-selector": "open-leave-prompt",
                        onClick: this.openLeaveRoomsPrompt
                    }, l.createElement(T._35, {
                        padding: {
                            y: .5,
                            x: 1
                        },
                        margin: {
                            left: .5
                        }
                    }, Object(c.d)("Leave", "RoomsMemberOptions")))
                }, t = s.__decorate([Object(m.a)(ti, {
                    options: function(e) {
                        return {
                            variables: {
                                id: e.channelID
                            }
                        }
                    }
                })], t)
            }(l.Component),
            ii = n("QY1R"),
            ai = (n("nhCy"), "Stream Chat"),
            ri = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        shouldShowRoomCreator: !1
                    }, t.onPickChat = function() {
                        t.props.handleRoomSelect(ai, ai)
                    }, t.showRoomCreator = function() {
                        t.setState({
                            shouldShowRoomCreator: !0
                        })
                    }, t.hideRoomCreator = function() {
                        t.setState({
                            shouldShowRoomCreator: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    if (!this.props.data.loading && !this.props.data.error && this.props.data.user) {
                        var e = this.props.data.user.channelRooms.length;
                        if (this.props.sessionUser) e += this.props.sessionUser.id === this.props.channelID ? 1 : 0, e += !this.props.data.user.self.isChannelMember ? 1 : 0;
                        this.props.latencyTracking.reportInteractive(e)
                    }
                }, t.prototype.render = function() {
                    if (this.props.data.loading && !this.props.data.user) return l.createElement(T._35, {
                        "data-test-selector": "room-picker-loading-state",
                        attachRight: !0,
                        className: "room-picker",
                        background: T.n.Alt,
                        border: !0,
                        position: T._15.Absolute,
                        elevation: 2,
                        zIndex: T._62.Above
                    }, l.createElement(T._8, {
                        key: "chat",
                        margin: {
                            y: .5
                        }
                    }, l.createElement(T._6, {
                        onClick: this.onPickChat,
                        alpha: !0
                    }, l.createElement(T._8, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        display: T.R.Flex
                    }, l.createElement(T._14, {
                        width: 160
                    })))), l.createElement(T._35, {
                        background: T.n.Alt2,
                        padding: {
                            left: 2,
                            right: 1
                        },
                        fullWidth: !0,
                        borderTop: !0,
                        borderBottom: !0
                    }, l.createElement(T._14, {
                        width: 80
                    })), l.createElement(T._8, {
                        padding: {
                            y: .5,
                            x: 2
                        }
                    }, l.createElement(T._14, {
                        width: 120
                    }), l.createElement(T._14, {
                        width: 160
                    })));
                    if (this.props.data.error) return l.createElement(T._8, null);
                    var e = this.props.isChannelLive ? T.I.Live : T.I.Offline;
                    return l.createElement(T._35, {
                        attachRight: !0,
                        className: "room-picker",
                        background: T.n.Alt,
                        border: !0,
                        position: T._15.Absolute,
                        elevation: 2,
                        zIndex: T._62.Above,
                        fullWidth: !0
                    }, l.createElement(T._8, {
                        margin: {
                            y: .5
                        }
                    }, l.createElement(T._6, {
                        "data-test-selector": "stream-chat-room-picker-option",
                        onClick: this.onPickChat
                    }, l.createElement(T._8, {
                        className: "room-picker__label " + (this.props.activeRoomID === ai ? "room-picker__label--active-main" : ""),
                        key: ai,
                        padding: {
                            y: .5,
                            x: 2
                        },
                        display: T.R.Flex
                    }, l.createElement(T._35, {
                        textAlign: T._45.Center,
                        padding: {
                            left: .5,
                            right: 1
                        }
                    }, l.createElement(T.G, {
                        status: e
                    })), l.createElement(T._8, null, l.createElement("span", null, Object(c.d)("Stream Chat", "RoomPicker")))))), this.getRoomNumberHeader(), this.renderRoomCreator(), this.renderRoomOnboarding(), this.getExistingRoomsList(), this.getUpsellRoomsList(), this.renderParticipationCTA())
                }, t.prototype.getExistingRoomsList = function() {
                    var e = this,
                        t = this.props.data.user.channelRooms;
                    if (0 === t.length) return null;
                    var n = t.map(function(t) {
                        return l.createElement(Yn, {
                            channelID: e.props.channelID,
                            isActiveRoom: t.id === e.props.activeRoomID,
                            key: "room-picker-option-" + t.id,
                            roomID: t.id,
                            roomName: t.name,
                            handleClick: e.props.handleRoomSelect,
                            sessionUser: e.props.sessionUser
                        })
                    });
                    return l.createElement(T._8, {
                        margin: {
                            y: .5
                        }
                    }, n)
                }, t.prototype.getUpsellRoomsList = function() {
                    if (this.props.sessionUser && this.props.sessionUser.id === this.props.channelID) {
                        var e = this.props.data.user,
                            t = e.channelRooms,
                            n = e.maxAllowedChannelRooms,
                            i = [];
                        if (n && t.length < n) {
                            var a = !Vn(Bn.Subscriber),
                                r = !Vn(Bn.Moderator);
                            t.forEach(function(e) {
                                e.name !== Object(c.d)("subscriber-room", "RoomPicker_SubUpsellCheck") && e.minimumAllowedRole !== V.b.Subscriber || (a = !1), e.name !== Object(c.d)("moderator-room", "RoomPicker_ModUpsellCheck") && e.minimumAllowedRole !== V.b.Moderator || (r = !1)
                            }), a && this.props.data.user.subscriptionProducts.length > 0 && i.push(l.createElement(Jn, {
                                type: Bn.Subscriber,
                                key: "sub-upsell"
                            })), r && i.push(l.createElement(Jn, {
                                type: Bn.Moderator,
                                key: "mod-upsell"
                            }))
                        }
                        return l.createElement(T._8, null, i)
                    }
                }, t.prototype.getRoomNumberHeader = function() {
                    var e, t = this.props.data.user.channelRooms.length,
                        n = !this.props.data.user.maxAllowedChannelRooms || t >= this.props.data.user.maxAllowedChannelRooms;
                    return e = 0 === t ? Object(c.d)("NO ROOMS YET.", "RoomPicker") : 1 === t ? Object(c.d)("1 ROOM", "RoomPicker") : Object(c.d)("{numRooms} ROOMS", {
                        numRooms: t
                    }, "RoomPicker"), l.createElement(T._35, {
                        "data-test-selector": "room-picker-header",
                        className: "room-picker__header",
                        background: T.n.Alt2,
                        display: T.R.Flex,
                        alignItems: T.c.Center,
                        justifyContent: T._7.Between,
                        padding: {
                            left: 2,
                            right: 1
                        },
                        fullWidth: !0,
                        borderTop: !0,
                        borderBottom: !0
                    }, l.createElement(T.Q, {
                        type: T._49.Strong,
                        color: T.K.Alt2
                    }, e), this.renderRoomNumHeaderButton(n))
                }, t.prototype.renderParticipationCTA = function() {
                    var e = this.props.data.user.displayName;
                    return this.props.sessionUser ? 0 === this.props.data.user.channelRooms.length && this.props.channelID !== this.props.sessionUser.id ? l.createElement(T._8, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        margin: {
                            top: .5,
                            bottom: 1
                        }
                    }, l.createElement(T.Q, {
                        color: T.K.Alt2
                    }, Object(c.d)("{displayName} hasn't created any rooms yet!", {
                        displayName: e
                    }, "RoomPicker"))) : this.props.data.user.self.isChannelMember ? void 0 : l.createElement(T._8, {
                        padding: {
                            y: .5,
                            x: 2
                        },
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(T.Q, null, Object(c.d)("More chat in your chat. You will get notifications when you are @mentioned.", "RoomPicker")), l.createElement(T._8, {
                        margin: {
                            top: .5
                        }
                    }, l.createElement(Pn, {
                        channelID: this.props.channelID
                    }))) : l.createElement(T._8, {
                        "data-test-selector": "room-picker-logged-out-cta",
                        padding: {
                            y: .5,
                            x: 2
                        },
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(T.Q, {
                        color: T.K.Alt
                    }, Object(c.d)("Sign up/Log in to access {displayName}'s Rooms", {
                        displayName: e
                    }, "RoomPicker")))
                }, t.prototype.renderRoomCreator = function() {
                    if (this.state.shouldShowRoomCreator) return l.createElement(Qn, {
                        onCloseRoomCreator: this.hideRoomCreator
                    })
                }, t.prototype.renderRoomOnboarding = function() {
                    var e = this.props.sessionUser && this.props.sessionUser.id === this.props.channelID,
                        t = this.props.data.user.channelRooms.length,
                        n = !this.props.data.user.maxAllowedChannelRooms || t >= this.props.data.user.maxAllowedChannelRooms;
                    if (e && 0 === t && !n) return l.createElement(T._35, {
                        background: T.n.Alt,
                        color: T.K.Alt2,
                        padding: {
                            bottom: 2,
                            top: 1
                        },
                        textAlign: T._45.Center
                    }, l.createElement(T._8, {
                        margin: {
                            y: 1
                        },
                        fullWidth: !0
                    }, l.createElement("img", {
                        src: jn.a,
                        height: "50"
                    })), l.createElement(T._8, {
                        padding: {
                            x: 5
                        }
                    }, l.createElement(T.Q, null, Object(c.d)("Rooms let your community bond in spaces you create! Get started right here...", "RoomPicker"))))
                }, t.prototype.renderRoomNumHeaderButton = function(e) {
                    if (this.props.sessionUser) {
                        var t, n = this.props.sessionUser.id === this.props.channelID;
                        if (n && !this.state.shouldShowRoomCreator) {
                            if (t = l.createElement(T.v, {
                                    onClick: this.showRoomCreator,
                                    disabled: e,
                                    type: T.B.Text
                                }, l.createElement(T._8, {
                                    display: T.R.Flex,
                                    alignItems: T.c.Center
                                }, l.createElement(T._8, {
                                    padding: {
                                        right: .5
                                    }
                                }, l.createElement(T._24, {
                                    asset: T._25.Plus,
                                    height: 10
                                })), Object(c.d)("Create Room", "RoomPicker"))), e && this.props.data.user.maxAllowedChannelRooms) {
                                var i = this.props.data.user.maxAllowedChannelRooms,
                                    a = Object(c.d)("You can have a maximum of {numMaxRooms} rooms", {
                                        numMaxRooms: i
                                    }, "RoomPicker");
                                t = l.createElement(T._52, {
                                    direction: T._54.Left,
                                    label: a,
                                    width: 160
                                }, t)
                            }
                        } else n || (t = l.createElement(ni, {
                            channelID: this.props.channelID,
                            isLoggedIn: this.props.isLoggedIn
                        }));
                        return t
                    }
                }, t = s.__decorate([Object(m.a)(ii, {
                    options: function(e) {
                        return {
                            fetchPolicy: "cache-and-network",
                            variables: {
                                id: e.channelID,
                                isBroadcaster: !!e.sessionUser && e.sessionUser.id === e.channelID
                            }
                        }
                    }
                }), Object(k.d)("RoomPicker")], t)
            }(l.Component);
        var oi, si = Object(i.b)(function(e) {
            return {
                sessionUser: Object(r.c)(e),
                isLoggedIn: Object(r.d)(e)
            }
        })(ri);
        ! function(e) {
            e.MentionPill = "mentionPill", e.ViewRooms = "viewRooms"
        }(oi || (oi = {}));
        var li = function(e) {
                return c.l.get("hasSeenRoomsOnboarding", {})[e] || !1
            },
            di = function(e) {
                var t;
                c.l.set("hasSeenRoomsOnboarding", s.__assign({}, c.l.get("hasSeenRoomsOnboarding", {}), ((t = {})[e] = !0, t)))
            };
        var ci = n("BKhP"),
            ui = n("go0B"),
            mi = (n("w0qa"), "Stream Chat"),
            pi = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        activeRoomID: mi,
                        activeRoomName: mi,
                        hasSeenGeneralOnboarding: li(oi.ViewRooms),
                        isActiveRoomDeleted: !1,
                        showRoomPicker: !1
                    }, t.renderOnboardingBalloon = function() {
                        var e = t.props.data;
                        if (t.state.showRoomPicker || t.state.hasSeenGeneralOnboarding) return null;
                        if (!e || !e.user) return null;
                        var n = t.props.sessionUser && t.props.sessionUser.id === e.user.id;
                        return e.user.channelRooms && 0 === e.user.channelRooms.length && !n ? null : l.createElement(T.q, {
                            direction: T.r.BottomRight,
                            offsetX: "1rem",
                            show: !0,
                            size: T.s.Small
                        }, l.createElement(u.a, {
                            onClickOut: t.dismissGeneralOnboarding
                        }, l.createElement(T._8, {
                            padding: 3,
                            textAlign: T._45.Center
                        }, l.createElement("img", {
                            src: Object(b.f)("508650", 3),
                            width: "28"
                        }), l.createElement(T._8, {
                            margin: {
                                y: 1
                            }
                        }, l.createElement(T.Q, {
                            color: T.K.Alt2
                        }, Object(c.d)("Rooms help you keep the conversation going", "RoomSelector"))), l.createElement(T.v, {
                            onClick: t.headerClick
                        }, Object(c.d)("View rooms", "RoomSelector")))))
                    }, t.isChannelLive = function(e) {
                        return !(e.error || !e.user) && !!(e.user.stream && e.user.stream.id || e.user.hosting && e.user.hosting.id)
                    }, t.headerClick = function() {
                        t.dismissGeneralOnboarding(), t.setState(function(e) {
                            return {
                                showRoomPicker: !e.showRoomPicker
                            }
                        })
                    }, t.handleRoomSelect = function(e, n) {
                        t.setState({
                            activeRoomID: e,
                            activeRoomName: n,
                            isActiveRoomDeleted: !1,
                            showRoomPicker: !1
                        })
                    }, t.onActiveRoomDelete = function() {
                        t.state.activeRoomID !== mi && t.setState({
                            isActiveRoomDeleted: !0
                        })
                    }, t.goToStreamChat = function() {
                        t.handleRoomSelect(mi, mi)
                    }, t.dismissGeneralOnboarding = function() {
                        t.setState({
                            hasSeenGeneralOnboarding: !0
                        }), di(oi.ViewRooms)
                    }, t.closeRoomPicker = function() {
                        t.setState({
                            showRoomPicker: !1
                        })
                    }, t
                }
                return s.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.state.showRoomPicker && this.dismissGeneralOnboarding()
                }, t.prototype.componentDidMount = function() {
                    this.props.data.loading || this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentDidUpdate = function() {
                    this.props.data.loading || this.props.latencyTracking.reportInteractive()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    if (this.props.data && !e.isPopout && (this.props.data.loading || this.props.channelLogin !== e.channelLogin) && e.data.user && e.data.user.channelRooms) {
                        var n = this.isChannelLive(e.data),
                            i = 0 !== e.data.user.channelRooms.length;
                        this.setState({
                            showRoomPicker: !n && i && !e.isEmbedded
                        }), n || this.dismissGeneralOnboarding()
                    }
                    if (this.props.data && e.data && this.props.data.user && e.data.user && this.props.data.user.self && e.data.user.self && !e.data.user.self.isChannelMember && this.props.data.user.self.isChannelMember !== e.data.user.self.isChannelMember && this.goToStreamChat(), this.props.sessionUser && this.props.routedRoomName && this.props.data && this.props.data.loading && !this.props.data.user && !e.data.loading && e.data.user && e.data.user.channelRooms && e.data.user.self.isChannelMember) {
                        var a = e.data.user.channelRooms.find(function(e) {
                            return e.name === t.props.routedRoomName
                        });
                        a && this.setState({
                            activeRoomID: a.id,
                            activeRoomName: a.name
                        })
                    } else this.props.channelLogin !== e.channelLogin && this.state.activeRoomID !== mi && this.goToStreamChat()
                }, t.prototype.render = function() {
                    return l.createElement(T._8, {
                        fullWidth: !0,
                        fullHeight: !0,
                        display: T.R.Flex,
                        flexDirection: T.T.Column,
                        flexGrow: 1,
                        flexWrap: T.U.NoWrap,
                        zIndex: T._62.Default,
                        position: T._15.Relative
                    }, this.renderHeader(), this.renderRoomPicker(), this.renderHiddenState(), this.renderChat(), this.renderCurrentRoom())
                }, t.prototype.renderChat = function() {
                    if (this.props.isHidden && !this.props.isPopout) return null;
                    var e = this.state.activeRoomID !== mi;
                    return l.createElement(f.a, {
                        channelLogin: this.props.channelLogin,
                        clientID: c.a.authSettings.clientID,
                        isBackground: e,
                        isEmbedded: this.props.isEmbedded,
                        isPopout: this.props.isPopout,
                        closeRoomPicker: this.closeRoomPicker,
                        onHostingChange: this.props.onHostingChange,
                        hostedChannelDisplayName: this.props.hostedChannelDisplayName
                    })
                }, t.prototype.renderCurrentRoom = function() {
                    return this.props.isHidden && !this.props.isPopout || !this.props.data.user || this.state.activeRoomID === mi ? null : l.createElement(Mn, {
                        isDeleted: this.state.isActiveRoomDeleted,
                        isPopout: this.props.isPopout,
                        channelID: this.props.data.user.id,
                        roomID: this.state.activeRoomID,
                        closeRoomPicker: this.closeRoomPicker,
                        handleStreamChatClick: this.goToStreamChat,
                        onDelete: this.onActiveRoomDelete,
                        isHostMode: !!this.props.hostedChannelDisplayName
                    })
                }, t.prototype.renderHeader = function() {
                    var e = l.createElement(T._8, {
                        display: T.R.Flex,
                        alignItems: T.c.Center
                    }, !this.state.showRoomPicker && Object(c.d)("Rooms", "RoomSelector"), l.createElement(T._8, {
                        display: T.R.Flex,
                        alignItems: T.c.Center
                    }, this.renderTotalUnreadMentionCount(), !this.state.showRoomPicker && l.createElement(T._8, {
                        padding: {
                            left: .5
                        },
                        display: T.R.Flex
                    }, l.createElement(T._24, {
                        asset: T._25.RoomList
                    })), this.state.showRoomPicker && l.createElement(T.w, {
                        ariaLabel: "RoomListOpen",
                        icon: T._25.RoomListOpen,
                        "data-test-selector": "close-room-picker-button",
                        onClick: this.headerClick,
                        blurAfterClick: !0
                    })));
                    this.state.showRoomPicker || (e = l.createElement(T._8, {
                        position: T._15.Relative
                    }, l.createElement(T.v, {
                        "data-test-selector": "open-room-picker-button",
                        onClick: this.headerClick,
                        type: T.B.Text
                    }, e), this.renderOnboardingBalloon())), this.props.isEmbedded && (e = l.createElement(T._8, null));
                    var t = l.createElement(T._35, {
                        className: "room-selector__header",
                        background: this.state.showRoomPicker ? T.n.Alt : T.n.Alt2,
                        borderLeft: !this.props.isEmbedded,
                        borderRight: !this.props.isEmbedded,
                        borderBottom: !0,
                        display: T.R.Flex,
                        fullWidth: !0,
                        justifyContent: T._7.Between,
                        alignItems: T.c.Center,
                        flexShrink: 0,
                        padding: {
                            left: 2,
                            right: 1
                        }
                    }, l.createElement("div", {
                        id: v.a
                    }, this.renderActiveRoomName()), e);
                    return this.state.showRoomPicker && (t = l.createElement(T._8, {
                        className: "room-selector__open-header-wrapper"
                    }, t)), t
                }, t.prototype.renderRoomPicker = function() {
                    if (this.state.showRoomPicker && this.props.data.user && this.props.firstPageLoaded) return l.createElement(u.a, {
                        onClickOut: this.closeRoomPicker
                    }, l.createElement(si, {
                        channelID: this.props.data.user.id,
                        handleRoomSelect: this.handleRoomSelect,
                        isChannelLive: this.isChannelLive(this.props.data),
                        activeRoomID: this.state.activeRoomID
                    }))
                }, t.prototype.renderActiveRoomName = function() {
                    return this.state.showRoomPicker ? l.createElement(T.Q, {
                        color: T.K.Alt
                    }, Object(c.d)("Rooms", "RoomSelectorOpened")) : this.state.activeRoomName === mi || this.state.isActiveRoomDeleted ? l.createElement(T.Q, {
                        color: T.K.Alt
                    }, this.state.activeRoomName) : l.createElement(le, {
                        roomID: this.state.activeRoomID,
                        roomName: this.state.activeRoomName
                    })
                }, t.prototype.renderTotalUnreadMentionCount = function() {
                    var e = this,
                        t = this.props.data;
                    if (t.error || !t.user || !t.user.self || !t.user.self.isChannelMember || !t.user.channelRooms) return null;
                    var n = t.user.channelRooms.reduce(function(t, n) {
                        return n.self.isMuted || n.id === e.state.activeRoomID ? t : t + n.self.unreadMentionCount
                    }, 0);
                    return n > 0 ? l.createElement(T._8, {
                        display: T.R.InlineBlock,
                        padding: {
                            left: .5
                        },
                        position: T._15.Relative
                    }, l.createElement(T._12, {
                        label: n.toString(),
                        type: T._13.Alert
                    })) : void 0
                }, t.prototype.renderHiddenState = function() {
                    return !this.props.isHidden || this.props.isPopout ? null : l.createElement(T._35, {
                        alignItems: T.c.Center,
                        background: T.n.Alt2,
                        borderLeft: !0,
                        "data-test-selector": "room-selector-hidden-state",
                        display: T.R.Flex,
                        flexDirection: T.T.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: T._7.Center,
                        color: T.K.Base,
                        position: T._15.Relative
                    }, l.createElement(T._8, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(T.Q, {
                        fontSize: T.V.Size5
                    }, Object(c.d)("Chat is hidden.", "RoomSelector"))), l.createElement(T.v, {
                        onClick: this.props.onChatUnhide,
                        "data-a-target": "show-chat-button"
                    }, Object(c.d)("Show Chat", "RoomSelector")))
                }, t
            }(l.Component),
            hi = Object(d.compose)(Object(m.a)(ui, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.channelLogin
                        }
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: ui,
                    skip: !e.data.user,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(g.f)("" + (e.data.user && e.data.user.id)),
                    types: [h.PubsubMessageType.ChatRoomCreated, h.PubsubMessageType.ChatRoomDeleted],
                    mutator: function(e, t) {
                        if (e.type === h.PubsubMessageType.ChatRoomDeleted && t.user && t.user.channelRooms) return t.user.channelRooms = t.user.channelRooms.filter(function(t) {
                            return t.id !== e.data.room.room_id
                        }), t;
                        if (e.type === h.PubsubMessageType.ChatRoomCreated && t.user && t.user.channelRooms) {
                            var n = function(e) {
                                return {
                                    id: e.data.room.room_id,
                                    minimumAllowedRole: e.data.room.minimum_allowed_role,
                                    name: e.data.room.name,
                                    topic: e.data.room.topic,
                                    isPreviewable: e.data.room.is_previewable,
                                    self: {
                                        isArchived: !1,
                                        isMuted: !1,
                                        isUnread: !1,
                                        unreadMentionCount: 0,
                                        __typename: "RoomView"
                                    },
                                    __typename: "Room"
                                }
                            }(e);
                            return t.user.channelRooms.push(n), t
                        }
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: ci,
                    skip: !e.sessionUser || !e.data.user,
                    variables: {
                        channelID: e.data.user && e.data.user.id,
                        userID: e.sessionUser && e.sessionUser.id
                    },
                    topic: Object(g.g)("" + (e.sessionUser && e.sessionUser.id)),
                    type: h.PubsubMessageType.ChatRoomsUserModAction,
                    mutator: function(e, t) {
                        return e.type === h.PubsubMessageType.ChatRoomsUserModAction && (t.chatRoomBanStatus = {
                            isPermanent: !e.data.expires_at,
                            __typename: "ChatRoomBanStatus"
                        }), t
                    }
                }
            }), Object(p.a)(function(e) {
                return {
                    query: ui,
                    skip: !e.sessionUser || !e.data.user,
                    variables: {
                        login: e.channelLogin
                    },
                    topic: Object(g.g)("" + (e.sessionUser && e.sessionUser.id)),
                    types: [h.PubsubMessageType.UserMention, h.PubsubMessageType.ChatRoomsRoomViewUpdated],
                    mutator: function(e, t) {
                        return e.type === h.PubsubMessageType.UserMention && t.user && t.user.channelRooms && (t.user.channelRooms = t.user.channelRooms.map(function(t) {
                            return e = e, t.id === e.data.room_id && (t.self.unreadMentionCount += 1), t
                        })), e.type === h.PubsubMessageType.ChatRoomsRoomViewUpdated && t.user && (e = e, t.user.self.isModerator = e.data.room_view.permissions.moderate), t
                    }
                }
            }), Object(k.d)("RoomSelector"))(pi);
        var gi = Object(i.b)(function(e) {
            return {
                firstPageLoaded: e.session.firstPageLoaded,
                isHidden: e.chat.isHidden,
                sessionUser: Object(r.c)(e)
            }
        }, function(e) {
            return Object(a.b)({
                onChatUnhide: function() {
                    return o.T()
                }
            }, e)
        })(hi);
        n.d(t, "a", function() {
            return gi
        })
    },
    "4hnS": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "LeaveRoomsPrompt_LeaveRooms"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "LeaveChannelRoomsInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "leaveChannelRooms"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 147
            }
        };
        n.loc.source = {
            body: "mutation LeaveRoomsPrompt_LeaveRooms($input: LeaveChannelRoomsInput!) {\nleaveChannelRooms(input: $input) {\nchannel {\nself {\nisChannelMember\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "54rb": function(e, t) {},
    "56e8": function(e, t) {},
    "576g": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "cheer"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "cheer"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "prefix"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "tiers"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "color"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "canCheer"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "images"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "url"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "theme"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isAnimated"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "dpiScale"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "fragment cheer on User {\ncheer {\nid\nemotes {\nid\nprefix\ntype\ntiers {\nid\nbits\ncolor\ncanCheer\nimages {\nid\nurl\ntheme\nisAnimated\ndpiScale\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5Dex": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsPinnedCheerV2_LeaderboardEntry"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "profileImageWidth"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "profileImageWidth"
                                        }
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 168
            }
        };
        n.loc.source = {
            body: "query BitsPinnedCheerV2_LeaderboardEntry($userID: ID! $profileImageWidth: Int!) {\nuser(id: $userID) {\nid\ndisplayName\nlogin\nprofileImageURL(width:$profileImageWidth)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "5k1t": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e, t, n) {
            return {
                type: i,
                threadID: e,
                afterMessageID: n,
                content: t
            }
        };
        var i = "whisperNotifications.WHISPER_THREAD_NOTIFIED"
    },
    "5s0/": function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("+xm8"),
            o = n("f2i/"),
            s = n("uXDg"),
            l = n("QPF3"),
            d = n("TToO"),
            c = n("GiK3"),
            u = n("6sO2"),
            m = n("CSlQ"),
            p = n("Odds"),
            h = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClick = function() {
                        t.props.threadID ? (t.props.onClick && t.props.onClick(), t.props.openThread(t.props.threadID)) : t.props.login()
                    }, t
                }
                return d.__extends(t, e), t.prototype.render = function() {
                    var e = !this.props.isPopout,
                        t = Object(u.d)("Whisper", "WhisperButton"),
                        n = c.createElement(p.v, {
                            disabled: !e,
                            onClick: this.handleClick,
                            "data-a-target": "usercard-whisper-button",
                            "data-test-selector": "whisper-button"
                        }, t);
                    return e ? n : c.createElement(p._52, {
                        align: p._53.Left,
                        direction: p._54.Top,
                        label: Object(u.d)("Whispers are disabled in popout chat", "WhispersDisabledText")
                    }, n)
                }, t = d.__decorate([Object(m.d)("WhisperButton", {
                    autoReportInteractive: !0
                })], t)
            }(c.Component);
        var g = Object(i.b)(null, function(e) {
            return Object(a.b)({
                login: function() {
                    return Object(o.f)(r.a.WhisperButton)
                },
                openThread: function(e) {
                    return Object(s.l)({
                        collapsed: !1,
                        threadID: e,
                        ignoreCollapseIfOpen: !0
                    }, Object(l.a)())
                }
            }, e)
        })(h);
        n.d(t, "a", function() {
            return g
        })
    },
    "5vPJ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("GxDs"),
            l = n("pexS"),
            d = {
                isTimedOut: !1
            },
            c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = d, t.timeoutID = null, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    this.props.data.clip || (this.timeoutID = setTimeout(function() {
                        e.setState({
                            isTimedOut: !0
                        })
                    }, 5e3))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    !this.props.data.clip && e.data.clip && (this.timeoutID && (clearTimeout(this.timeoutID), this.timeoutID = null), this.setState({
                        isTimedOut: !1
                    }))
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.clip,
                        n = e.error,
                        i = e.loading;
                    return n || this.state.isTimedOut ? a.createElement(s.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "ClipsChatCard"),
                            description: Object(r.d)("We couldn't find that Clip", "ClipsChatCard")
                        }
                    }) : i || !t ? a.createElement(s.a, null) : a.createElement(s.a, {
                        data: {
                            title: t.title || (t.broadcaster ? Object(r.d)("Clip of {broadcaster}", {
                                broadcaster: t.broadcaster.displayName
                            }, "ClipsChatCard") : ""),
                            description: t.curator ? Object(r.d)("Clipped by {curator}", {
                                curator: t.curator.displayName
                            }, "ClipsChatCard") : "",
                            previewImageURL: t.thumbnailURL,
                            contentURL: t.url
                        }
                    })
                }, t
            }(a.Component),
            u = function(e) {
                return {
                    variables: {
                        slug: e.slug
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: e.forceNetworkRequest ? "cache-first" : "cache-only"
                }
            },
            m = Object(o.a)(l, {
                options: u
            })(c);
        n.d(t, !1, function() {
            return 5e3
        }), n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return d
        }), n.d(t, !1, function() {
            return c
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, "a", function() {
            return m
        })
    },
    "67ft": function(e, t) {},
    "6Agf": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Admin = "admin", e.GlobalMod = "global_mod", e.Moderator = "mod", e.Owner = "owner", e.Staff = "staff", e.Subscriber = "subscriber", e.User = ""
            }(i || (i = {}))
    },
    "6O9f": function(e, t) {},
    "6Rwu": function(e, t) {},
    "6WAQ": function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e.Archive = "ARCHIVE", e.Highlight = "HIGHLIGHT", e.Upload = "UPLOAD", e.WatchParty = "WATCH_PARTY", e.PastPremiere = "PAST_PREMIERE", e.PremiereUpload = "PREMIERE_UPLOAD"
            }(i || (i = {}))
    },
    "6d2v": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatLine_SubsOnlyUpsell_UserSubscriptionProducts"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 121
            }
        };
        n.loc.source = {
            body: "query ChatLine_SubsOnlyUpsell_UserSubscriptionProducts($id: ID!) {\nuser(id: $id) {\nid\nsubscriptionProducts {\nid\nurl\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "6vcJ": function(e, t) {},
    "7B9K": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "UserEmotes"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emoteSets"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 76
            }
        };
        n.loc.source = {
            body: "query UserEmotes {\ncurrentUser {\nid\nemoteSets {\nid\nemotes {\nid\ntoken\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7LIQ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("GiK3"),
            o = n("6sO2"),
            s = n("CSlQ"),
            l = n("Odds"),
            d = (n("VkpB"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = a("emote-picker__emote-link", {
                            "emote-picker__emote-link--locked": this.props.locked
                        }),
                        n = r.createElement(l._35, {
                            alignItems: l.c.Center,
                            background: l.n.Overlay,
                            borderRadius: l.t.Small,
                            className: "emote-picker__emote-lock",
                            color: l.K.Overlay,
                            display: l.R.InlineFlex,
                            justifyContent: l._7.Center,
                            position: l._15.Absolute,
                            zIndex: l._62.Above
                        }, r.createElement(l._24, {
                            asset: l._25.Lock,
                            height: 10,
                            width: 10
                        })),
                        i = this.props.emoteSet.emotes.map(function(i, a) {
                            if (!i.srcSet) return null;
                            var d = r.createElement("img", {
                                className: "emote-picker__emote-image",
                                srcSet: i.srcSet,
                                alt: i.displayName
                            });
                            if (0 === a) {
                                var c = i.srcSet.split(" ")[0];
                                d = r.createElement(s.b, {
                                    className: "emote-picker__emote-image",
                                    src: c,
                                    srcSet: i.srcSet,
                                    alt: i.displayName
                                })
                            }
                            return r.createElement("div", {
                                key: i.id,
                                className: "emote-picker__emote"
                            }, r.createElement(l._52, {
                                label: i.displayName || Object(o.d)("Emote", "EmoteGrid"),
                                direction: l._54.Bottom
                            }, r.createElement(l._2, {
                                display: l.R.Flex,
                                alignItems: l.c.Center,
                                justifyContent: l._7.Center
                            }, r.createElement("button", {
                                className: t,
                                "aria-label": i.displayName,
                                name: i.displayName,
                                onClick: e.props.locked ? void 0 : e.handleClickEmote.bind(e, i.id),
                                "data-a-target": i.displayName
                            }, r.createElement("figure", {
                                className: "emote-picker__emote-figure"
                            }, e.props.locked ? n : null, d)))))
                        });
                    return r.createElement(l._8, {
                        display: l.R.Flex,
                        flexWrap: l.U.Wrap,
                        justifyContent: l._7.Center
                    }, i)
                }, t.prototype.handleClickEmote = function(e, t) {
                    this.props.onClickEmote && this.props.onClickEmote(t.currentTarget.name, e)
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return d
        })
    },
    "7LVu": function(e, t) {},
    "7MbV": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_OrbisPresetText"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "platform"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "InlineFragment",
                                                typeCondition: {
                                                    kind: "NamedType",
                                                    name: {
                                                        kind: "Name",
                                                        value: "PlayStation"
                                                    }
                                                },
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "title"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "presetText"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 146
            }
        };
        n.loc.source = {
            body: "query Chat_OrbisPresetText ($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\nplatform {\n... on PlayStation {\ntitle {\npresetText\n}\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "7X7f": function(e, t) {},
    "7iNp": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "FriendButton"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "friendButtonFragment"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 154
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nquery FriendButton($id: ID!) {\nuser(id: $id) {\nid\n...friendButtonFragment\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "7miU": function(e, t, n) {
        "use strict";
        var i = n("P0T5");
        n.d(t, "a", function() {
            return i.b
        }), n.d(t, "b", function() {
            return i.c
        }), n.d(t, "c", function() {
            return i.d
        }), n.d(t, "d", function() {
            return i.e
        }), n.d(t, "e", function() {
            return i.f
        }), n.d(t, "f", function() {
            return i.g
        }), n.d(t, "g", function() {
            return i.h
        }), n.d(t, "h", function() {
            return i.i
        }), n.d(t, "i", function() {
            return i.j
        }), n.d(t, "j", function() {
            return i.k
        }), n.d(t, "k", function() {
            return i.m
        }), n.d(t, "l", function() {
            return i.p
        }), n.d(t, "m", function() {
            return i.q
        })
    },
    "7t3k": function(e, t) {},
    "7vYp": function(e, t) {},
    "8RKZ": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("GiK3"),
            o = n("qe65"),
            s = n("Odds"),
            l = (n("2rJy"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onImageLoad = function() {
                        n.setState({
                            imageLoaded: !0
                        })
                    }, n.onMouseOver = function() {
                        n.setState({
                            isHovering: !0
                        })
                    }, n.onMouseOut = function() {
                        n.setState({
                            isHovering: !1
                        })
                    }, n.renderImage = function() {
                        var e = null,
                            t = a("chat-image", {
                                "chat-image__animated": !!n.props.cheerText && n.state.imageLoaded
                            }, n.props.className);
                        if (n.props.srcSet.themed) e = r.createElement(s._2, {
                            display: n.state.imageLoaded ? s.R.InlineBlock : s.R.Hide
                        }, r.createElement(o.a, {
                            alt: n.props.alt,
                            className: t,
                            defaultRes: n.props.srcKey,
                            onLoad: n.onImageLoad,
                            onMouseOver: n.onMouseOver,
                            onMouseOut: n.onMouseOut,
                            sources: n.props.srcSet
                        }));
                        else {
                            for (var i = [], l = 0, d = Object.keys(n.props.srcSet.sources); l < d.length; l++) {
                                var c = d[l];
                                i.push(n.props.srcSet.sources[c] + " " + c)
                            }
                            e = r.createElement(s._2, {
                                display: n.state.imageLoaded ? s.R.InlineBlock : s.R.Hide
                            }, r.createElement("img", {
                                className: t,
                                onLoad: n.onImageLoad,
                                onMouseOver: n.onMouseOver,
                                onMouseOut: n.onMouseOut,
                                src: n.props.srcSet.sources[n.props.srcKey],
                                srcSet: i.join(","),
                                alt: n.props.alt
                            }))
                        }
                        return e
                    }, n.renderPlaceholder = function() {
                        return n.state.imageLoaded ? null : r.createElement(s._2, {
                            display: s.R.InlineBlock
                        }, r.createElement(s.Q, {
                            type: s._49.Span,
                            className: "chat-image__placeholder",
                            align: s._59.Top
                        }, r.createElement(s._14, {
                            height: 28,
                            width: 28
                        })))
                    }, n.state = {
                        imageLoaded: !1,
                        isHovering: !1
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e;
                    return e = this.state.isHovering && this.state.imageLoaded ? r.createElement(s._52, {
                        direction: this.props.tooltipDirection || s._54.Top,
                        label: this.props.alt,
                        display: s.R.Inline,
                        offsetY: "0.9rem",
                        "data-a-target": "emote-name"
                    }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText) : r.createElement("span", {
                        "data-a-target": "emote-name"
                    }, this.renderPlaceholder(), this.renderImage(), this.props.cheerText), this.props.cheerText ? r.createElement(s.Q, {
                        type: s._49.Span,
                        noWrap: !0
                    }, e) : e
                }, t
            }(r.Component));
        n.d(t, "a", function() {
            return l
        })
    },
    "90yy": function(e, t) {},
    "91zu": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "IncomingRaidLine_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "50"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 140
            }
        };
        n.loc.source = {
            body: "query IncomingRaidLine_Channel($channelLogin: String!) {\nchannel: user(login: $channelLogin) {\nid\ndisplayName\nprofileImageURL(width: 50)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "9RMu": function(e, t, n) {
        "use strict";

        function i(e) {
            return {
                id: "" + e.id,
                start: e.start,
                end: e.end
            }
        }

        function a(e) {
            return {
                from: e.start,
                to: e.end,
                emoteID: e.id,
                id: e.id + ";" + e.start + ";" + e.end,
                setID: "0",
                __typename: "EmbeddedEmote"
            }
        }
        t.c = function(e) {
            return {
                __typename: "WhisperMessageEdge",
                cursor: "" + e.data_object.id,
                node: {
                    __typename: "WhisperMessage",
                    id: e.data_object.message_id,
                    sentAt: new Date(1e3 * e.data_object.sent_ts).toISOString(),
                    editedAt: null,
                    deletedAt: null,
                    content: {
                        __typename: "MessageBody",
                        content: e.data_object.body,
                        emotes: e.data_object.tags.emotes.map(function(e) {
                            var t = i(e);
                            return a(t)
                        })
                    },
                    from: {
                        __typename: "User",
                        id: "" + e.data_object.from_id
                    }
                }
            }
        }, t.b = function(e) {
            return e.map(function(e) {
                return a(i(e))
            })
        }, t.a = a
    },
    "9Xbf": function(e, t) {},
    "9fnI": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 149
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/cheer-fragment.gql"\nquery ChatList_Bits($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\n...cheer\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("576g").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "9u8h": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("Aj/L"),
            o = function() {
                function e() {}
                return e.get = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "GET"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.getOrThrow = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                        method: "GET"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.put = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "PUT"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.putOrThrow = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                        method: "PUT"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.post = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "POST"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.postOrThrow = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                        method: "POST"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.delete = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.request(e, i.__assign({}, t, {
                                        method: "DELETE"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.deleteOrThrow = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    return [4, this.requestOrThrow(e, i.__assign({}, t, {
                                        method: "DELETE"
                                    }), n)];
                                case 1:
                                    return [2, a.sent()]
                            }
                        })
                    })
                }, e.request = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        var a, r, o, s;
                        return i.__generator(this, function(l) {
                            switch (l.label) {
                                case 0:
                                    return t = this.constructOptions(t, n), a = t.headers ? t.headers["Content-Type"] : void 0, r = this.serialize(t.body, a), o = i.__assign({}, t, {
                                        body: r
                                    }), [4, this._fetch(e, o)];
                                case 1:
                                    return s = l.sent(), [4, this.constructLegacyAPIResponse(s)];
                                case 2:
                                    return [2, l.sent()]
                            }
                        })
                    })
                }, e.requestOrThrow = function(e, t, n) {
                    return void 0 === t && (t = {}), void 0 === n && (n = {}), i.__awaiter(this, void 0, void 0, function() {
                        var a, r;
                        return i.__generator(this, function(o) {
                            switch (o.label) {
                                case 0:
                                    return o.trys.push([0, 2, , 3]), [4, this.request(e, t, n)];
                                case 1:
                                    if ((a = o.sent()).error || a.requestError) throw new Error("Error while making request");
                                    return r = i.__assign({}, a, {
                                        body: a.body
                                    }), [2, Promise.resolve(r)];
                                case 2:
                                    throw o.sent();
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.getAPIURL = function(e) {
                    return new URL(e, a.o.config.apiBaseURL)
                }, e.constructLegacyAPIResponse = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    t = {
                                        status: e.status
                                    }, i.label = 1;
                                case 1:
                                    return i.trys.push([1, 3, , 4]), [4, e.json()];
                                case 2:
                                    return n = i.sent(), e.ok ? t.body = n : t.error = n, [3, 4];
                                case 3:
                                    return a = i.sent(), e.headers && e.headers.get && (r = e.headers.get("Content-Type")) && -1 !== r.indexOf("application/json") && (t.requestError = a), [3, 4];
                                case 4:
                                    return [2, t]
                            }
                        })
                    })
                }, e._fetch = function(e, t) {
                    return void 0 === t && (t = {}), i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return [4, fetch(this.getAPIURL(e).toString(), t)];
                                case 1:
                                    return [2, n.sent()]
                            }
                        })
                    })
                }, e.constructOptions = function(e, t) {
                    return e = Object.assign({}, e, {
                        headers: i.__assign({}, this.getDefaultHeaders(e, t), e.headers)
                    })
                }, e.serialize = function(e, t) {
                    return "application/json; charset=UTF-8" === t ? JSON.stringify(e) : "string" == typeof e ? e : e && FormData.prototype.isPrototypeOf(e) ? e : e ? (this.logger.error(new Error("Could not serialize this request body for the content-type provided."), "attempting to serialize object with a non-JSON content-type", {
                        contentType: t
                    }), null) : null
                }, e.getDefaultHeaders = function(e, t) {
                    var n = a.o.store.getState(),
                        i = {
                            Accept: "application/vnd.twitchtv.v" + (t.version || 5) + "+json; charset=UTF-8",
                            "Accept-Language": "en-us",
                            "Client-ID": a.o.config.legacyClientID,
                            "X-Requested-With": "XMLHttpRequest"
                        };
                    e.body && FormData.prototype.isPrototypeOf(e.body) || (i["Content-Type"] = "application/json; charset=UTF-8");
                    var o = Object(r.c)(n);
                    return o && (i.Authorization = "OAuth " + o.authToken, o.legacyCSRFToken && (i["Twitch-Api-Token"] = o.legacyCSRFToken)), t.excludeHeaders && t.excludeHeaders.forEach(function(e) {
                        i[e] && delete i[e]
                    }), i
                }, e.logger = a.o.logger.withCategory("legacy-api"), e
            }()
    },
    "9uSE": function(e, t) {},
    A5Hr: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("GiK3"),
            o = n("RH2O"),
            s = n("2KeS"),
            l = n("6sO2"),
            d = n("7vx8"),
            c = n("u8SD"),
            u = n("Kxgf"),
            m = n("oIkB"),
            p = n("HM6l"),
            h = n("vH/s"),
            g = n("CSlQ"),
            f = n("Odds"),
            v = (n("Vr0l"), "report-wizard-block"),
            b = "report-wizard-unblock",
            k = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        userBlocked: t.props.userBlocked || !1
                    }, t.renderBlock = function() {
                        return r.createElement(f.O, {
                            hoverUnderlineNone: !0,
                            onClick: t.handleBlock,
                            "data-test-selector": v
                        }, r.createElement(f._8, {
                            display: f.R.Flex,
                            alignItems: f.c.Center
                        }, r.createElement(f._24, {
                            type: f._26.Brand,
                            asset: f._25.Ban
                        }), r.createElement(f._8, {
                            margin: {
                                left: .5
                            }
                        }, Object(l.d)("Block {user}", {
                            user: t.props.targetUser.displayName
                        }, "ReportWizardBlockActions"))))
                    }, t.renderUnblock = function() {
                        return r.createElement(f._8, {
                            className: "reporting-wizard__block-actions",
                            display: f.R.Flex,
                            alignItems: f.c.Center
                        }, r.createElement(f._24, {
                            type: f._26.Success,
                            asset: f._25.FollowCheck
                        }), r.createElement(f._8, {
                            margin: {
                                right: 1
                            }
                        }, r.createElement(f.Q, {
                            className: "block-user__success",
                            type: f._49.Span
                        }, Object(l.d)("{user} blocked", {
                            user: t.props.targetUser.displayName
                        }, "ReportWizardBlockActions"))), r.createElement(f.O, {
                            hoverUnderlineNone: !0,
                            onClick: t.handleUnblock,
                            "data-test-selector": b
                        }, r.createElement(f._8, {
                            margin: {
                                left: .5
                            }
                        }, Object(l.d)("Unblock", "ReportWizardBlockActions"))))
                    }, t.handleBlock = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            return a.__generator(this, function(e) {
                                return this.props.onBlock(), this.setState({
                                    userBlocked: !0
                                }), [2]
                            })
                        })
                    }, t.handleUnblock = function() {
                        t.props.onUnblock(), t.setState({
                            userBlocked: !1
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.state.userBlocked ? this.renderUnblock() : this.renderBlock();
                    return r.createElement(f._35, {
                        borderTop: !0,
                        padding: {
                            y: 1
                        },
                        margin: {
                            top: 1
                        }
                    }, r.createElement(f._8, null, Object(l.d)("Would you like to block {user}?", {
                        user: this.props.targetUser.displayName
                    }, "ReportWizardBlockActions")), r.createElement(f._8, {
                        margin: {
                            y: 1
                        }
                    }, Object(l.d)("By blocking them, you will no longer see their messages, and they will not be able to host you or add you as a friend.", "ReportWizardBlockActions")), r.createElement(f._8, {
                        margin: {
                            top: 1
                        }
                    }, e))
                }, t
            }(r.Component),
            y = n("mw/a");
        ! function(e) {
            e.Link = "link", e.MultipleChoice = "multiple choice", e.Text = "text", e.Textarea = "textarea"
        }(i || (i = {}));
        var _, C = {
                generalFilter: function() {
                    return Object(l.d)("I don't think their content or behavior is allowed on Twitch", "ReportModalWizard")
                },
                me: function() {
                    return Object(l.d)("Me", "ReportModalWizard")
                },
                someoneElse: function() {
                    return Object(l.d)("Someone else", "ReportModalWizard")
                },
                sexuallyCoercive: function() {
                    return Object(l.d)("acting in a sexually coercive or inappropriate way", "ReportModalWizard")
                },
                abusiveViolence: function() {
                    return Object(l.d)("They're threatening violence or physical harm", "ReportModalWizard")
                },
                commitingViolence: function() {
                    return Object(l.d)("They're committing acts of violence or physical harm", "ReportModalWizard")
                },
                threatening: function() {
                    return Object(l.d)("threatening, harming, or endangering someone", "ReportModalWizard")
                },
                abusive: function() {
                    return Object(l.d)("being hateful, harassing, or abusive", "ReportModalWizard")
                }
            },
            S = {
                input_description: {
                    getTitle: function() {
                        return Object(l.d)("Could you provide more detail about this issue? You may include links to videos, clips, and content outside Twitch.", "ReportModalWizard")
                    },
                    value: "description",
                    type: i.Textarea,
                    required: !0
                },
                input_link: {
                    getTitle: function() {
                        return Object(l.d)("If possible, please provide a link to show us where the issue occurred. Links that do not lead to the original source of the content may not be usable as evidence.", "ReportModalWizard")
                    },
                    rows: 2,
                    value: "external links",
                    type: i.Textarea
                },
                input_usernames: {
                    getTitle: function() {
                        return Object(l.d)("If you know the usernames of any other Twitch accounts that may be owned by this person, please list them in this space.", "ReportModalWizard")
                    },
                    value: "other usernames",
                    rows: 2,
                    type: i.Textarea
                },
                input_connection: {
                    getTitle: function() {
                        return Object(l.d)("Please describe how you connected the offsite content to this Twitch account.", "ReportModalWizard")
                    },
                    value: "offsite content connection",
                    type: i.Textarea
                },
                input_comments: {
                    getTitle: function() {
                        return Object(l.d)("If you have any other comments you would like to add, please do so here.", "ReportModalWizard")
                    },
                    value: "comments",
                    type: i.Textarea
                },
                input_identifyOwner: {
                    getTitle: function() {
                        return Object(l.d)("Please describe how you identified this person as the owner of this Twitch account.", "ReportModalWizard")
                    },
                    rows: 2,
                    value: "connect account owner",
                    type: i.Textarea
                },
                endBlurb_socialmedia: {
                    getTitle: function() {
                        return Object(l.d)("Please submit a report to the site or service where the incident occurred as well if you have not already done so.", "ReportModalWizard")
                    },
                    type: i.Text
                },
                endBlurb_threat: {
                    getTitle: function() {
                        return Object(l.d)("If you feel you are in immediate danger, please contact your local law enforcement.", "ReportModalWizard")
                    },
                    type: i.Text
                },
                endLink_selfharm: {
                    getTitle: function() {
                        return Object(l.d)("Learn more about mental health support", "ReportModalWizard")
                    },
                    value: "https://help.twitch.tv/customer/en/portal/articles/2904486-twitch-cares-mental-health-support-information",
                    type: i.Link
                },
                endLink_DMCA: {
                    getTitle: function() {
                        return Object(l.d)("View our DMCA Notification Guidelines", "ReportModalWizard")
                    },
                    value: "https://www.twitch.tv/p/legal/dmca-guidelines/",
                    type: i.Link
                },
                endLink_trademark: {
                    getTitle: function() {
                        return Object(l.d)("View our Trademark Policy", "ReportModalWizard")
                    },
                    value: "https://www.twitch.tv/p/legal/trademark-policy/",
                    type: i.Link
                },
                endLink_devAgreement: {
                    getTitle: function() {
                        return Object(l.d)("View our Developer Agreement", "ReportModalWizard")
                    },
                    value: "https://www.twitch.tv/p/legal/developer-agreement/",
                    type: i.Link
                },
                endLink_eventCoC: {
                    getTitle: function() {
                        return Object(l.d)("View our Events Code of Conduct", "ReportModalWizard")
                    },
                    value: "https://www.twitch.tv/p/legal/events-code-of-conduct",
                    type: i.Link
                },
                messaging_general: {
                    getTitle: C.generalFilter,
                    value: "general_messaging",
                    omitFromDescription: !0
                },
                profile_general: {
                    getTitle: C.generalFilter,
                    value: "general_profile",
                    omitFromDescription: !0
                },
                maliciousRaid: {
                    getTitle: function() {
                        return Object(l.d)("They're participating in a malicious raid", "ReportModalWizard")
                    },
                    value: "malicious raid",
                    reportReason: y.b.Harassment
                },
                violence: {
                    getTitle: function() {
                        return Object(l.d)("It contains threats, harm, or endangerment of someone", "ReportModalWizard")
                    },
                    value: "violence/threats",
                    reportReason: y.b.Harm
                },
                report_username: {
                    getTitle: function() {
                        return Object(l.d)("They're using an inappropriate or offensive username", "ReportModalWizard")
                    },
                    value: "inappropriate username",
                    reportReason: y.b.OffensiveUsername
                },
                report_emotes: {
                    getTitle: function() {
                        return Object(l.d)("The emotes are inappropriate or offensive", "ReportModalWizard")
                    },
                    value: "inappropriate emotes",
                    reportReason: y.b.Other
                },
                abusive: {
                    getTitle: function() {
                        return Object(l.d)("It's hateful, harassing, or abusive", "ReportModalWizard")
                    },
                    value: "abusive"
                },
                scam: {
                    getTitle: function() {
                        return Object(l.d)("It contains attempts to scam other community members", "ReportModalWizard")
                    },
                    value: "scam",
                    reportReason: y.b.Spam
                },
                emptyStream: {
                    getTitle: function() {
                        return Object(l.d)("There's nobody on the stream", "ReportModalWizard")
                    },
                    value: "empty stream"
                },
                impersonation: {
                    getTitle: function() {
                        return Object(l.d)("They're impersonating someone", "ReportModalWizard")
                    },
                    value: "impersonation",
                    reportReason: y.b.Impersonation
                },
                underage: {
                    getTitle: function() {
                        return Object(l.d)("They're underage (12 or younger)", "ReportModalWizard")
                    },
                    value: "underage",
                    reportReason: y.b.Underaged
                },
                report_ip: {
                    getTitle: function() {
                        return Object(l.d)("I think they're using copyrighted content, trademarks, or other intellectual property that's not theirs", "ReportModalWizard")
                    },
                    value: "intellectual property"
                },
                inappropriateContent: {
                    getTitle: function() {
                        return Object(l.d)("It's inappropriate or obscene", "ReportModalWizard")
                    },
                    value: "inappropriate content"
                },
                violateDevAgreement: {
                    getTitle: function() {
                        return Object(l.d)("I think they're violating Twitch's Developer Agreement", "ReportModalWizard")
                    },
                    value: "violating developer agreement"
                },
                revealPersonalInfo: {
                    getTitle: function() {
                        return Object(l.d)("They might have revealed someone's personal information", "ReportModalWizard")
                    },
                    value: "revealing personal info",
                    reportReason: y.b.Other
                },
                inappropriateBadge: {
                    getTitle: function() {
                        return Object(l.d)("Their emote or subscriber badge violates Twitch's Guidelines", "ReportModalWizard")
                    },
                    value: "emote/subscriber badge",
                    reportReason: y.b.Other
                },
                noModeration: {
                    getTitle: function() {
                        return Object(l.d)("They're not moderating their chat appropriately", "ReportModalWizard")
                    },
                    value: "not moderating chat",
                    reportReason: y.b.Other
                },
                inappropriateExtension: {
                    getTitle: function() {
                        return Object(l.d)("Their extension contains malicious or inappropriate content", "ReportModalWizard")
                    },
                    value: "inappropriate extension",
                    reportReason: y.b.Other
                },
                cheating: {
                    getTitle: function() {
                        return Object(l.d)("They're cheating in an online game", "ReportModalWizard")
                    },
                    value: "cheating",
                    reportReason: y.b.Cheating
                },
                bitsViolation: {
                    getTitle: function() {
                        return Object(l.d)("Their use of Bits goes against Twitch's Policy", "ReportModalWizard")
                    },
                    value: "bits violation",
                    reportReason: y.b.BitsViolation
                },
                video_labeling: {
                    getTitle: function() {
                        return Object(l.d)("Their content is labeled incorrectly", "ReportModalWizard")
                    },
                    value: "incorrect label",
                    reportReason: y.b.Miscategorized
                },
                video_inactive: {
                    getTitle: function() {
                        return Object(l.d)("The stream is inactive (sleeping/AFK)", "ReportModalWizard")
                    },
                    value: "inactive stream",
                    reportReason: y.b.Miscategorized
                },
                video_general: {
                    getTitle: C.generalFilter,
                    value: "general_video",
                    omitFromDescription: !0
                },
                hateSpeech: {
                    getTitle: function() {
                        return Object(l.d)("They're using hate speech, hateful symbols, or hateful media", "ReportModalWizard")
                    },
                    value: "hate speech",
                    reportReason: y.b.HatefulConduct
                },
                harassment: {
                    getTitle: function() {
                        return Object(l.d)("They're harassing or bullying someone", "ReportModalWizard")
                    },
                    value: "harassment",
                    reportReason: y.b.Harassment
                },
                abusiveViolence: {
                    getTitle: C.abusiveViolence,
                    value: "threatening violence",
                    reportReason: y.b.Harm
                },
                commitingViolence: {
                    getTitle: C.commitingViolence,
                    value: "committing violence",
                    reportReason: y.b.Harm
                },
                swatting: {
                    getTitle: function() {
                        return Object(l.d)("They're inciting or committing swatting or a DDOS attack", "ReportModalWizard")
                    },
                    value: "swatting/ddosing",
                    reportReason: y.b.Harassment
                },
                personalInfo: {
                    getTitle: function() {
                        return Object(l.d)("They're purposely revealing personal information", "ReportModalWizard")
                    },
                    value: "revealing personal info",
                    reportReason: y.b.Harassment
                },
                threat_me: {
                    getTitle: function() {
                        return Object(l.d)("At me", "ReportModalWizard")
                    },
                    value: "against me",
                    reportReason: y.b.Harm
                },
                threat_person: {
                    getTitle: function() {
                        return Object(l.d)("At someone else", "ReportModalWizard")
                    },
                    value: "against another person",
                    reportReason: y.b.Harm
                },
                threat_group: {
                    getTitle: function() {
                        return Object(l.d)("At a group of people", "ReportModalWizard")
                    },
                    value: "against group of people",
                    reportReason: y.b.Harm
                },
                threat_selfharm: {
                    getTitle: function() {
                        return Object(l.d)("They're threatening self-harm", "ReportModalWizard")
                    },
                    value: "selfharm"
                },
                inappropriate_game: {
                    getTitle: function() {
                        return Object(l.d)("The game isn't allowed on Twitch", "ReportModalWizard")
                    },
                    value: "prohibited game",
                    reportReason: y.b.Prohibited
                },
                sexuallyViolent: {
                    getTitle: function() {
                        return Object(l.d)("Violent sexual conduct", "ReportModalWizard")
                    },
                    value: "sexually violent",
                    reportReason: y.b.SexualViolence
                },
                childAnimal: {
                    getTitle: function() {
                        return Object(l.d)("Sexual conduct involving a child or animal", "ReportModalWizard")
                    },
                    value: "sexual conduct; child or animal",
                    reportReason: y.b.SexualViolence
                },
                pornographic: {
                    getTitle: function() {
                        return Object(l.d)("Sexually explicit or pornographic content", "ReportModalWizard")
                    },
                    value: "pornographic",
                    reportReason: y.b.SexualContent
                },
                gory: {
                    getTitle: function() {
                        return Object(l.d)("Extreme violence or gore", "ReportModalWizard")
                    },
                    value: "gory",
                    reportReason: y.b.Gore
                },
                suggestive: {
                    getTitle: function() {
                        return Object(l.d)("Sexually suggestive content", "ReportModalWizard")
                    },
                    value: "sexually suggestive",
                    reportReason: y.b.SexualContent
                },
                nudity: {
                    getTitle: function() {
                        return Object(l.d)("Full or partial nudity", "ReportModalWizard")
                    },
                    value: "nudity",
                    reportReason: y.b.SexualContent
                },
                other: {
                    getTitle: function() {
                        return Object(l.d)("There's something else wrong with it...", "ReportModalWizard")
                    },
                    value: "other",
                    reportReason: y.b.Other
                },
                evasion: {
                    getTitle: function() {
                        return Object(l.d)("They were banned or suspended and are trying to get around it (ban evasion)", "ReportModalWizard")
                    },
                    value: "ban evasion"
                },
                evasion_sitewide: {
                    getTitle: function() {
                        return Object(l.d)("A sitewide ban from Twitch", "ReportModalWizard")
                    },
                    value: "sitewide ban",
                    reportReason: y.b.TosBanEvasion
                },
                evasion_chat: {
                    getTitle: function() {
                        return Object(l.d)("A chat ban from one or more channels", "ReportModalWizard")
                    },
                    value: "chat ban",
                    reportReason: y.b.ChatBanEvasion
                },
                evasion_messaging: {
                    getTitle: function() {
                        return Object(l.d)("A block from messaging me", "ReportModalWizard")
                    },
                    value: "messaging block",
                    reportReason: y.b.ChatBanEvasion
                },
                impersonation_me: {
                    getTitle: C.me,
                    value: "impersonating me",
                    reportReason: y.b.Impersonation
                },
                impersonation_brand: {
                    getTitle: function() {
                        return Object(l.d)("Someone I represent, or a brand/company I work for", "ReportModalWizard")
                    },
                    value: "impersonating brand",
                    reportReason: y.b.Impersonation
                },
                impersonation_other: {
                    getTitle: C.someoneElse,
                    value: "impersonating someone else",
                    reportReason: y.b.Impersonation
                },
                selfharm: {
                    getTitle: function() {
                        return Object(l.d)("I'm concerned for their wellbeing", "ReportModalWizard")
                    },
                    value: "selfharm",
                    reportReason: y.b.SelfHarm
                },
                chat: {
                    getTitle: function() {
                        return Object(l.d)("In a stream chat message", "ReportModalWizard")
                    },
                    value: "chat"
                },
                profile: {
                    getTitle: function() {
                        return Object(l.d)("In the profile content, extensions, or emotes", "ReportModalWizard")
                    },
                    value: "profile"
                },
                video: {
                    getTitle: function() {
                        return Object(l.d)("In a live stream, video, or clip", "ReportModalWizard")
                    },
                    value: "video"
                },
                room: {
                    getTitle: function(e) {
                        return Object(l.d)("In one of {username}'s rooms", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    value: "room"
                },
                whisper: {
                    getTitle: function() {
                        return Object(l.d)("In a whisper (private message)", "ReportModalWizard")
                    },
                    value: "whisper",
                    reportContext: y.a.Whisper
                },
                username: {
                    getTitle: function() {
                        return Object(l.d)("In the username", "ReportModalWizard")
                    },
                    value: "username",
                    reportReason: y.b.OffensiveUsername
                },
                report_other: {
                    getTitle: function() {
                        return Object(l.d)("Somewhere else...", "ReportModalWizard")
                    },
                    value: "somewhere else",
                    omitFromDescription: !0
                },
                video_streamer: {
                    getTitle: function() {
                        return Object(l.d)("The streamer or channel owner", "ReportModalWizard")
                    },
                    value: "streamer"
                },
                video_someoneElse: {
                    getTitle: function() {
                        return Object(l.d)("Someone else in the video", "ReportModalWizard")
                    },
                    value: "someone else in video"
                },
                video_chatSomeone: {
                    getTitle: function() {
                        return Object(l.d)("Someone in chat", "ReportModalWizard")
                    },
                    value: "someone in chat",
                    differentTarget: !0
                },
                report_channelOwner: {
                    getTitle: function() {
                        return Object(l.d)("The channel owner", "ReportModalWizard")
                    },
                    value: "channel owner"
                },
                report_member: {
                    getTitle: function() {
                        return Object(l.d)("Another community member", "ReportModalWizard")
                    },
                    value: "community member",
                    differentTarget: !0
                },
                location_onTwitch: {
                    getTitle: function() {
                        return Object(l.d)("On Twitch", "ReportModalWizard")
                    },
                    value: "on twitch"
                },
                location_anotherSite: {
                    getTitle: function() {
                        return Object(l.d)("On another site or service", "RpoertModalWizard")
                    },
                    value: "another site"
                },
                location_TwitchEvent: {
                    getTitle: function() {
                        return Object(l.d)("In person, at a Twitch event", "ReportModalWizard")
                    },
                    value: "twitch event"
                },
                external_incitingRaids: {
                    getTitle: function() {
                        return Object(l.d)("inciting brigading or malicious raids", "ReportModalWizard")
                    },
                    reportReason: y.b.Harassment,
                    value: "brigading/raids"
                },
                external_threatening: {
                    getTitle: C.threatening,
                    value: "threatening"
                },
                external_harassment: {
                    getTitle: C.abusive,
                    value: "hateful/harassing"
                },
                external_abusiveViolence: {
                    getTitle: C.abusiveViolence,
                    value: "external site; threatening violence",
                    reportReason: y.b.Harm
                },
                external_commitingViolence: {
                    getTitle: C.commitingViolence,
                    value: "external site; committing violence",
                    reportReason: y.b.Harm
                },
                conduct_impersonation: {
                    getTitle: function() {
                        return Object(l.d)("impersonating someone", "ReportModalWizard")
                    },
                    value: "impersonation",
                    reportReason: y.b.Impersonation
                },
                spam: {
                    getTitle: function() {
                        return Object(l.d)("They're spamming or spreading malicious links", "ReportModalWizard")
                    },
                    value: "spam",
                    reportReason: y.b.Spam
                },
                spam_bot: {
                    getTitle: function() {
                        return Object(l.d)("I think this is a bot account", "ReportModalWizard")
                    },
                    value: "bot"
                },
                spam_scam: {
                    getTitle: function() {
                        return Object(l.d)("They're trying to scam other community members or sending malicious links", "ReportModalWizard")
                    },
                    value: "scam or malicious links"
                },
                spam_repeated: {
                    getTitle: function() {
                        return Object(l.d)("They're sending repeated messages (spam)", "ReportModalWizard")
                    },
                    value: "repeat messages"
                }
            },
            E = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onChange = function(e) {
                        var n = e.target,
                            i = n.name,
                            a = n.value;
                        t.props.onChangeText(i, a)
                    }, t.onSelect = function(e) {
                        if (t.props.currentCard.items && e.currentTarget.parentElement) {
                            var n = Number(e.currentTarget.parentElement.getAttribute("data-a-index")),
                                i = t.props.currentCard.items[n];
                            t.props.onChangeRadio(i)
                        }
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.currentCard.getDescription ? r.createElement(f._8, {
                        padding: {
                            bottom: 1
                        }
                    }, this.props.currentCard.getDescription()) : null;
                    return r.createElement(f._8, {
                        className: "reporting-wizard-card"
                    }, e, r.createElement(f.W, {
                        label: this.props.currentCard.getLabel ? this.props.currentCard.getLabel() : ""
                    }, this.renderCardItems()))
                }, t.prototype.renderCardItems = function() {
                    var e = this,
                        t = this.props.currentCard,
                        n = [];
                    return t.items && t.type && (n = t.items.filter(function(e) {
                        return !!e
                    }).map(function(t, n) {
                        switch (t.type) {
                            case i.Text:
                                return r.createElement(f._8, {
                                    key: n,
                                    padding: {
                                        bottom: 1
                                    }
                                }, t.getTitle());
                            case i.Link:
                                return r.createElement(f._8, {
                                    key: n,
                                    padding: {
                                        bottom: 1
                                    }
                                }, r.createElement(f.O, {
                                    to: t.value,
                                    targetBlank: !0
                                }, r.createElement(f._8, {
                                    display: f.R.Flex
                                }, r.createElement(f._8, {
                                    display: f.R.Inline,
                                    padding: {
                                        right: .5
                                    }
                                }, r.createElement(f._24, {
                                    asset: f._25.Document
                                })), t.getTitle())));
                            case i.Textarea:
                                var a = t.value ? e.props.userTextInputs[t.value] : void 0,
                                    o = t.required && (!a || !!a && 0 === a.trim().length);
                                return r.createElement(f._8, {
                                    key: n,
                                    padding: {
                                        bottom: 1
                                    }
                                }, r.createElement(f.W, {
                                    label: t.getTitle(),
                                    labelOptional: t.required ? "" : Object(l.d)("Optional", "ReportModalWizardCard")
                                }, r.createElement(f._46, {
                                    onChange: e.onChange,
                                    rows: t.rows || 3,
                                    name: t.value,
                                    error: e.props.error && o,
                                    value: a,
                                    "data-test-selector": "report-wizard-textarea"
                                })));
                            case i.MultipleChoice:
                            default:
                                return r.createElement(f._8, {
                                    key: n,
                                    padding: {
                                        y: .5
                                    }
                                }, r.createElement(f._21, {
                                    checked: !!e.props.currentSelection && e.props.currentSelection.value === t.value,
                                    onChange: e.onSelect,
                                    label: t.getTitle(e.props.targetUser.displayName),
                                    "data-a-index": n,
                                    name: "card",
                                    value: t.value
                                }))
                        }
                    })), n
                }, t
            }(r.Component),
            N = n("LjAQ");
        ! function(e) {
            e.Confirm = "Confirm", e.MultipleChoice = "MultipleChoice", e.Info = "End Card"
        }(_ || (_ = {}));
        var T, w, D, R = {
                contentGeneral: function() {
                    return Object(l.d)("What would you like to report?", "ReportModalWizard")
                },
                content: function() {
                    return Object(l.d)("What's wrong with this content?", "ReportModalWizard")
                },
                identifyUser: function() {
                    return Object(l.d)("Who do you want to report?", "ReportModalWizard")
                },
                thisPersonIs: function() {
                    return Object(l.d)("This person is...", "ReportModalWizard")
                },
                relevantStatements: function() {
                    return Object(l.d)("What would you like to report? (Please choose the most relevant statement that applies.)", "ReportModalWizard")
                }
            },
            O = {
                report: function(e) {
                    return Object(l.d)("Report {username}", {
                        username: e
                    }, "ReportModalWizard")
                },
                reportVideo: function(e) {
                    return Object(l.d)("Report {username}'s Video", {
                        username: e
                    }, "ReportModalWizard")
                },
                reportMessage: function(e) {
                    return Object(l.d)("Report {username}'s Message", {
                        username: e
                    }, "ReportModalWizard")
                },
                reportProfile: function(e) {
                    return Object(l.d)("Report {username}'s Profile Or Other Content", {
                        username: e
                    }, "ReportModalWizard")
                },
                reportAbusive: function(e) {
                    return Object(l.d)("Report {username} for Abusive Conduct", {
                        username: e
                    }, "ReportModalWizard")
                },
                tellUsMore: function() {
                    return Object(l.d)("Tell Us More", "ReportModalWizard")
                },
                thanks: function() {
                    return Object(l.d)("Thanks for letting us know", "ReportModalWizard")
                },
                thanksConcern: function() {
                    return Object(l.d)("Thank you for your concern", "ReportModalWizard")
                }
            },
            I = {
                getDescription: function() {
                    return Object(l.d)("Reports are reviewed by Twitch Staff 24 hours a day. We will issue penalties, such as account suspension and/or content removal, once we verify that a violation of our policies has occurred.", "ReportModalWizard")
                },
                blockPrompt: !0,
                getTitle: O.thanks,
                type: _.Info,
                value: "end card"
            },
            M = {
                socialMedia: a.__assign({}, I, {
                    items: [S.endBlurb_socialmedia]
                }),
                violence: a.__assign({}, I, {
                    items: [S.endBlurb_threat]
                }),
                legal: {
                    getTitle: O.thanksConcern,
                    getDescription: function() {
                        return Object(l.d)("To submit a claim or report a violation of this type, you will need to follow the steps listed on the relevant page below.", "ReportModalWizard")
                    },
                    items: [S.endLink_DMCA, S.endLink_trademark, S.endLink_devAgreement],
                    type: _.Info,
                    value: "ip end"
                },
                selfharm: {
                    getTitle: O.thanksConcern,
                    getDescription: function() {
                        return Object(l.d)("If you know the user personally, and you believe them to be in danger, please contact their local authorities immediately. The link below contains some general information that may be of use.", "ReportModalWizard")
                    },
                    items: [S.endLink_selfharm],
                    type: _.Info,
                    value: "selfharm end"
                },
                twitchEvent: {
                    getTitle: O.thanksConcern,
                    getDescription: function() {
                        return Object(l.d)("Please bring this concern to the attention of staff or security at the event if you have not already done so. More information is available at the link below.", "ReportModalWizard")
                    },
                    items: [S.endLink_eventCoC],
                    value: "twitch event end",
                    type: _.Info
                }
            },
            x = {
                getTitle: O.report,
                getLabel: function() {
                    return Object(l.d)("Where is the problem?", "ReportModalWizard")
                },
                items: [S.video, S.whisper, S.chat, S.room, S.profile, S.username, S.report_other],
                type: _.MultipleChoice,
                value: "content type"
            },
            j = {
                identifyUser: {
                    getTitle: O.reportVideo,
                    getLabel: R.identifyUser,
                    items: [S.video_streamer, S.video_someoneElse, S.video_chatSomeone],
                    type: _.MultipleChoice,
                    value: "video identify user"
                },
                content: {
                    getTitle: O.reportVideo,
                    getLabel: R.contentGeneral,
                    items: [S.revealPersonalInfo, S.video_labeling, S.video_inactive, S.video_general, S.report_ip, S.violateDevAgreement, S.selfharm],
                    type: _.MultipleChoice,
                    value: "video report reason"
                },
                general: {
                    getTitle: O.reportVideo,
                    getLabel: R.content,
                    items: [S.report_username, S.violence, S.abusive, S.cheating, S.scam, S.inappropriateContent, S.evasion, S.impersonation, S.underage, S.bitsViolation],
                    type: _.MultipleChoice,
                    value: "video general report reason"
                }
            },
            L = {
                content: {
                    getTitle: O.reportMessage,
                    getLabel: R.contentGeneral,
                    items: [S.revealPersonalInfo, S.evasion, S.spam, S.maliciousRaid, S.report_username, S.messaging_general, S.selfharm],
                    type: _.MultipleChoice,
                    value: "message report reason"
                },
                general: {
                    getTitle: O.reportMessage,
                    getLabel: R.content,
                    items: [S.report_emotes, S.violence, S.abusive, S.inappropriateContent, S.impersonation, S.underage, S.bitsViolation],
                    type: _.MultipleChoice,
                    value: "message general report reason"
                }
            },
            A = a.__assign({}, L.content, {
                getDescription: function() {
                    return Object(l.d)("Please note that we may review additional messages in this conversation to determine the context of your report.", "ReportModalWizard")
                }
            }),
            F = {
                content: {
                    getTitle: O.reportProfile,
                    getLabel: R.contentGeneral,
                    items: [S.revealPersonalInfo, S.inappropriateBadge, S.inappropriateExtension, S.noModeration, S.profile_general, S.report_ip, S.violateDevAgreement, S.selfharm],
                    type: _.MultipleChoice,
                    value: "profile report reason"
                },
                general: {
                    getTitle: O.reportProfile,
                    getLabel: R.content,
                    items: [S.report_username, S.violence, S.abusive, S.scam, S.inappropriateContent, S.evasion, S.impersonation, S.underage, S.bitsViolation],
                    type: _.MultipleChoice,
                    value: "profile general report reason"
                }
            },
            U = {
                getTitle: function(e) {
                    return Object(l.d)("Report {username}'s Room", {
                        username: e
                    }, "ReportModalWizard")
                },
                getLabel: R.identifyUser,
                items: [S.report_channelOwner, S.report_member],
                value: "room report user",
                type: _.MultipleChoice
            },
            B = {
                getTitle: O.tellUsMore,
                items: [S.input_description],
                type: _.Confirm,
                value: "tell us more"
            },
            P = {
                banEvasion: a.__assign({}, B, {
                    items: [S.input_usernames, S.input_description],
                    value: "ban evasion tell us more"
                }),
                socialMedia: a.__assign({}, B, {
                    items: [S.input_link, S.input_connection, S.input_description],
                    nextCard: M.socialMedia,
                    value: "social media tell us more"
                })
            },
            V = {
                content: {
                    getTitle: O.reportAbusive,
                    getLabel: R.relevantStatements,
                    items: [S.hateSpeech, S.harassment, S.abusiveViolence, S.commitingViolence, S.swatting, S.personalInfo],
                    type: _.MultipleChoice,
                    value: "abuse type"
                },
                violence: {
                    getTitle: function(e) {
                        return Object(l.d)("Report {username} for Violence or Threats", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: function() {
                        return Object(l.d)("Are the threats or actions directed at you or someone else?", "ReportModalWizard")
                    },
                    items: [S.threat_me, S.threat_person, S.threat_group, S.threat_selfharm],
                    type: _.MultipleChoice,
                    value: "violence type"
                }
            },
            W = {
                identifyLocation: {
                    getTitle: function(e) {
                        return Object(l.d)("Report {username} for something else...", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: function() {
                        return Object(l.d)("Where did the problem happen?", "ReportModalWizard")
                    },
                    items: [S.location_onTwitch, S.location_anotherSite, S.location_TwitchEvent],
                    type: _.MultipleChoice,
                    value: "off-site conduct location"
                },
                externalSite: {
                    getTitle: function(e) {
                        return Object(l.d)("Report {username}'s Conduct on Another Site or Service", {
                            username: e
                        }, "ReportModalWizard")
                    },
                    getLabel: R.thisPersonIs,
                    getDescription: function() {
                        return Object(l.d)("Please note that incidents reported through this form must involve Twitch community members. If possible, please submit a report to the site or service where the incident occurred as well.", "ReportModalWizard")
                    },
                    items: [S.external_incitingRaids, S.external_threatening, S.external_harassment],
                    type: _.MultipleChoice,
                    nextCard: P.socialMedia,
                    value: "external site conduct"
                },
                external_violence: a.__assign({}, V.violence, {
                    items: [S.threat_me, S.threat_person, S.threat_group],
                    nextCard: P.socialMedia
                }),
                external_abusive: a.__assign({}, V.content, {
                    items: [S.hateSpeech, S.harassment, S.external_abusiveViolence, S.external_commitingViolence, S.swatting, S.personalInfo],
                    nextCard: P.socialMedia
                })
            },
            H = {
                getTitle: function(e) {
                    return Object(l.d)("Report {username}'s Spam or Malicious Links", {
                        username: e
                    }, "ReportModalWizard")
                },
                getLabel: R.contentGeneral,
                items: [S.spam_bot, S.spam_scam, S.spam_repeated],
                type: _.MultipleChoice,
                value: "spam type"
            },
            G = {
                getTitle: function(e) {
                    return Object(l.d)("Report {username} for Inappropriate Content", {
                        username: e
                    }, "ReportModalWizard")
                },
                getLabel: R.relevantStatements,
                items: [S.inappropriate_game, S.gory, S.sexuallyViolent, S.childAnimal, S.pornographic, S.suggestive, S.nudity, S.other],
                type: _.MultipleChoice,
                value: "inappropriate content type"
            },
            z = {
                getTitle: function(e) {
                    return Object(l.d)("Report {username} for Evading a Ban", {
                        username: e
                    }, "ReportModalWizard")
                },
                getLabel: function() {
                    return Object(l.d)("What kind of ban are they evading?", "ReportModalWizard")
                },
                value: "ban type",
                items: [S.evasion_chat, S.evasion_sitewide, S.evasion_messaging],
                type: _.MultipleChoice,
                nextCard: P.banEvasion
            },
            q = {
                getTitle: function(e) {
                    return Object(l.d)("Report {username} for Impersonation", {
                        username: e
                    }, "ReportModalWizard")
                },
                getLabel: function() {
                    return Object(l.d)("Who is being impersonated?", "ReportModalWizard")
                },
                getDescription: function() {
                    return Object(l.d)("Parody, cosplay, and other portrayals without the intent to deceive or defraud are allowed under Twitch's Community Guidelines. If you would still like to submit a report, please continue.", "ReportModalWizard")
                },
                items: [S.impersonation_me, S.impersonation_brand, S.impersonation_other],
                type: _.MultipleChoice,
                value: "impersonation type"
            },
            Q = x,
            K = B,
            $ = I,
            Y = {
                video: j.identifyUser,
                whisper: A,
                chat: L.content,
                profile: F.content,
                room: U,
                "somewhere else": W.identifyLocation,
                streamer: j.content,
                "someone else in video": j.content,
                "someone in chat": L.content,
                general_video: j.general,
                general_messaging: L.general,
                general_profile: F.general,
                "channel owner": F.content,
                "community member": L.content,
                "on twitch": F.content,
                "another site": W.externalSite,
                "twitch event": M.twitchEvent,
                "brigading/raids": P.socialMedia,
                threatening: W.external_violence,
                "hateful/harassing": W.external_abusive,
                "external site; threatening violence": W.external_violence,
                "external site; committing violence": W.external_violence,
                "external site; scam": P.socialMedia,
                "ban evasion": z,
                spam: H,
                hateful: V.content,
                impersonation: q,
                "violence/threats": V.violence,
                "threatening violence": V.violence,
                "committing violence": V.violence,
                abusive: V.content,
                "inappropriate content": G,
                "intellectual property": M.legal,
                "violating developer agreement": M.legal
            },
            J = {
                selfharm: M.selfharm,
                harm: M.violence,
                other: $
            },
            Z = {
                CHANNEL_FEED_POST_REPORT: F.content,
                COMMUNITY_REPORT: F.content,
                CHAT_REPORT: L.content,
                CLIP_REPORT: j.content,
                EVENT_REPORT: F.content,
                EXTENSION_REPORT: F.content,
                LIVE_UP_REPORT: F.content,
                ROOM_REPORT: U,
                WHISPER_REPORT: A,
                VOD_COMMENT_REPORT: L.content
            },
            X = "report-wizard-back",
            ee = "report-wizard-close",
            te = "report-wizard-next",
            ne = "report-wizard-submit",
            ie = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        currentCard: t.props.currentCard || Z[t.props.reportContentType] || Q,
                        prevCards: [],
                        currentSelection: null,
                        prevSelections: [],
                        displacedSelections: [],
                        userTextInput: {},
                        error: "",
                        reportReason: t.props.reportReason || "",
                        modalCloseTracked: !1,
                        targetUnknown: !1,
                        reportContext: t.props.reportContentType
                    }, t.renderPrimer = function() {
                        return r.createElement(f._8, {
                            margin: {
                                top: 1
                            }
                        }, r.createElement(f.Q, null, Object(l.d)("We are going to ask you a few questions to help us investigate your report quickly and accurately.", "ReportModalWizard")))
                    }, t.renderButtons = function() {
                        var e = Object(l.d)("Close", "ReportModalWizard"),
                            n = t.handleClose,
                            i = ee,
                            a = !1,
                            o = t.state.prevCards.length ? t.renderBack() : null;
                        switch (t.state.currentCard.type) {
                            case _.MultipleChoice:
                                e = Object(l.d)("Next", "ReportModalWizard"), n = t.handleNext, i = te, a = !t.state.currentSelection;
                                break;
                            case _.Confirm:
                                e = Object(l.d)("Submit Report", "ReportModalWizard"), n = t.handleSubmit, a = !t.state.userTextInput, i = ne
                        }
                        return r.createElement(f._8, null, o, r.createElement(f.v, {
                            onClick: n,
                            disabled: a,
                            "data-test-selector": i
                        }, r.createElement(f._8, {
                            padding: {
                                x: 1
                            }
                        }, e)))
                    }, t.renderBack = function() {
                        return r.createElement(f._8, {
                            margin: {
                                right: 1
                            },
                            display: f.R.InlineBlock
                        }, r.createElement(f.v, {
                            type: f.B.Hollow,
                            onClick: t.handleBack,
                            "data-test-selector": X
                        }, r.createElement(f._8, {
                            padding: {
                                x: 1
                            }
                        }, Object(l.d)("Back", "ReportModalWizard"))))
                    }, t.getTitle = function() {
                        return t.state.currentCard.getTitle && t.props.targetUser.displayName && t.props.targetUserID ? t.state.targetUnknown ? t.state.currentCard.getTitle(Object(l.d)("Another User", "ReportModalWizard")) : t.state.currentCard.getTitle(t.props.targetUser.displayName) : t.state.targetUnknown ? Object(l.d)("Report User", "ReportModalWizard") : t.props.title
                    }, t.handleClose = function() {
                        t.setState({
                            modalCloseTracked: !0
                        }, function() {
                            return t.props.trackClose(D.Finish, t.state.currentCard.value)
                        }), t.props.onClose()
                    }, t.handleNext = function() {
                        if (t.state.currentSelection && t.state.currentSelection.value) {
                            var e = t.state.currentCard,
                                n = t.state.prevCards.concat(e),
                                i = t.state.prevSelections.concat(t.state.currentSelection),
                                a = t.state.displacedSelections[t.state.displacedSelections.length - 1],
                                r = t.state.currentSelection.differentTarget || t.state.targetUnknown,
                                o = t.state.currentSelection.reportContext || t.state.reportContext,
                                s = e.nextCard || K;
                            Y[t.state.currentSelection.value] && (s = Y[t.state.currentSelection.value]);
                            var l = t.state.currentSelection.reportReason || t.state.reportReason,
                                d = s.type === _.Info;
                            t.setState({
                                currentCard: s,
                                reportReason: l,
                                prevCards: d ? [] : n,
                                prevSelections: i,
                                targetUnknown: r,
                                currentSelection: a || null,
                                displacedSelections: t.state.displacedSelections.slice(0, -1),
                                reportContext: o
                            }, function() {
                                return t.trackNavigation(w.Next, e.value)
                            })
                        }
                    }, t.createReportDescription = function() {
                        return "" + (t.state.reportContext !== t.props.reportContentType ? "report context: " + t.props.reportContentType + "\n\n" : "") + t.state.prevSelections.map(function(e) {
                            if (!e.omitFromDescription) return e.value
                        }).filter(function(e) {
                            return !!e
                        }).join(" > ") + "\n\n" + Object.keys(t.state.userTextInput).map(function(e) {
                            return e + ": " + t.state.userTextInput[e]
                        }).join("\n")
                    }, t.requiredInputsNonEmpty = function() {
                        if (t.state.currentCard.items) return 0 === t.state.currentCard.items.filter(function(e) {
                            if (e.type !== i.Textarea || !e.required) return !1;
                            var n = t.state.userTextInput[e.value],
                                a = n && 0 === n.trim().length;
                            return !n || a
                        }).length
                    }, t.handleSubmit = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i, r = this;
                            return a.__generator(this, function(a) {
                                switch (a.label) {
                                    case 0:
                                        return e = Object(l.d)("Additional information is required.", "ReportModalWizard"), this.requiredInputsNonEmpty() ? (t = this.state.reportReason || "other", n = this.createReportDescription(), [4, this.props.onSubmit(t, n, null, null, this.state.reportContext)]) : [3, 2];
                                    case 1:
                                        switch (a.sent(), this.props.submitStatus) {
                                            case N.b.FormError:
                                                this.setState({
                                                    error: e
                                                });
                                                break;
                                            case N.b.Success:
                                                i = $, J[t] && (i = J[t]), this.state.currentCard.nextCard && (i = this.state.currentCard.nextCard), this.setState({
                                                    currentCard: i,
                                                    prevCards: [],
                                                    prevSelections: [],
                                                    currentSelection: null,
                                                    displacedSelections: [],
                                                    userTextInput: {},
                                                    error: ""
                                                }, function() {
                                                    return r.trackNavigation(w.Submit)
                                                });
                                                break;
                                            case N.b.UserError:
                                                this.setState({
                                                    error: Object(l.d)("This account could not be reported. It may have already been suspended, or the owner may have deleted it.", "ReportModalWizard")
                                                });
                                                break;
                                            case N.b.MutationError:
                                            default:
                                                this.setState({
                                                    error: Object(l.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportModalWizard")
                                                })
                                        }
                                        return [3, 3];
                                    case 2:
                                        this.props.onError(N.b.FormError), this.setState({
                                            error: e
                                        }), a.label = 3;
                                    case 3:
                                        return [2]
                                }
                            })
                        })
                    }, t.handleBack = function() {
                        return a.__awaiter(t, void 0, void 0, function() {
                            var e, t, n, i, r, o = this;
                            return a.__generator(this, function(a) {
                                return e = this.state.currentCard, t = this.state.prevCards[this.state.prevCards.length - 1], n = this.state.prevSelections[this.state.prevSelections.length - 1], i = !n.differentTarget && this.state.targetUnknown, r = this.state.displacedSelections, this.state.currentSelection && (r = r.concat(this.state.currentSelection)), t && n && this.setState({
                                    currentCard: t,
                                    currentSelection: n,
                                    displacedSelections: r,
                                    prevCards: this.state.prevCards.slice(0, -1),
                                    prevSelections: this.state.prevSelections.slice(0, -1),
                                    error: "",
                                    targetUnknown: i
                                }, function() {
                                    return o.trackNavigation(w.Back, e.value)
                                }), [2]
                            })
                        })
                    }, t.handleTextInput = function(e, n) {
                        var i = t.state.userTextInput;
                        i[e] = n, t.setState({
                            userTextInput: i
                        })
                    }, t.handleSelection = function(e) {
                        if (t.state.currentCard.items && e !== t.state.currentSelection) {
                            var n = t.state.targetUnknown;
                            if (n) n = 0 === t.state.displacedSelections.filter(function(e) {
                                return e.differentTarget
                            }).length;
                            var i = t.state.reportContext;
                            (t.state.displacedSelections.filter(function(e) {
                                return e.reportContext
                            }).length || t.state.currentSelection && t.state.currentSelection.reportContext) && (i = t.props.reportContentType), t.setState({
                                currentSelection: e,
                                displacedSelections: [],
                                userTextInput: {},
                                targetUnknown: n,
                                reportContext: i
                            })
                        }
                    }, t.trackNavigation = function(e, n) {
                        t.props.trackAction(e, n, t.state.currentCard.value)
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.state.modalCloseTracked || this.props.trackClose(D.Close, this.state.currentCard.value)
                }, t.prototype.render = function() {
                    var e = this.state.currentCard.type === _.Info && this.state.currentCard.blockPrompt ? r.createElement(k, {
                            targetUser: this.props.targetUser,
                            onBlock: this.props.onBlock,
                            onUnblock: this.props.onUnblock,
                            userBlocked: this.props.userBlocked
                        }) : null,
                        t = this.state.error ? r.createElement(f._35, {
                            fullWidth: !0,
                            margin: {
                                bottom: 1
                            },
                            padding: 1,
                            className: "reporting__error-container"
                        }, this.state.error) : null,
                        n = this.state.prevCards.length || this.state.currentCard.type === _.Info ? null : this.renderPrimer();
                    return r.createElement(f._35, {
                        className: "reporting-wizard",
                        display: f.R.Flex,
                        margin: {
                            x: 1
                        },
                        flexDirection: f.T.Column,
                        fullHeight: !0,
                        "data-test-card-value": this.state.currentCard.value
                    }, t, r.createElement(f.Q, {
                        bold: !0,
                        fontSize: f.V.Size4
                    }, this.getTitle()), n, r.createElement(f._8, {
                        margin: {
                            y: 1
                        }
                    }, r.createElement(E, {
                        currentCard: this.state.currentCard,
                        currentSelection: this.state.currentSelection,
                        targetUser: this.props.targetUser,
                        targetUserID: this.props.targetUserID,
                        onChangeRadio: this.handleSelection,
                        onChangeText: this.handleTextInput,
                        userTextInputs: this.state.userTextInput,
                        error: this.props.submitStatus === N.b.FormError && !!this.state.error
                    }), e), this.renderButtons())
                }, t
            }(r.Component),
            ae = n("xwpJ"),
            re = n("mmQh"),
            oe = n("mRH2"),
            se = n("IRHd");
        n.d(t, "c", function() {
                return w
            }), n.d(t, "a", function() {
                return D
            }), n.d(t, "b", function() {
                return de
            }),
            function(e) {
                e.Close = "close", e.Open = "open", e.Submit = "submit_report", e.ToggleSettings = "modal_settings"
            }(T || (T = {})),
            function(e) {
                e.Back = "back", e.Close = "close", e.Open = "open", e.Next = "next", e.Submit = "submit_report", e.ToggleSettings = "modal_settings"
            }(w || (w = {})),
            function(e) {
                e.Close = "close", e.Finish = "finish"
            }(D || (D = {}));
        var le = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                n.handleSubmit = function(e, t, i, r, o) {
                    return a.__awaiter(n, void 0, void 0, function() {
                        var n, s, d, c, u = this;
                        return a.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    if (e !== N.a) return [3, 5];
                                    d = {
                                        userID: this.props.reportContext.targetUserID,
                                        communityID: i || "",
                                        reason: t
                                    }, a.label = 1;
                                case 1:
                                    return a.trys.push([1, 3, , 4]), [4, this.props.reportUserInCommunity(Object(m.a)(d))];
                                case 2:
                                    return a.sent(), l.o.tracking.track(h.SpadeEventType.CommunityModeration, {
                                        community_id: i,
                                        name: r,
                                        is_official: !1,
                                        user_id: this.props.sessionUser && this.props.sessionUser.id,
                                        target_id: this.props.reportContext.targetUserID,
                                        action: "report",
                                        reason: e
                                    }), this.setState({
                                        submitStatus: N.b.Success
                                    }, function() {
                                        u.state.showWizard || u.trackAction(T.Submit)
                                    }), [3, 4];
                                case 3:
                                    return n = a.sent(), l.j.error(n, "ReportUserInCommunity Mutation failed."), this.setState({
                                        submitStatus: N.b.MutationError
                                    }), [3, 4];
                                case 4:
                                    return [3, 9];
                                case 5:
                                    if (s = o === y.a.Whisper ? o : this.props.reportContext.contentType, d = {
                                            description: t,
                                            reason: e,
                                            content: s,
                                            contentID: this.props.reportContext.contentID,
                                            extra: this.props.reportContext.extra,
                                            targetID: this.props.reportContext.targetUserID
                                        }, this.props.reportContext.contentType === y.a.Community && this.props.reportContext.extra && (d.description = Object(ae.a)(this.props.reportContext.extra, t)), null === d.targetID) return this.setState({
                                        submitStatus: N.b.UserError
                                    }), [2];
                                    a.label = 6;
                                case 6:
                                    return a.trys.push([6, 8, , 9]), [4, this.props.reportUser(Object(m.a)(d))];
                                case 7:
                                    return a.sent(), this.props.reportContext.contentType === y.a.Community && l.o.tracking.track(h.SpadeEventType.CommunityReport, {
                                        community_id: this.props.reportContext.contentID,
                                        name: this.props.reportContext.extra,
                                        is_official: !1,
                                        user_id: this.props.sessionUser && this.props.sessionUser.id,
                                        reason: e
                                    }), this.setState({
                                        submitStatus: N.b.Success
                                    }, function() {
                                        u.state.showWizard || u.trackAction(T.Submit)
                                    }), [3, 9];
                                case 8:
                                    return c = a.sent(), l.j.error(c, "ReportUser Mutation failed."), this.setState({
                                        submitStatus: N.b.MutationError
                                    }), [3, 9];
                                case 9:
                                    return [2]
                            }
                        })
                    })
                }, n.handleChildError = function(e) {
                    return n.setState({
                        submitStatus: e
                    })
                }, n.handleClose = function() {
                    n.props.onClose && n.props.onClose(n.state.submitStatus, n.state.userBlocked)
                }, n.onBlock = function() {
                    n.props.blockUserMutation(n.props.reportContext.targetUserID, void 0, void 0, a.__assign({}, n.props.sessionUser, {
                        __typename: "User"
                    })), n.setState({
                        userBlocked: !0
                    })
                }, n.onUnblock = function() {
                    n.props.unblockUserMutation(n.props.reportContext.targetUserID, a.__assign({}, n.props.sessionUser, {
                        __typename: "User"
                    })), n.setState({
                        userBlocked: !1
                    })
                }, n.trackOpen = function(e) {
                    n.state.openEventSent || (n.state.showWizard ? n.trackWizardAction(w.Open, void 0, e) : n.trackAction(T.Open), n.setState({
                        openEventSent: !0
                    }))
                }, n.trackClose = function(e, t) {
                    n.state.closeEventSent || (n.state.showWizard ? n.trackWizardAction(w.Close, t, void 0, e) : n.trackAction(T.Close), n.setState({
                        closeEventSent: !0
                    }))
                }, n.trackWizardAction = function(e, t, i, a) {
                    l.o.tracking.track(h.SpadeEventType.ReportWizardFlowAction, {
                        ui_context: n.props.reportContext.contentType,
                        target_user_id: n.props.reportContext.targetUserID,
                        report_sent: n.state.submitStatus === N.b.Success,
                        modal_type: "wizard_v1",
                        extra_user_id: n.props.reportContext.additionalTrackingID,
                        action: e,
                        close_type: a,
                        report_session_id: n.reportID,
                        current_step: t,
                        navigated_to: i
                    })
                }, n.trackAction = function(e) {
                    l.o.tracking.track(h.SpadeEventType.ReportFlowAction, {
                        ui_context: n.props.reportContext.contentType,
                        target_user_id: n.props.reportContext.targetUserID,
                        report_sent: n.state.submitStatus === N.b.Success,
                        extra_user_id: n.props.reportContext.additionalTrackingID,
                        action: e,
                        report_session_id: n.reportID
                    })
                }, n.reportID = Object(p.a)();
                var i = l.o.experiments.getAssignment("TWILIGHT_NEW_REPORTING_WIZARD");
                return n.state = {
                    submitStatus: N.b.Unsubmitted,
                    showWizard: "yes" === i,
                    openEventSent: !1,
                    closeEventSent: !1,
                    userBlocked: !1
                }, n
            }
            return a.__extends(t, e), t.prototype.componentDidMount = function() {
                this.trackOpen()
            }, t.prototype.componentWillUnmount = function() {
                this.handleClose(), this.state.showWizard || this.trackClose()
            }, t.prototype.render = function() {
                var e = {
                    onClose: this.handleClose,
                    onError: this.handleChildError,
                    onSubmit: this.handleSubmit,
                    reportContentType: this.props.reportContext.contentType,
                    submitStatus: this.state.submitStatus,
                    targetUserID: this.props.reportContext.targetUserID,
                    title: this.props.title,
                    defaultDescription: this.props.defaultDescription
                };
                return this.state.showWizard ? this.props.data.loading ? r.createElement(f._10, null) : r.createElement(ie, a.__assign({}, e, {
                    user: this.props.sessionUser,
                    targetUser: this.props.data.user,
                    onBlock: this.onBlock,
                    onUnblock: this.onUnblock,
                    trackAction: this.trackWizardAction,
                    trackClose: this.trackClose,
                    userBlocked: this.userBlocked
                })) : r.createElement(N.c, a.__assign({}, e))
            }, Object.defineProperty(t.prototype, "userBlocked", {
                get: function() {
                    var e = this;
                    return !(!this.props.data.currentUser.blockedUsers || !this.props.data.currentUser.blockedUsers.find(function(t) {
                        return !!t && t.id === e.props.reportContext.targetUserID
                    }))
                },
                enumerable: !0,
                configurable: !0
            }), t
        }(r.Component);
        var de = Object(s.d)(Object(d.a)(re, {
            name: "reportUserInCommunity"
        }), Object(d.a)(oe, {
            name: "reportUser"
        }), Object(d.a)(se, {
            options: function(e) {
                return {
                    variables: {
                        userId: e.reportContext.targetUserID
                    }
                }
            }
        }), Object(g.d)("ReportUser", {
            autoReportInteractive: !0
        }), Object(c.a)(), Object(u.a)(), Object(o.b)(function(e) {
            return {
                sessionUser: e.session.user
            }
        }, null))(le)
    },
    ACWz: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatInput"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isEmbedded"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "isEmbedded"
                                            }
                                        }
                                    }]
                                }]
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "hashtags"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "edges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "cursor"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "node"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 274
            }
        };
        n.loc.source = {
            body: "query ChatInput($channelLogin: String! $isEmbedded: Boolean!) {\ncurrentUser {\nid\nbitsBalance\nisPartner @include(if: $isEmbedded)\n}\nuser(login: $channelLogin) {\nid\ncheer {\nid\nhashtags {\nedges {\ncursor\nnode {\nid\n}\n}\n}\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nevent\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    AQmT: function(e, t) {},
    AaXK: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "selectedBadge"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "availableBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "availableBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 288
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_Badges($channelLogin: String!) {\ncurrentUser {\nid\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\nuser(login: $channelLogin) {\nid\nself {\nselectedBadge {\n...badge\n}\navailableBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    AsjC: function(e, t) {},
    AwFw: function(e, t) {},
    B88H: function(e, t) {},
    BBNG: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCard"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bannerImageURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "friendButtonFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channelUser"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "giftPromotion"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "newPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "oldPrice"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountType"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "discountValue"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 538
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nquery ViewerCard($targetLogin: String! $channelID: ID!) {\ntargetUser: user(login: $targetLogin) {\nid\nlogin\nbannerImageURL\ndisplayName\nprofileImageURL(width: 70)\n...friendButtonFragment\n}\nchannelUser: user(id: $channelID) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nprice\nurl\nemoteSetID\nemotes {\nid\n}\ngiftPromotion {\nnewPrice\noldPrice\ndiscountType\ndiscountValue\n}\n}\nself {\nisModerator\n}\n}\ncurrentUser {\nlogin\nid\nroles {\nisSiteAdmin\nisStaff\nisGlobalMod\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    BKhP: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Room_BanStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 127
            }
        };
        n.loc.source = {
            body: "query Room_BanStatus($channelID: ID! $userID: ID!) {\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    BMQ2: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("CIox"),
            s = n("2KeS"),
            l = n("6sO2"),
            d = n("7vx8"),
            c = n("HZww"),
            u = n("+xm8"),
            m = n("f2i/"),
            p = n("Aj/L"),
            h = function() {
                return function() {}
            }(),
            g = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.joinedRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.joinedRaids = t.joinedRaids), n
                }
                return i.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return this.joinedRaids.has(e.id) || this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        joinedRaids: this.joinedRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.add(e.id);
                    var i = this.getStorageData();
                    return i[e.id] = !0, this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.joinedRaids);
                    n.delete(e.id);
                    var i = this.getStorageData();
                    return delete i[e.id], this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        joinedRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    l.l.set("raid", e)
                }, t.prototype.getStorageData = function() {
                    return l.l.get("raid", {})
                }, t
            }(h),
            f = function(e) {
                function t(t) {
                    var n = e.call(this) || this;
                    return n.expiredRaids = new Set, n.leftRaids = new Set, t && (n.expiredRaids = t.expiredRaids, n.leftRaids = t.leftRaids), n
                }
                return i.__extends(t, e), t.prototype.isExpired = function(e) {
                    return this.expiredRaids.has(e.id)
                }, t.prototype.hasJoined = function(e) {
                    return !this.leftRaids.has(e.id) && !this.getStorageData()[e.id]
                }, t.prototype.expireRaid = function(e) {
                    var n = new Set(this.expiredRaids);
                    return n.add(e.id), new t({
                        expiredRaids: n,
                        leftRaids: this.leftRaids
                    })
                }, t.prototype.joinRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.delete(e.id);
                    var i = this.getStorageData();
                    return delete i[e.id], this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.leaveRaid = function(e) {
                    var n = new Set(this.leftRaids);
                    n.add(e.id);
                    var i = this.getStorageData();
                    return i[e.id] = !0, this.setStorageData(i), new t({
                        expiredRaids: this.expiredRaids,
                        leftRaids: n
                    })
                }, t.prototype.setStorageData = function(e) {
                    l.l.set("raids-left", e)
                }, t.prototype.getStorageData = function() {
                    return l.l.get("raids-left", {})
                }, t
            }(h),
            v = 3;
        var b = 5,
            k = "raid_update",
            y = function() {
                function e(e, t) {
                    this.id = e.raid.id, this.creatorID = e.raid.creator_id, this.sourceChannelID = e.raid.source_id, this.targetChannelID = e.raid.target_id, this.viewerCount = e.raid.viewer_count, t ? (this.varianceSeconds = t.varianceSeconds, this.totalDurationInSeconds = t.totalDurationInSeconds, this.clientCreatedAtTimestamp = t.clientCreatedAtTimestamp) : (this.varianceSeconds = Math.round(Math.random() * v * 2 - v), this.totalDurationInSeconds = this.getTotalDurationInSeconds(e.raid.remaining_duration_seconds), this.clientCreatedAtTimestamp = (new Date).getTime()), this.isAnnouncing = e.type === k && this.totalDurationInSeconds > 0, this.hasTimeToJoin = this.totalDurationInSeconds > b
                }
                return e.prototype.withMessage = function(t) {
                    return this.id !== t.raid.id ? new e(t) : new e(t, this)
                }, e.prototype.getRemainingJoinTime = function(e) {
                    void 0 === e && (e = new Date);
                    var t = e.getTime() - this.clientCreatedAtTimestamp;
                    return 1e3 * this.totalDurationInSeconds - t
                }, e.prototype.getTotalDurationInSeconds = function(e) {
                    var t = e + this.varianceSeconds;
                    return Math.max(t, 0)
                }, e
            }(),
            _ = "https://api.twitch.tv/kraken";
        var C = n("O0Qc"),
            S = n("Odds"),
            E = (n("z7Cp"), {
                "data-test-selector": "countdown-fill-width"
            }),
            N = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this,
                        t = this.props.startPolling || setInterval;
                    this.intervalID = t(function() {
                        return e.forceUpdate()
                    }, 1e3)
                }, t.prototype.componentWillUnmount = function() {
                    clearInterval(this.intervalID)
                }, t.prototype.componentDidUpdate = function() {
                    this.props.getRemainingTime() <= 0 && this.props.onCountdownEnd()
                }, t.prototype.render = function() {
                    var e = this.countdownPercentage + "%";
                    return a.createElement("div", {
                        className: "raid-countdown-bar"
                    }, a.createElement("div", i.__assign({
                        className: "raid-countdown-bar__fill",
                        style: {
                            width: e
                        }
                    }, E)))
                }, Object.defineProperty(t.prototype, "countdownPercentage", {
                    get: function() {
                        return this.props.getRemainingTime() / this.props.totalCountdownTime * 100
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.PureComponent),
            T = (n("mR/9"), n("vH/s")),
            w = {
                medium: "twitch_channel",
                content: "raid_channel"
            };

        function D(e, t) {
            var n = {
                raid_creator_id: Number(t.creatorID),
                raid_source_id: Number(t.sourceChannelID),
                raid_target_id: Number(t.targetChannelID),
                raid_id: t.id
            };
            l.n.track(e, n)
        }
        var R = n("UMQJ");
        var O = Object(d.a)(R, {
            options: function(e) {
                return {
                    variables: {
                        sourceChannelID: e.raid.sourceChannelID,
                        targetChannelID: e.raid.targetChannelID
                    }
                }
            }
        })(function(e) {
            if (e.data.loading || e.data.error) return a.createElement("div", null);
            var t = e.component,
                n = i.__rest(e, ["component"]);
            return a.createElement(t, i.__assign({}, n))
        });
        var I, M = {
                "data-test-selector": "current-raiders"
            },
            x = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getRemainingTime = function() {
                        return t.props.raid.getRemainingJoinTime()
                    }, t.handleCountdownEnd = function() {
                        t.props.onRaidInvitePeriodOver(t.props.data.targetChannel.login)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e;
                    e = this.props.raid, D(T.SpadeEventType.RaidPromptImpression, e)
                }, t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.sourceChannel,
                        n = e.targetChannel;
                    return a.createElement(S._35, {
                        className: "raid-notification",
                        background: S.n.AccentAlt2,
                        color: S.K.Overlay,
                        position: S._15.Absolute,
                        zIndex: S._62.Above,
                        fullWidth: !0
                    }, a.createElement(S._8, {
                        className: "raid-notification__content",
                        padding: {
                            y: 1,
                            x: 2
                        },
                        display: S.R.Flex,
                        justifyContent: S._7.Between
                    }, a.createElement(S._8, {
                        alignItems: S.c.Center,
                        display: S.R.Flex
                    }, a.createElement(S.m, {
                        size: 36,
                        src: t.profileImageURL,
                        alt: t.displayName
                    }), a.createElement(S._24, {
                        asset: S._25.AngleRight,
                        height: 10
                    }), a.createElement(S.m, {
                        size: 36,
                        src: n.profileImageURL,
                        alt: n.displayName
                    }), a.createElement(S._8, {
                        padding: {
                            left: 1
                        }
                    }, a.createElement(S.Q, {
                        color: S.K.OverlayAlt,
                        type: S._49.P,
                        className: "raid-notification__channel-name"
                    }, Object(l.d)("{sourceDisplayName} is", {
                        sourceDisplayName: t.displayName
                    }, "RaidCTASourceChannel")), a.createElement(S.Q, null, Object(l.d)("raiding {targetDisplayName}", {
                        targetDisplayName: n.displayName
                    }, "RaidCTATargetChannel")), a.createElement(S.Q, i.__assign({
                        bold: !0
                    }, M), Object(l.d)("{viewerCount, plural, one {# raider} other {# raiders}}", {
                        viewerCount: this.props.raid.viewerCount
                    }, "RaidCTATotalRaiders")))), this.props.children), a.createElement(N, {
                        totalCountdownTime: 1e3 * this.props.raid.totalDurationInSeconds,
                        getRemainingTime: this.getRemainingTime,
                        onCountdownEnd: this.handleCountdownEnd
                    }))
                }, t
            }(a.Component),
            j = (I = x, function(e) {
                return a.createElement(O, i.__assign({}, e, {
                    component: I
                }))
            }),
            L = {
                "data-test-selector": "raid-cancel-button"
            },
            A = function(e) {
                return a.createElement(S._8, {
                    alignSelf: S.d.Center
                }, a.createElement(S.v, i.__assign({
                    size: S.z.Large,
                    type: S.B.Hollow,
                    overlay: !0,
                    onClick: e.onCancelRaid
                }, L), Object(l.d)("Cancel", "RaidCTACancel")))
            },
            F = n("bQ8d"),
            U = {
                "data-test-selector": "join-raid-button"
            },
            B = {
                "data-test-selector": "leave-raid-button"
            },
            P = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.timerID = 0, t.handleLeaveRaid = function() {
                        clearTimeout(t.timerID), t.props.onLeaveRaid()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.hasJoined && (this.timerID = setTimeout(this.props.onJoinRaid, Object(F.a)(5e3)))
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.timerID)
                }, t.prototype.render = function() {
                    return this.props.hasJoined ? a.createElement(S._8, {
                        alignSelf: S.d.Center
                    }, a.createElement(S.v, i.__assign({
                        size: S.z.Large,
                        type: S.B.Hollow,
                        overlay: !0,
                        onClick: this.handleLeaveRaid
                    }, B), Object(l.d)("Leave", "RaidCTALeave"))) : a.createElement(S._8, {
                        alignSelf: S.d.Center
                    }, a.createElement(S.v, i.__assign({
                        size: S.z.Large,
                        onClick: this.props.onJoinRaid
                    }, U), Object(l.d)("Join", "RaidCTAJoin")))
                }, t
            }(a.Component),
            V = n("jML9"),
            W = n("OAwv");
        var H = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        raidStorage: new g
                    }, t.unsubscribe = function() {}, t.handlePubsubMessage = function(e) {
                        t.setState(function(t) {
                            return t.raid ? i.__assign({}, t, {
                                raid: t.raid.withMessage(e)
                            }) : i.__assign({}, t, {
                                raid: new y(e)
                            })
                        })
                    }, t.handleRaidInvitePeriodOver = function(e) {
                        var n = t.hasJoinedCurrentRaid;
                        if (t.state.raid && t.setState({
                                raidStorage: t.state.raidStorage.expireRaid(t.state.raid)
                            }), n) {
                            var a = function(e, t) {
                                var n;
                                if (function(e) {
                                        return !e.split("/")[2]
                                    }(e.pathname)) n = "/" + t;
                                else {
                                    if (! function(e) {
                                            return /^\/.+\/chat$/.test(e)
                                        }(e.pathname)) return "";
                                    n = "/" + t + "/chat"
                                }
                                var a = i.__assign({}, W.parse(e.search), {
                                    referrer: "raid"
                                });
                                return n + "?" + W.stringify(a)
                            }(t.props.history.location || window.location, e);
                            a && t.props.history.push(a, w)
                        }
                    }, t.handleJoinRaid = function() {
                        if (t.state.raid) {
                            var e, n = t.state.raid.id;
                            if (t.props.authToken) ! function(e, t) {
                                var n = {
                                    headers: {
                                        "Client-ID": l.o.config.legacyClientID,
                                        Authorization: "OAuth " + t,
                                        Accept: "application/vnd.twitchtv.v5+json"
                                    },
                                    method: "POST"
                                };
                                fetch(_ + "/raids/" + e + "/join", n)
                            }(n, t.props.authToken), e = t.state.raid, D(T.SpadeEventType.RaidPromptJoin, e), t.setState({
                                raidStorage: t.state.raidStorage.joinRaid(t.state.raid)
                            });
                            else t.props.login()
                        }
                    }, t.handleLeaveRaid = function() {
                        var e;
                        t.state.raid && (! function(e, t) {
                            var n = {
                                headers: {
                                    "Client-ID": l.o.config.legacyClientID,
                                    Authorization: "OAuth " + t,
                                    Accept: "application/vnd.twitchtv.v5+json"
                                },
                                method: "POST"
                            };
                            fetch(_ + "/raids/" + e + "/leave", n)
                        }(t.state.raid.id, t.props.authToken), e = t.state.raid, D(T.SpadeEventType.RaidPromptLeave, e), t.setState({
                            raidStorage: t.state.raidStorage.leaveRaid(t.state.raid)
                        }))
                    }, t.handleCancelRaid = function() {
                        t.state.raid && t.props.send(C.a)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.subscribe(this.props.channelID), "yes" === l.o.experiments.getAssignment("TWILIGHT_RAID_AUTO_JOIN") && this.setState({
                        raidStorage: new f
                    })
                }, t.prototype.render = function() {
                    return this.shouldRenderRaidNotification ? a.createElement(j, {
                        raid: this.state.raid,
                        onRaidInvitePeriodOver: this.handleRaidInvitePeriodOver
                    }, this.renderCTAButton()) : null
                }, t.prototype.componentWillUnmount = function() {
                    this.unsubscribe()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this;
                    this.props.channelID !== e.channelID && (this.unsubscribe(), this.setState({
                        raid: void 0
                    }, function() {
                        return t.subscribe(e.channelID)
                    }))
                }, t.prototype.subscribe = function(e) {
                    this.unsubscribe = l.o.pubsub.subscribe({
                        topic: Object(c.n)(e),
                        onMessage: this.handlePubsubMessage
                    })
                }, t.prototype.renderCTAButton = function() {
                    return this.isRaidCreator ? a.createElement(A, {
                        onCancelRaid: this.handleCancelRaid
                    }) : a.createElement(P, {
                        onJoinRaid: this.handleJoinRaid,
                        onLeaveRaid: this.handleLeaveRaid,
                        hasJoined: this.hasJoinedCurrentRaid
                    })
                }, Object.defineProperty(t.prototype, "shouldRenderRaidNotification", {
                    get: function() {
                        var e = this.state.raid;
                        return e && e.isAnnouncing && !this.state.raidStorage.isExpired(e) && (e.hasTimeToJoin || this.hasJoinedCurrentRaid)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "isRaidCreator", {
                    get: function() {
                        var e = this.state.raid;
                        return e && this.props.data && this.props.data.user && this.props.data.user.id === e.creatorID
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "hasJoinedCurrentRaid", {
                    get: function() {
                        var e = this.state.raid;
                        return !(!e || !this.props.authToken) && (this.isRaidCreator || this.state.raidStorage.hasJoined(e))
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(a.Component),
            G = Object(d.a)(V, {
                skip: function(e) {
                    return !e.authToken
                }
            })(H);
        var z = Object(r.b)(function(e) {
                return {
                    authToken: Object(p.a)(e)
                }
            }, function(e) {
                return Object(s.b)({
                    login: function() {
                        return Object(m.f)(u.a.RaidJoin)
                    }
                }, e)
            })(G),
            q = Object(o.f)(z);
        n.d(t, "a", function() {
            return q
        }), n.d(t, !1, function() {
            return z
        }), n.d(t, !1, function() {})
    },
    BTUa: function(e, t) {},
    BVQ1: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SendWhisper"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SendWhisperInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sendWhisper"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "content"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "content"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emotes"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteID"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "setID"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "to"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "from"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "editedAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "deletedAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 191
            }
        };
        n.loc.source = {
            body: "mutation SendWhisper($input: SendWhisperInput!) {\nsendWhisper(input: $input) {\nmessage {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Bh5x: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "InvalidRoomView"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "query InvalidRoomView($id: ID!) {\nroom(id: $id) {\nid\nname\nowner {\ndisplayName\nlogin\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Bir6: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
        }
    },
    BlKL: function(e, t) {},
    Bsuy: function(e, t) {},
    CFVp: function(e, t, n) {
        "use strict";
        t.a = function() {
            if (!l) {
                var e = [],
                    t = {};
                Object.keys(r).forEach(function(n) {
                    var i = c(n, r[n]);
                    e.push(i), t[n.toLowerCase()] = i
                }), l = {
                    orderedActions: e,
                    indexedActions: t
                }
            }
            return l
        }, t.b = function() {
            d || (d = function(e) {
                if (l) return l.indexedActions[e.toLowerCase()];
                return c(e, r[e])
            }("Cheer"));
            return d
        };
        var i = n("I89S"),
            a = n("3iBR"),
            r = {
                Cheer: a.d,
                Kreygasm: a.d,
                Kappa: a.d,
                Muxy: a.e,
                Streamlabs: a.e,
                SwiftRage: a.d,
                VoHiYo: a.d
            },
            o = ["LIGHT", "DARK"],
            s = [1, 1.5, 2, 3, 4],
            l = null;
        var d = null;

        function c(e, t) {
            var n = [i.a.Red, i.a.Blue, i.a.Green, i.a.Purple, i.a.Gray],
                a = new Map,
                r = [];
            if ("Cheer" === e) {
                var o = u(e, i.a.Yellow);
                a.set(i.a.Yellow, o), r.push(o)
            }
            return r.push.apply(r, n.map(function(t) {
                var n = u(e, t);
                return a.set(t, n), n
            })), {
                prefix: e,
                type: t,
                tiers: r,
                orderedTiers: r,
                indexedTiers: a
            }
        }

        function u(e, t) {
            for (var n = [], i = {}, r = 0, l = o; r < l.length; r++)
                for (var d = l[r], c = 0, u = s; c < u.length; c++) {
                    var p = u[c];
                    i[d] || (i[d] = {
                        animated: new Map,
                        static: new Map
                    });
                    var h = m(e, d, !0, t, p);
                    n.push(h), i[d].animated.set(p, h.url);
                    var g = m(e, d, !1, t, p);
                    n.push(g), i[d].static.set(p, g.url)
                }
            return {
                id: e + ";" + t,
                canCheer: t <= a.k,
                bits: t,
                color: a.f[t],
                images: n,
                indexedImages: i
            }
        }

        function m(e, t, n, i, a) {
            var r = n ? "gif" : "png";
            return {
                theme: t,
                isAnimated: n,
                dpiScale: a,
                url: "https://d3aqoihi2n8ty8.cloudfront.net/actions/" + e.toLowerCase() + "/" + t.toLowerCase() + "/" + (n ? "animated" : "static") + "/" + i + "/" + a + "." + r
            }
        }
    },
    CGWe: function(e, t) {},
    CHV0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Room"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topic"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "readMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sendMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 299
            }
        };
        n.loc.source = {
            body: "query Room($roomID: ID! $channelID: ID! $userID: ID!) {\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\nroom(id: $roomID) {\nid\nname\ntopic\nisPreviewable\nminimumAllowedRole\nself {\npermissions {\nreadMessages\nsendMessages\n}\n}\n}\nuser(id: $channelID) {\nid\nself {\nisModerator\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    CIWf: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportRoomInfo"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 70
            }
        };
        n.loc.source = {
            body: "query ReportRoomInfo($id: ID!) {\nroom(id: $id) {\nname\nowner {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    CwIZ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return l
        }), t.b = function(e) {
            return i.__awaiter(this, void 0, void 0, function() {
                var t, n, l, d, c, u, m, p, h, g, f, v, b;
                return i.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            t = a.n.getVideoPlayerTrackingData().vodID, n = !!t, l = {
                                channelID: e.channelID,
                                withVideo: !1
                            }, n && (l.withVideo = !0, l.videoID = t), d = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, a.o.apollo.client.query({
                                query: s,
                                variables: l
                            })];
                        case 2:
                            return d = i.sent(), [3, 4];
                        case 3:
                            return c = i.sent(), a.j.error(c, "Failed to make query for channel info in FollowEvent reporting.", {
                                channelID: e.channelID
                            }), [3, 4];
                        case 4:
                            return u = d && d.data && d.data.user || null, d && !u && a.j.error(new Error("GraphQL empty response"), "Query for channel info in SubEvent reporting returned no data.", {
                                channelID: e.channelID
                            }), m = null, d && n && ((p = d && d.data && d.data.video) ? m = Object(o.a)(p.broadcastType) : a.j.error(new Error("GraphQL empty response"), "Query for video info in SubEvent reporting returned no data.", {
                                currentVideoID: t
                            })), h = u && u.self, g = h ? !!h.subscriptionBenefit : null, f = h && h.subscriptionBenefit && h.subscriptionBenefit.purchasedWithPrime || !1, v = h ? h.canPrimeSubscribe : null, b = {
                                action: e.action,
                                can_subscribe: v,
                                channel: e.channelLogin,
                                channel_id: e.channelID,
                                checkout_button_tier: e.checkoutButtonTier,
                                has_sub_credit: e.hasSubCredit,
                                host_channel: e.hostChannelLogin,
                                host_channel_id: e.hostChannelID,
                                is_menu_open: e.isMenuOpen,
                                is_subscribed: g,
                                is_subscribed_current_tier: h && h.subscriptionBenefit && h.subscriptionBenefit.tier,
                                sub_location: e.sub_location,
                                sub_recipient: e.giftRecipient,
                                modal: e.modal,
                                modal_level: e.modalLevel || "",
                                show_prime_content: e.showPrimeContent,
                                show_resub: u ? v && f : null,
                                vod_id: t,
                                vod_type: m,
                                viewport_height: window.innerHeight,
                                viewport_width: window.innerWidth
                            }, a.n.track(r.SpadeEventType.Subscription, b), [2]
                    }
                })
            })
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            o = n("xrVp"),
            s = n("3QSP"),
            l = (n.n(s), {
                BuyGiftSub: "buy_gift_sub",
                ClickCheckout: "click_checkout_button",
                ClickMoreSubOptions: "more_options_click",
                ClickGiftSubOptions: "gift_options_click",
                ClickPrimeFAQ: "click_prime_faq",
                ClickSignupForPrime: "click_signup_for_prime",
                ClickBack: "back_top_level",
                CloseSubMenu: "close_subscribe_menu",
                GiftASub: "gift_a_sub",
                OpenSubMenu: "open_subscribe_menu",
                SubWithPrime: "samus_spend_credit"
            })
    },
    D3yV: function(e, t) {},
    D6l4: function(e, t, n) {
        "use strict";
        var i, a;
        n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return a
            }),
            function(e) {
                e.Bits = "bits", e.Leaderboard = "bits-leader"
            }(i || (i = {})),
            function(e) {
                e.Badge = "badge_update", e.Balance = "balance_update"
            }(a || (a = {}))
    },
    DCOT: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            var n = s[e.threadID];
            if (n) {
                if (n.lastReadCursorID >= t) return;
                clearTimeout(n.timeoutHandle)
            }
            var l = setTimeout(function() {
                var t = i.__assign({
                    mutation: o
                }, Object(r.a)({
                    threadID: e.threadID,
                    lastReadMessageID: e.lastReadMessageID
                }), {
                    optimisticResponse: {
                        updateWhisperThread: {
                            thread: {
                                __typename: "WhisperThread",
                                id: e.threadID,
                                unreadMessagesCount: 0
                            },
                            __typename: "UpdateWhisperThreadPayload"
                        }
                    }
                });
                a.o.apollo.client.mutate(t), delete s[e.threadID]
            }, 250);
            s[e.threadID] = {
                timeoutHandle: l,
                lastReadCursorID: t
            }
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("oIkB"),
            o = n("EBeM"),
            s = (n.n(o), {})
    },
    DS3o: function(e, t) {},
    DY3c: function(e, t) {},
    Dc1A: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "mutation ViewerCardModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Dr46: function(e, t) {},
    DtWM: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = (n("SX5d"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.logger = r.o.logger.withCategory("resize-detector"), t.onScroll = function() {
                        var e = t.container,
                            n = e.offsetWidth,
                            i = e.offsetHeight,
                            a = e.offsetLeft,
                            r = e.offsetTop;
                        t.logger.debug("Resize Detector -- onScroll"), n === t.width && i === t.height && r === t.top && a === t.left || (t.width = n, t.height = i, t.props.onResize(n, i, r, a)), t.reset()
                    }, t.setGrowDivRef = function(e) {
                        return t.growDiv = e
                    }, t.setGrowChildDivRef = function(e) {
                        return t.growChildDiv = e
                    }, t.setShrinkDivRef = function(e) {
                        return t.shrinkDiv = e
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("div", {
                        className: "resize-detector"
                    }, a.createElement("div", {
                        className: "resize-detector",
                        ref: this.setGrowDivRef
                    }, a.createElement("div", {
                        className: "resize-detector__grow",
                        ref: this.setGrowChildDivRef
                    })), a.createElement("div", {
                        className: "resize-detector",
                        ref: this.setShrinkDivRef
                    }, a.createElement("div", {
                        className: "resize-detector__shrink"
                    })))
                }, t.prototype.componentDidMount = function() {
                    if (this.growDiv) {
                        this.growDiv.parentElement || this.logger.warn("growDiv.parentElement is undefined!"), this.container = this.growDiv.parentElement.parentElement;
                        var e = this.container.style.position;
                        "relative" !== e && "absolute" !== e && "fixed" !== e && "static" === window.getComputedStyle(this.container).getPropertyValue("position") && (this.container.style.position = "relative"), this.onScroll(), this.growDiv.addEventListener("scroll", this.onScroll), this.shrinkDiv.addEventListener("scroll", this.onScroll)
                    } else this.logger.warn("growDiv is undefined!")
                }, t.prototype.componentWillUnmount = function() {
                    this.growDiv.removeEventListener("scroll", this.onScroll), this.shrinkDiv.removeEventListener("scroll", this.onScroll)
                }, t.prototype.reset = function() {
                    var e = this.growDiv,
                        t = this.shrinkDiv,
                        n = this.growChildDiv.style;
                    n.width = "100000px", n.height = "100000px", e.scrollLeft = 1e5, e.scrollTop = 1e5, t.scrollLeft = 1e5, t.scrollTop = 1e5
                }, t
            }(a.Component));
        n.d(t, "a", function() {
            return o
        })
    },
    E9JN: function(e, t) {},
    E9Qg: function(e, t, n) {
        e.exports = n.p + "assets/bg_glitch_pattern-34ca2e369aad1ed33b57f3d2d59c70eb.png"
    },
    EBeM: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Whispers_MarkThreadMessageRead"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMessagesCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 151
            }
        };
        n.loc.source = {
            body: "mutation Whispers_MarkThreadMessageRead($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nunreadMessagesCount\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ecgh: function(e, t) {},
    EsrG: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ModUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ModUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "modUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "target"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 119
            }
        };
        n.loc.source = {
            body: "mutation ModUser($input: ModUserInput!){\nmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\nlogin\n}\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "Ex+h": function(e, t, n) {
        "use strict";
        var i, a;
        n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return a
            }),
            function(e) {
                e.Playing = "PLAYING", e.Streaming = "BROADCASTING", e.Watching = "WATCHING"
            }(i || (i = {})),
            function(e) {
                e.Playing = "playing", e.Streaming = "broadcasting", e.Watching = "watching"
            }(a || (a = {}))
    },
    F8t6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DeleteRoomModal_DeleteRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DeleteRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "deleteRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "room"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 109
            }
        };
        n.loc.source = {
            body: "mutation DeleteRoomModal_DeleteRoom($input: DeleteRoomInput!) {\ndeleteRoom(input: $input) {\nroom {\nname\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    FDYX: function(e, t, n) {
        "use strict";
        t.d = function(e) {
            return e.some(function(e) {
                return !!e.self && !!e.self.promotion
            })
        }, t.c = function(e) {
            return e.some(function(e) {
                return !!e.giftPromotion
            })
        }, t.a = function(e, t) {
            var n;
            t ? n = e.giftPromotion : e.self && (n = e.self.promotion);
            if (n) return n.newPrice;
            return e.price
        }, t.b = function(e, t) {
            var n;
            t ? n = e.giftPromotion : e.self && (n = e.self.promotion);
            if (n) return n.discountValue;
            return 0
        }
    },
    FZFL: function(e, t) {},
    FsFC: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), t.b = function(e, t) {
            void 0 === t && (t = a.Humanized);
            var n;
            t === a.ClockAuto && (t = e >= 3600 ? a.ClockHMS : a.ClockMS);
            switch (t) {
                case a.ClockHM:
                case a.ClockHMS:
                    n = i.Hour;
                    break;
                case a.ClockMS:
                    n = i.Minute
            }
            var d = 2;
            t === a.ClockHMS && (d = 3);
            var c = function(e, t) {
                    void 0 === t && (t = i.Month);
                    var n = {};
                    if (n.seconds = e, e < 60 || t === i.Second) return n;
                    if (n.minutes = Math.floor(e / 60), n.seconds = e % 60, n.minutes < 60 || t === i.Minute) return n;
                    if (n.hours = Math.floor(n.minutes / 60), n.minutes = n.minutes % 60, n.hours < 24 || t === i.Hour) return n;
                    if (n.days = Math.floor(n.hours / 24), n.hours = n.hours % 24, n.days < 7 || t === i.Day) return n;
                    if (n.days <= 26 || t === i.Week) return n.weeks = Math.floor(n.days / 7), n.days = n.days % 7, n;
                    return n.months = Math.round((n.days + 3) / 30), n
                }(e, n),
                u = Object.keys(c);
            if (u.forEach(function(e, n) {
                    t !== a.Humanized && t !== a.HumanizedShort || c[e] || delete c[e], n < u.length - d && delete c[e]
                }), t === a.Humanized) return function(e) {
                return e.months ? o(i.Month, e.months) : e.weeks && e.days ? o(i.Week, e.weeks) + " " + o(i.Day, e.days) : e.weeks ? o(i.Week, e.weeks) : e.days && e.hours ? o(i.Day, e.days) + " " + o(i.Hour, e.hours) : e.days ? o(i.Day, e.days) : e.hours && e.minutes ? o(i.Hour, e.hours) + " " + o(i.Minute, e.minutes) : e.hours ? o(i.Hour, e.hours) : e.minutes && e.seconds ? o(i.Minute, e.minutes) + " " + o(i.Second, e.seconds) : e.minutes ? o(i.Minute, e.minutes) : o(i.Second, e.seconds || 0)
            }(c);
            if (t === a.HumanizedShort) return function(e) {
                return e.months ? s(i.Month, e.months) : e.weeks && e.days ? "" + s(i.Week, e.weeks) + s(i.Day, e.days) : e.weeks ? s(i.Week, e.weeks) : e.days && e.hours ? "" + s(i.Day, e.days) + s(i.Hour, e.hours) : e.days ? s(i.Day, e.days) : e.hours && e.minutes ? "" + s(i.Hour, e.hours) + s(i.Minute, e.minutes) : e.hours ? s(i.Hour, e.hours) : e.minutes && e.seconds ? "" + s(i.Minute, e.minutes) + s(i.Second, e.seconds) : e.minutes ? s(i.Minute, e.minutes) : s(i.Second, e.seconds || 0)
            }(c);
            var m = ":",
                p = !1;
            switch (r.o.intl.getLanguageCode()) {
                case "cy":
                case "da":
                case "fi":
                case "id":
                case "nb":
                case "si":
                    m = ".";
                    break;
                case "af":
                case "fr":
                case "lt":
                    p = !0
            }
            var h = c.seconds || 0,
                g = c.minutes || 0,
                f = c.hours || 0;
            switch (t) {
                case a.ClockHM:
                case a.ClockHMS:
                    var v = p ? l(f, 2) : f,
                        b = v + m + l(g, 2);
                    return t === a.ClockHMS && (b += m + l(h, 2)), b;
                case a.ClockMS:
                    var v = p ? l(g, 2) : g;
                    return v + m + l(h, 2)
            }
        };
        var i, a, r = n("6sO2");

        function o(e, t) {
            switch (e) {
                case i.Second:
                    return Object(r.d)("{secondCount, plural, one {# second} other {# seconds}}", {
                        secondCount: t
                    }, "formatDuration");
                case i.Minute:
                    return Object(r.d)("{minuteCount, plural, one {# minute} other {# minutes}}", {
                        minuteCount: t
                    }, "formatDuration");
                case i.Hour:
                    return Object(r.d)("{hourCount, plural, one {# hour} other {# hours}}", {
                        hourCount: t
                    }, "formatDuration");
                case i.Day:
                    return Object(r.d)("{dayCount, plural, one {# day} other {# days}}", {
                        dayCount: t
                    }, "formatDuration");
                case i.Week:
                    return Object(r.d)("{weekCount, plural, one {# week} other {# weeks}}", {
                        weekCount: t
                    }, "formatDuration");
                case i.Month:
                    return Object(r.d)("{monthCount, plural, one {# month} other {# months}}", {
                        monthCount: t
                    }, "formatDuration");
                default:
                    return ""
            }
        }

        function s(e, t) {
            switch (e) {
                case i.Second:
                    return Object(r.d)("{secondCount}s", {
                        secondCount: t
                    }, "formatDuration");
                case i.Minute:
                    return Object(r.d)("{minuteCount}m", {
                        minuteCount: t
                    }, "formatDuration");
                case i.Hour:
                    return Object(r.d)("{hourCount}h", {
                        hourCount: t
                    }, "formatDuration");
                case i.Day:
                    return Object(r.d)("{dayCount}d", {
                        dayCount: t
                    }, "formatDuration");
                case i.Week:
                    return Object(r.d)("{weekCount}w", {
                        weekCount: t
                    }, "formatDuration");
                case i.Month:
                    return Object(r.d)("{monthCount}mo", {
                        monthCount: t
                    }, "formatDuration");
                default:
                    return ""
            }
        }

        function l(e, t) {
            var n = e.toString();
            return n.length < t ? "0".repeat(t - n.length) + n : n
        }! function(e) {
            e[e.Second = 0] = "Second", e[e.Minute = 1] = "Minute", e[e.Hour = 2] = "Hour", e[e.Day = 3] = "Day", e[e.Week = 4] = "Week", e[e.Month = 5] = "Month"
        }(i || (i = {})),
        function(e) {
            e[e.Humanized = 0] = "Humanized", e[e.HumanizedShort = 1] = "HumanizedShort", e[e.ClockAuto = 2] = "ClockAuto", e[e.ClockHM = 3] = "ClockHM", e[e.ClockMS = 4] = "ClockMS", e[e.ClockHMS = 5] = "ClockHMS"
        }(a || (a = {}))
    },
    Fvfv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomsMemberOptions"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 74
            }
        };
        n.loc.source = {
            body: "query RoomsMemberOptions {\nuser(id: $id) {\nid\nself {\nisChannelMember\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "G/62": function(e, t) {},
    GHQc: function(e, t) {},
    "GS+L": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "MemberList"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "members"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "100"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "displayName"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "type"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 122
            }
        };
        n.loc.source = {
            body: "query MemberList($roomID: ID!) {\nroom(id: $roomID) {\nid\nmembers(first: 100) {\nedges {\nnode {\nid\ndisplayName\n}\ntype\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    GuSj: function(e, t) {},
    GxDs: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("F8kA"),
            o = n("yDzg"),
            s = n("vH/s"),
            l = n("6sO2"),
            d = n("Odds"),
            c = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasImageLoadingError: !1
                    }, t.handleImageError = function() {
                        t.setState({
                            hasImageLoadingError: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function() {
                    this.setState({
                        hasImageLoadingError: !1
                    })
                }, t.prototype.render = function() {
                    var e = l.a.defaultStreamPreviewURL;
                    return !this.state.hasImageLoadingError && this.props.imageURL && (e = this.props.imageURL), a.createElement(d.E, {
                        aspect: d.l.Aspect16x9,
                        alt: this.props.altText,
                        src: e,
                        onError: this.handleImageError
                    })
                }, t
            }(a.Component),
            u = (n("1tZx"), "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"),
            m = {
                ERROR: "chat-card-error",
                TITLE: "chat-card-title",
                DESCRIPTION: "chat-card-description"
            },
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderErrorCard = function() {
                        var e = a.createElement("img", {
                            "data-test-selector": m.ERROR,
                            src: u,
                            className: "chat-card__error-img"
                        });
                        return t.renderCardContent(e, t.props.error)
                    }, t.renderCardContent = function(e, t) {
                        var n, i;
                        return t ? (n = a.createElement(d.Q, {
                            type: d._49.Span,
                            fontSize: d.V.Size5,
                            "data-test-selector": m.TITLE,
                            title: t.title
                        }, t.title), i = a.createElement(d.Q, {
                            type: d._49.Span,
                            fontSize: d.V.Size6,
                            color: d.K.Alt2,
                            "data-test-selector": m.DESCRIPTION
                        }, t.description)) : (e = a.createElement(d._14, {
                            overlay: !0
                        }), n = a.createElement(d._14, {
                            width: 180
                        }), i = a.createElement(d._14, {
                            width: 120
                        })), a.createElement(d._35, {
                            background: d.n.Base,
                            display: d.R.Flex,
                            flexWrap: d.U.NoWrap,
                            padding: .5
                        }, a.createElement(d._35, {
                            className: "chat-card__preview-img",
                            background: d.n.Alt2,
                            display: d.R.Flex,
                            alignItems: d.c.Center,
                            justifyContent: d._7.Center,
                            flexShrink: 0
                        }, e), a.createElement(d._8, {
                            display: d.R.Flex,
                            alignItems: d.c.Center,
                            overflow: d._11.Hidden
                        }, a.createElement(d._8, {
                            padding: {
                                left: 1
                            },
                            fullWidth: !0
                        }, a.createElement(d._8, {
                            className: "chat-card__title",
                            ellipsis: !0
                        }, n), a.createElement(d._8, {
                            ellipsis: !0
                        }, i))))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e;
                    if (this.props.error) e = this.renderErrorCard();
                    else if (this.props.data) {
                        var t = Object(o.a)(this.props.data.contentURL, {
                                tt_medium: s.PageviewMedium.Chat,
                                tt_content: s.PageviewContent.ChatCard
                            }),
                            n = a.createElement(c, {
                                altText: this.props.data.title,
                                imageURL: this.props.data.previewImageURL
                            });
                        e = a.createElement(r.a, {
                            className: "chat-card__link",
                            to: t,
                            target: "_blank"
                        }, this.renderCardContent(n, {
                            title: this.props.data.title,
                            description: this.props.data.description
                        }))
                    } else e = this.renderCardContent();
                    return a.createElement(d._35, {
                        elevation: 1,
                        margin: {
                            top: .5
                        }
                    }, e)
                }, t
            }(a.Component),
            h = p;
        n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, "a", function() {
            return h
        })
    },
    GxF8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 125
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_ReportUser($input: ReportWhisperThreadInput!) {\nreportWhisperThread(input: $input) {\nthread {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "H/22": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.e = function(e, t, n, i) {
            var d = {
                    badges: null,
                    bits: 0,
                    color: "",
                    displayName: "",
                    id: "",
                    userID: n,
                    username: n,
                    userType: o.a.User,
                    emotes: null
                },
                c = Object(l.a)(t, d, r.a, !1);
            return {
                type: s.b.AutoMod,
                autoModType: s.a.MessageRejectedPrompt,
                id: function(e) {
                    return e + "-automod-rejected"
                }(e),
                category: i,
                rejectedMessage: a.__assign({}, c, {
                    type: s.b.Message,
                    messageType: s.c.Post,
                    id: e
                })
            }
        }, t.d = function() {
            return {
                id: Object(d.a)("automod-message-rejected"),
                type: s.b.AutoMod,
                autoModType: s.a.MessageRejected
            }
        }, t.b = function() {
            return {
                id: Object(d.a)("automod-message-allowed"),
                type: s.b.AutoMod,
                autoModType: s.a.MessageAllowed
            }
        }, t.c = function() {
            return {
                id: Object(d.a)("automod-message-denied"),
                type: s.b.AutoMod,
                autoModType: s.a.MessageDenied
            }
        }, t.f = function(e, t, n, a) {
            return {
                id: Object(d.a)("channel-moderation-action"),
                type: s.b.ModerationAction,
                moderationActionType: e,
                level: i.Channel,
                createdByLogin: t,
                createdByUserID: n,
                args: a
            }
        }, t.g = function(e, t, n, a, r, o, l) {
            return {
                id: Object(d.a)("channel-moderation-action"),
                type: s.b.ModerationAction,
                moderationActionType: e,
                level: i.User,
                createdByLogin: t,
                createdByUserID: n,
                targetUserID: a,
                targetUserLogin: r,
                duration: o,
                reason: l
            }
        };
        var i, a = n("TToO"),
            r = n("iydZ"),
            o = n("6Agf"),
            s = n("qkCi"),
            l = n("l21v"),
            d = n("INp2");
        ! function(e) {
            e[e.Channel = 0] = "Channel", e[e.User = 1] = "User"
        }(i || (i = {}))
    },
    HC5L: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "friendButtonFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "self"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "friendship"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "__typename"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 148
            }
        };
        n.loc.source = {
            body: "# Queries the fields necessary to render the FriendButton component.\nfragment friendButtonFragment on User {\nid\nself {\nfriendship {\n__typename\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    HZww: function(e, t, n) {
        "use strict";
        t.c = function(e) {
            return a.PubsubTopic.BroadcastSettingsUpdate + "." + e
        }, t.e = function(e) {
            return a.PubsubTopic.ChatRoom + "." + e
        }, t.f = function(e) {
            return a.PubsubTopic.ChatRoomsChannel + "." + e
        }, t.g = function(e) {
            return a.PubsubTopic.ChatRoomsUser + "." + e
        }, t.z = function(e) {
            return a.PubsubTopic.VideoThumbnailProcessing + "." + e
        }, t.i = function(e) {
            return a.PubsubTopic.ImageUpload + "." + e
        }, t.s = function(e) {
            return a.PubsubTopic.UploadService + "." + e
        }, t.y = function(e) {
            return a.PubsubTopic.VideoPlaybackById + "." + e
        }, t.l = function(e) {
            return a.PubsubTopic.PayoutOnboardingEvents + "." + e
        }, t.m = function(e) {
            return a.PubsubTopic.Presence + "." + e
        }, t.j = function(e, t) {
            return a.PubsubTopic.ModerationActionsByUserAndChannel + "." + e + "." + t
        }, t.n = function(e) {
            return a.PubsubTopic.Raid + "." + e
        }, t.o = function(e) {
            return a.PubsubTopic.StreamChange + "." + e
        }, t.h = function(e) {
            return a.PubsubTopic.Friendship + "." + e
        }, t.b = function(e) {
            return a.PubsubTopic.ChannelBitsPinEvents + "." + e
        }, t.a = function(e) {
            return a.PubsubTopic.BitsLeaderboardEvents + "." + e.id
        }, t.t = function(e) {
            return a.PubsubTopic.UserBitsUpdates + "." + e
        }, t.x = function(e) {
            return a.PubsubTopic.UserSubscribeEvents + "." + e
        }, t.w = function(e) {
            return a.PubsubTopic.UserCrateEvents + "." + e
        }, t.u = function(e) {
            return a.PubsubTopic.CampaignUserEvents + "." + e
        }, t.v = function(e) {
            return a.PubsubTopic.UserCommerceEvents + "." + e
        }, t.A = function(e) {
            return a.PubsubTopic.Whispers + "." + e
        }, t.k = function(e) {
            return a.PubsubTopic.OnsiteNotifications + "." + e
        }, t.p = function(e) {
            return a.PubsubTopic.StreamChatRoom + "." + e
        }, t.d = function(e) {
            return a.PubsubTopic.ChannelEventUpdates + "." + e
        }, t.r = function(e) {
            return i.k.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && !e.type && !e.types || t.type && e.type && t.type !== e.type || t.type && e.types && !e.types.includes(t.type) || Object(r.e)(e.query, e.variables, function(n) {
                        return e.mutator(t, n)
                    }, function(n) {
                        return !!e.skipMessage && e.skipMessage(t, n)
                    })
                }
            })
        }, t.q = function(e) {
            return i.k.subscribe({
                topic: e.topic,
                onMessage: function(t) {
                    t.type && t.type !== e.type || Object(r.d)({
                        fragment: e.fragment,
                        id: e.id,
                        mutator: function(n) {
                            return e.mutator(t, n)
                        }
                    })
                }
            })
        };
        var i = n("6sO2"),
            a = n("aMxy"),
            r = n("oIkB")
    },
    HuX0: function(e, t) {},
    I4TS: function(e, t) {},
    I89S: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.Gray = 1] = "Gray", e[e.Purple = 100] = "Purple", e[e.Green = 1e3] = "Green", e[e.Blue = 5e3] = "Blue", e[e.Red = 1e4] = "Red", e[e.Yellow = 1e5] = "Yellow"
            }(i || (i = {}))
    },
    IEOs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_DenyRejectedChatMessage"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DenyRejectedChatMessageInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "denyRejectedChatMessage"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "message"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "mutation Chat_DenyRejectedChatMessage($input: DenyRejectedChatMessageInput!) {\ndenyRejectedChatMessage(input: $input) {\nmessage {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    INp2: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e + "-" + Date.now()
        }
    },
    IRHd: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_TargetReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userId"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 132
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_TargetReportUser($userId: ID!) {\nuser(id: $userId) {\nid\ndisplayName\n}\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    IfJQ: function(e, t) {},
    Iv9R: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_Participants"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "friends"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "availability"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "activity"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "type"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Playing"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "game"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "name"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Streaming"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "stream"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "game"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "name"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "Watching"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "user"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "hosting"
                                                                        },
                                                                        arguments: [],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "id"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "displayName"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "title"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "imageURL"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 503
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_Participants($targetUserID: ID) {\ncurrentUser {\nid\nblockedUsers {\nid\n}\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\nfriends {\nedges {\nnode {\nid\n}\navailability\nactivity {\ntype\n... on Playing {\ngame {\nid\nname\n}\n}\n... on Streaming {\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n... on Watching {\nuser {\nid\ndisplayName\nlogin\nhosting {\nid\ndisplayName\n}\n}\n}\n}\n}\n}\n}\nuser(id: $targetUserID) {\nid\ndisplayBadges {\nid\ntitle\nimageURL\n}\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    J7iJ: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RitualsEnabled_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "ritualsEnabled"
                                },
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 153
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/rituals-enabled-fragment.gql"\nquery RitualsEnabled_User($id: ID!) {\nchannel: user(id: $id) {\n...ritualsEnabled\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("v2Uk").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "Jc+w": function(e, t) {},
    JtUK: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n) {
            void 0 === n && (n = !1);
            if (n) switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to timeout {login}.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAdmin:
                    return Object(i.d)("You cannot timeout admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAlreadyBanned:
                    return Object(i.d)("{login} is already banned in this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAnonymous:
                    return Object(i.d)("You cannot timeout anonymous users.", "BanUserErrorCode");
                case a.a.TargetIsBroadcaster:
                    return Object(i.d)("You cannot timeout the broadcaster.", "BanUserErrorCode");
                case a.a.TargetIsGlobalMod:
                    return Object(i.d)("You cannot timeout global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsMod:
                    return Object(i.d)("You cannot timeout moderator {login} unless you are the owner of this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsSelf:
                    return Object(i.d)("You cannot timeout yourself.", "BanUserErrorCode");
                case a.a.TargetIsStaff:
                    return Object(i.d)("You cannot timeout staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to timeout doesn't exist.", "BanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result.")
            } else switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to ban {login}.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAdmin:
                    return Object(i.d)("You cannot ban admin {login}. Please email support@twitch.tv if an admin is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAlreadyBanned:
                    return Object(i.d)("{login} is currently banned in this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsAnonymous:
                    return Object(i.d)("You cannot ban anonymous users.", "BanUserErrorCode");
                case a.a.TargetIsBroadcaster:
                    return Object(i.d)("You cannot ban the broadcaster.", "BanUserErrorCode");
                case a.a.TargetIsGlobalMod:
                    return Object(i.d)("You cannot ban global moderator {login}. Please email support@twitch.tv if a global moderator is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsMod:
                    return Object(i.d)("You cannot ban moderator {login} unless you are the owner of this channel.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetIsSelf:
                    return Object(i.d)("You cannot ban yourself.", "BanUserErrorCode");
                case a.a.TargetIsStaff:
                    return Object(i.d)("You cannot ban staff {login}. Please email support@twitch.tv if a staff member is being abusive.", {
                        login: e
                    }, "BanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to ban doesn't exist.", "BanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result.")
            }
        };
        var i = n("6sO2"),
            a = n("1OO3")
    },
    Jy6n: function(e, t) {},
    K1Jg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Presence_WatchingClick_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 158
            }
        };
        n.loc.source = {
            body: "query Presence_WatchingClick_User($login: String!) {\nuser(login: $login) {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\nhosting {\nid\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KBUQ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e) {
            var t = this;
            return Object(r.a)(o, {
                props: function(n) {
                    return {
                        unbanUserMutation: function(i) {
                            return a.__awaiter(t, void 0, void 0, function() {
                                var t;
                                return a.__generator(this, function(a) {
                                    switch (a.label) {
                                        case 0:
                                            if (t = e(n.ownProps).channelID, !n.mutate) return [3, 5];
                                            a.label = 1;
                                        case 1:
                                            return a.trys.push([1, 3, , 4]), [4, n.mutate({
                                                variables: {
                                                    input: {
                                                        channelID: t,
                                                        bannedUserLogin: i
                                                    }
                                                }
                                            })];
                                        case 2:
                                            return [2, a.sent().data];
                                        case 3:
                                            throw a.sent(), new Error("Unable to unban user");
                                        case 4:
                                            return [3, 6];
                                        case 5:
                                            throw new Error("Unban user mutation is not ready");
                                        case 6:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i, a = n("TToO"),
            r = n("7vx8"),
            o = n("l669");
        n.n(o);
        ! function(e) {
            e.Forbidden = "FORBIDDEN", e.TargetNotFound = "TARGET_NOT_FOUND", e.TargetNotBanned = "TARGET_NOT_BANNED"
        }(i || (i = {}))
    },
    KJtg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UnblockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnblockUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unblockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 100
            }
        };
        n.loc.source = {
            body: "mutation UnblockUser($input: UnblockUserInput!) {\nunblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KNSH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_UserData"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 95
            }
        };
        n.loc.source = {
            body: "query Chat_UserData {\nuser {\nid\ndisplayName\nlogin\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    KfLc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), n.d(t, "d", function() {
            return s
        }), n.d(t, "b", function() {
            return l
        }), n.d(t, "e", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var i = n("6sO2"),
            a = n("vH/s"),
            r = n("aSvS"),
            o = function(e) {
                var t = {
                    action: r.b.DismissToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            s = function(e) {
                var t = {
                    action: r.b.RedeemToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: e.userMessage
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            l = function(e) {
                var t = {
                    action: r.b.RequestEligibility,
                    channel_id: e.channelID,
                    user_banner: null,
                    user_message: null
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            d = function(e) {
                var t = {
                    action: r.b.RequestToken,
                    channel_id: e.channelID,
                    user_banner: e.bannerMessage,
                    user_message: null
                };
                i.n.track(a.SpadeEventType.NewChatterTokenStatus, t)
            },
            c = function(e) {
                var t = {
                    action: e.action,
                    channel_id: e.channelID
                };
                i.n.track(a.SpadeEventType.NewChatterOnboardingInteraction, t)
            }
    },
    KnZO: function(e, t) {},
    Kthq: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n) {
            void 0 === n && (n = !1);
            if (n) switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to untimeout {login}.", {
                        login: e
                    }, "UnbanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to untimeout doesn't exist.", "UnbanUserErrorCode");
                case a.a.TargetNotBanned:
                    return Object(i.d)("{login} is not currently timed out from this channel.", {
                        login: e
                    }, "UnbanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result")
            } else switch (t) {
                case a.a.Forbidden:
                    return Object(i.d)("You don't have permissions to unban {login}.", {
                        login: e
                    }, "UnbanUserErrorCode");
                case a.a.TargetNotFound:
                    return Object(i.d)("The user you are trying to unban doesn't exist.", "UnbanUserErrorCode");
                case a.a.TargetNotBanned:
                    return Object(i.d)("{login} is not currently banned from this channel.", {
                        login: e
                    }, "UnbanUserErrorCode");
                default:
                    throw new Error("Unrecognized operation result")
            }
        };
        var i = n("6sO2"),
            a = n("KBUQ")
    },
    Kxgf: function(e, t, n) {
        "use strict";
        t.a = function() {
            var e = this;
            return Object(a.a)(s, {
                props: function(t) {
                    return {
                        unblockUserMutation: function(n, a) {
                            return i.__awaiter(e, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n
                                                    }
                                                },
                                                optimisticResponse: {
                                                    unblockUser: {
                                                        __typename: "UnblockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: Object(o.a)(a),
                                                        fragment: r
                                                    });
                                                    t && (t.blockedUsers = t.blockedUsers.filter(function(e) {
                                                        return null !== e && e.id !== n
                                                    }), e.writeFragment({
                                                        id: Object(o.a)(a),
                                                        fragment: r,
                                                        data: t
                                                    }))
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return e.sent(), [3, 3];
                                        case 2:
                                            throw new Error("unblockUserMutation is not ready");
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i = n("TToO"),
            a = n("7vx8"),
            r = n("nmYW"),
            o = (n.n(r), n("yADj")),
            s = n("KJtg");
        n.n(s)
    },
    L0RX: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_UnbanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_UnbanUser($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    L8zk: function(e, t, n) {
        "use strict";
        var i = n("HW6M"),
            a = n("GiK3"),
            r = n("Odds"),
            o = (n("V+9p"), function(e) {
                var t = e.isAtMention ? "@" : "",
                    n = i("mention-fragment", {
                        "mention-fragment--recipient": e.isCurrentUserRecipient
                    });
                return a.createElement(r._8, {
                    className: n,
                    alignItems: r.c.Center,
                    display: r.R.InlineFlex,
                    "data-a-target": "chat-message-mention"
                }, "" + t + e.recipient)
            }),
            s = o;
        s.displayName = "MentionFragment", n.d(t, !1, function() {
            return o
        }), n.d(t, "a", function() {
            return s
        })
    },
    LM6T: function(e, t) {},
    LYwx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "EmotePicker_EmotePicker_UserSubscriptionProducts"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelOwnerID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelOwnerID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "url"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "price"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emotes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "emoteSetID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "promotion"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "newPrice"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "oldPrice"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "platform"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 286
            }
        };
        n.loc.source = {
            body: "query EmotePicker_EmotePicker_UserSubscriptionProducts($channelOwnerID: ID!) {\nuser(id: $channelOwnerID) {\nid\nlogin\ndisplayName\nsubscriptionProducts {\nid\nurl\nprice\nemotes {\nid\ntoken\n}\nemoteSetID\nself {\npromotion {\nnewPrice\noldPrice\n}\n}\n}\nself {\nsubscriptionBenefit {\nid\nplatform\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ldv2: function(e, t, n) {
        "use strict";
        t.a = function() {
            return Object(a.a)(o, {
                props: function(e) {
                    if (e.data) {
                        var t = e.data.currentUser && e.data.currentUser.emoteSets,
                            n = t && Object(r.a)(t);
                        return {
                            emoteSetsData: i.__assign({}, e.data, {
                                emoteMap: n,
                                emoteSets: t
                            })
                        }
                    }
                    return {}
                },
                skip: function(e) {
                    return !e.isLoggedIn
                }
            })
        };
        var i = n("TToO"),
            a = n("7vx8"),
            r = n("YhVV"),
            o = n("7B9K");
        n.n(o)
    },
    Lj1H: function(e, t, n) {
        "use strict";
        t.e = function(e) {
            return e.type === i.PubsubMessageType.WhisperSent
        }, t.d = function(e) {
            return e.type === i.PubsubMessageType.WhisperReceived
        }, t.b = function(e) {
            return e.type === i.PubsubMessageType.WhisperDeleted
        }, t.c = function(e) {
            return e.type === i.PubsubMessageType.WhisperEdited
        }, t.f = function(e) {
            return e.type === i.PubsubMessageType.WhisperThreadUpdate
        }, t.a = function(e) {
            return e.type === i.PubsubMessageType.WhisperAllThreadsUpdate
        };
        var i = n("aMxy")
    },
    LjAQ: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("HW6M"),
            r = n("GiK3"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("7vx8"),
            d = n("CSlQ"),
            c = n("xwpJ"),
            u = n("Odds"),
            m = n("x6ny"),
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleChange = function(e) {
                        t.props.onChange(e.target.value)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    this.props.data.loading && !this.props.data.error || this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    var e = null,
                        t = Object(s.d)("Select One...", "ReportUserModal");
                    this.props.data.loading ? e = [r.createElement("option", {
                        key: "Loading"
                    }, Object(s.d)("Loading...", "ReportReasonsSelect"))] : e = (this.props.data.reportReasons || Object(c.b)()).map(function(e) {
                        return r.createElement("option", {
                            key: e.id,
                            value: e.id
                        }, e.text)
                    });
                    return r.createElement(u._8, {
                        margin: {
                            bottom: 2
                        }
                    }, r.createElement(u.W, {
                        id: "reporting-modal__select",
                        label: Object(s.d)("Select Reason (required)", "ReportUserModal")
                    }, r.createElement(u._30, {
                        id: "reporting-modal__select",
                        "data-test-selector": "reporting-modal.select",
                        disabled: this.props.data.loading || !!this.props.data.error,
                        onChange: this.handleChange,
                        defaultValue: t
                    }, r.createElement("option", {
                        disabled: !0,
                        key: "default"
                    }, t), e)))
                }, t = i.__decorate([Object(d.d)("ReportReasonSelect")], t)
            }(r.Component),
            h = Object(l.a)(m, {
                options: function(e) {
                    return {
                        variables: {
                            content: e.reportContentType
                        }
                    }
                }
            })(p),
            g = (n("I4TS"), n("1EXI"));
        n.d(t, "a", function() {
            return v
        }), n.d(t, "b", function() {
            return f
        }), n.d(t, "c", function() {
            return k
        });
        var f, v = "community_rules_violation";
        ! function(e) {
            e[e.Unsubmitted = 0] = "Unsubmitted", e[e.Success = 1] = "Success", e[e.FormError = 2] = "FormError", e[e.MutationError = 3] = "MutationError", e[e.UserError = 4] = "UserError", e[e.CommunityError = 5] = "CommunityError"
        }(f || (f = {}));
        var b = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        community: null,
                        description: "",
                        reason: null,
                        isCommunityReason: !1,
                        selectedCommunityID: null,
                        selectedCommunityName: null
                    }, t.headerMessage = Object(s.d)("Tell us your concern about this content so that we can review it to determine whether there has been a violation of the {tosLink}. {br} (Abuse of this feature is a violation of the terms of service)", {
                        br: r.createElement("br", null),
                        tosLink: r.createElement("a", {
                            href: "https://www.twitch.tv/p/terms-of-service",
                            target: "_blank"
                        }, Object(s.d)("terms of service", "ReportUser"))
                    }, "ReportUser"), t.selectCommunity = function(e) {
                        t.setState({
                            selectedCommunityID: e.target.value,
                            selectedCommunityName: e.target.getAttribute("data-community-name")
                        })
                    }, t.handleSubmit = function(e) {
                        if (e.preventDefault(), t.state.reason && t.state.description.length > 0) {
                            if (t.state.reason === v && !t.state.selectedCommunityID) {
                                if (t.props.data.user && !t.props.data.user.directories.nodes.length) return void t.props.onError(f.CommunityError);
                                t.props.onError(f.FormError)
                            }
                            t.props.onSubmit(t.state.reason || "", t.state.description, t.state.selectedCommunityID, t.state.selectedCommunityName)
                        } else t.props.onError(f.FormError)
                    }, t.handleTextAreaChange = function(e) {
                        t.setState({
                            description: e.target.value
                        })
                    }, t.handleReasonChange = function(e) {
                        if (!t.props.data || t.props.data.loading || t.props.data.error || !t.props.data.user) return null;
                        var n = t.props.data.user.directories ? t.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        }) : [];
                        n.length && e === v ? t.setState({
                            reason: e,
                            selectedCommunityID: n[0].id,
                            selectedCommunityName: n[0].name,
                            isCommunityReason: !0
                        }) : t.setState({
                            reason: e,
                            isCommunityReason: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(u._8, {
                        display: u.R.Flex,
                        flexDirection: u.T.Column,
                        alignItems: u.c.Center,
                        justifyContent: u._7.Center
                    }, this.renderStatusMessage(), this.renderBody())
                }, t.prototype.renderBody = function() {
                    return this.props.submitStatus === f.Success ? r.createElement("div", null, r.createElement(u.v, {
                        onClick: this.props.onClose
                    }, r.createElement(u._8, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Close", "ReportUser")))) : r.createElement("div", null, r.createElement(u._8, {
                        "data-test-selector": "reporting.title",
                        margin: {
                            bottom: 1
                        },
                        "data-a-target": "reporting-channel-name"
                    }, r.createElement(u.Q, {
                        type: u._49.H4
                    }, this.props.title), r.createElement(u._35, {
                        color: u.K.Alt2,
                        margin: {
                            top: 1
                        }
                    }, this.headerMessage)), r.createElement("form", null, r.createElement(u._35, {
                        borderTop: !0,
                        borderBottom: !0,
                        margin: {
                            y: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, r.createElement(h, {
                        reportContentType: this.props.reportContentType,
                        onChange: this.handleReasonChange
                    }), this.renderCommunitiesSelector(), r.createElement(u.W, {
                        id: "reporting__text-area",
                        label: Object(s.d)("Description (required)", "ReportUser")
                    }, r.createElement(u._46, {
                        defaultValue: this.props.defaultDescription,
                        onChange: this.handleTextAreaChange
                    }))), r.createElement(u._35, {
                        display: u.R.Flex,
                        justifyContent: u._7.Center
                    }, r.createElement(u.v, {
                        onClick: this.handleSubmit
                    }, r.createElement(u._8, {
                        padding: {
                            x: 2
                        }
                    }, Object(s.d)("Send", "ReportUser"))))))
                }, t.prototype.renderCommunitiesSelector = function() {
                    if (!this.props.data || this.props.data.loading || this.props.data.error || !this.props.data.user) return null;
                    if (this.state.isCommunityReason) {
                        var e = this.props.data.user.directories.nodes.filter(function(e) {
                            return "COMMUNITY" === e.directoryType
                        }).map(function(e) {
                            return r.createElement("option", {
                                key: e.id,
                                value: e.id,
                                "data-community-name": e.name
                            }, e.displayName)
                        });
                        return r.createElement(u._8, {
                            margin: {
                                bottom: 2
                            }
                        }, r.createElement(u.W, {
                            id: "reporting__select-community",
                            label: Object(s.d)("Community", "ReportUser")
                        }, r.createElement(u._30, {
                            id: "reporting__select-community",
                            "data-test-selector": "reporting.select-community",
                            disabled: this.props.data.loading || !!this.props.data.error,
                            onChange: this.selectCommunity
                        }, e)))
                    }
                }, t.prototype.renderStatusMessage = function() {
                    var e = null;
                    switch (this.props.submitStatus) {
                        case f.FormError:
                            e = Object(s.d)("Reason and Description are required.", "ReportUser");
                            break;
                        case f.MutationError:
                            e = Object(s.d)("Sorry, a network error occurred when submitting your report. Please try again later.", "ReportUser");
                            break;
                        case f.Success:
                            e = Object(s.d)("Thank you for your report.", "ReportUser");
                            break;
                        case f.UserError:
                            e = Object(s.d)("This account could not be reported. It may have already been suspended, or the owner may have deleted it.", "ReportUser");
                            break;
                        case f.CommunityError:
                            e = Object(s.d)("A report of this type could not be sent because this user has not selected a Community.", "ReportUser");
                            break;
                        default:
                            return null
                    }
                    var t = a({
                        "reporting__error-container": this.props.submitStatus !== f.Success,
                        "reporting__success-container": this.props.submitStatus === f.Success
                    });
                    return r.createElement(u._35, {
                        className: t,
                        fullWidth: this.props.submitStatus !== f.Success,
                        "data-test-selector": "reporting.error",
                        margin: {
                            bottom: 2
                        },
                        padding: 1
                    }, e)
                }, t
            }(r.Component),
            k = Object(o.d)(Object(l.a)(g, {
                options: function(e) {
                    return {
                        fetchPolicy: "network-only",
                        variables: {
                            userId: e.targetUserID
                        }
                    }
                }
            }))(b)
    },
    "Lx+S": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("CIox"),
            s = n("2KeS"),
            l = n("NXs7"),
            d = n("Ouuk"),
            c = n("jF7o"),
            u = n("+xm8"),
            m = n("f2i/"),
            p = n("NikC"),
            h = n("Aj/L"),
            g = n("0nzt"),
            f = n("vh75"),
            v = n("ass3"),
            b = n("TnJK"),
            k = n("O0Qc"),
            y = n("VsL1"),
            _ = n("Umoc"),
            C = n("6sO2"),
            S = n("zCIC"),
            E = n("7vx8"),
            N = n("HW6M"),
            T = n("6BvN"),
            w = [{
                name: "Red",
                hex: "#FF0000"
            }, {
                name: "Blue",
                hex: "#0000FF"
            }, {
                name: "Green",
                hex: "#008000"
            }, {
                name: "Firebrick",
                hex: "#B22222"
            }, {
                name: "Coral",
                hex: "#FF7F50"
            }, {
                name: "Yellow Green",
                hex: "#9ACD32"
            }, {
                name: "Orange Red",
                hex: "#FF4500"
            }, {
                name: "Sea Green",
                hex: "#2E8B57"
            }, {
                name: "Goldenrod",
                hex: "#DAA520"
            }, {
                name: "Chocolate",
                hex: "#D2691E"
            }, {
                name: "Cadet Blue",
                hex: "#5F9EA0"
            }, {
                name: "Dodger Blue",
                hex: "#1E90FF"
            }, {
                name: "Hot Pink",
                hex: "#FF69B4"
            }, {
                name: "Blue Violet",
                hex: "#8A2BE2"
            }, {
                name: "Spring Green",
                hex: "#00FF7F"
            }],
            D = n("Odds"),
            R = (n("90yy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onKeyPress = function(e) {
                        if (e.charCode === T.a.Enter || e.charCode === T.a.Space) {
                            var n = e.currentTarget.getAttribute("data-color");
                            t.selectColor(n)
                        }
                    }, t.onColorSelected = function(e) {
                        var n = e.currentTarget.getAttribute("data-color");
                        t.selectColor(n)
                    }, t.selectColor = function(e) {
                        e && t.props.onColorSelected(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = w.map(function(t) {
                            var n = t.hex === e.props.selectedColor,
                                i = {
                                    "color-chooser": !0,
                                    "color-chooser--selected": n
                                };
                            return a.createElement("div", {
                                role: "radio",
                                "aria-checked": n,
                                key: t.hex,
                                "data-color": t.hex,
                                title: t.name,
                                onClick: e.onColorSelected,
                                onKeyPress: e.onKeyPress,
                                className: N(i),
                                style: {
                                    backgroundColor: t.hex
                                },
                                "data-test-selector": "color_swatch_" + t.hex,
                                "data-a-target": "color_swatch_" + t.hex,
                                tabIndex: 0
                            })
                        }),
                        n = Object(C.d)("Name Color", "ChatSettings"),
                        i = a.createElement(D.Q, {
                            transform: D._48.Uppercase,
                            color: D.K.Alt2
                        }, n);
                    return this.props.borderTop && (i = a.createElement(D._35, {
                        margin: {
                            top: 2
                        },
                        borderTop: !0,
                        padding: {
                            top: 2
                        }
                    }, i)), a.createElement("div", null, a.createElement(D._35, {
                        margin: {
                            bottom: 1
                        },
                        background: D.n.Base,
                        color: D.K.Base,
                        display: D.R.InlineFlex,
                        flexDirection: D.T.Column,
                        fullWidth: !0
                    }, i), a.createElement(D._2, {
                        margin: {
                            y: 1
                        },
                        display: D.R.Flex,
                        flexWrap: D.U.Wrap
                    }, a.createElement("div", {
                        role: "radiogroup",
                        "aria-label": n
                    }, t, a.createElement(D.Q, {
                        fontSize: D.V.Size7
                    }, a.createElement("a", {
                        href: "https://twitch.tv/products/turbo?ref=more_colors_direct"
                    }, Object(C.d)("more colors →", "ChatSettings"))))))
                }, t
            }(a.Component)),
            O = n("OAwv"),
            I = n("AaXK"),
            M = (n("7LVu"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onGlobalBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setGlobalBadge(t.props.userLogin, n || "")
                    }, t.onGlobalBadgeKeyPress = function(e) {
                        if (e.charCode === T.a.Enter || e.charCode === T.a.Space) {
                            var n = e.currentTarget.getAttribute("data-badge");
                            t.setGlobalBadge(t.props.userLogin, n || "")
                        }
                    }, t.onChannelBadgeClicked = function(e) {
                        var n = e.currentTarget.getAttribute("data-badge");
                        t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                    }, t.onChannelBadgeKeyPress = function(e) {
                        if (e.charCode === T.a.Enter || e.charCode === T.a.Space) {
                            var n = e.currentTarget.getAttribute("data-badge");
                            t.setChannelBadge(t.props.channelLogin, t.props.userLogin, n || "")
                        }
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.data && !this.props.data.loading && this.props.data.user && this.props.data.currentUser ? a.createElement("div", null, a.createElement(R, {
                        selectedColor: this.props.userChatColor,
                        onColorSelected: this.props.onColorSelected,
                        borderTop: !0
                    }), this.getBadgeChooser()) : null
                }, t.prototype.getBadgeChooser = function() {
                    var e = this;
                    if (this.props.data) {
                        var t = this.props.data.user.self.availableBadges,
                            n = this.props.data.user.self.selectedBadge,
                            i = this.props.data.currentUser.availableBadges,
                            r = this.props.data.currentUser.selectedBadge;
                        if (!t) return null;
                        var o = void 0 === this.state.channelBadgeID && n ? n.setID : this.state.channelBadgeID,
                            s = !o,
                            l = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": s
                            },
                            d = Object(C.d)("No channel badges :(", "ChatSettings");
                        t && t.length > 0 && (d = t.map(function(t) {
                            var i = Boolean(n && t.setID === o),
                                r = {
                                    "edit-appearance__badge-chooser": !0,
                                    "edit-appearance__badge-chooser--selected": i
                                };
                            return a.createElement("div", {
                                role: "radio",
                                "aria-checked": i,
                                "data-badge": t.setID,
                                onClick: e.onChannelBadgeClicked,
                                onKeyPress: e.onChannelBadgeKeyPress,
                                key: t.setID + "/" + t.version,
                                className: N(r),
                                "data-test-selector": "channel_badge_" + t.setID,
                                "data-a-target": "channel_badge_" + t.setID,
                                tabIndex: 0
                            }, a.createElement(D._52, {
                                label: t.title
                            }, a.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(a.createElement("div", {
                            key: "none",
                            role: "radio",
                            "aria-checked": s,
                            "data-badge": "",
                            onClick: this.onChannelBadgeClicked,
                            onKeyPress: this.onChannelBadgeKeyPress,
                            className: N(l),
                            "data-test-selector": "channel_badge_none",
                            "data-a-target": "channel_badge_none",
                            tabIndex: 0
                        }, a.createElement(D._52, {
                            label: Object(C.d)("Same as Global", "ChatSettings")
                        }, a.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, a.createElement(D._24, {
                            asset: D._25.Global
                        })))));
                        var c = void 0 === this.state.globalBadgeID && r ? r.setID : this.state.globalBadgeID,
                            u = !c,
                            m = {
                                "edit-appearance__badge-chooser": !0,
                                "edit-appearance__badge-chooser--selected": u
                            },
                            p = Object(C.d)("No global badges :(", "ChatSettings");
                        return i && i.length > 0 && (p = i.map(function(t) {
                            var n = Boolean(r && t.setID === c),
                                i = {
                                    "edit-appearance__badge-chooser": !0,
                                    "edit-appearance__badge-chooser--selected": n
                                };
                            return a.createElement("div", {
                                role: "radio",
                                "aria-checked": n,
                                "data-badge": t.setID,
                                onClick: e.onGlobalBadgeClicked,
                                onKeyPress: e.onGlobalBadgeKeyPress,
                                key: t.setID + "/" + t.version,
                                className: N(i),
                                "data-test-selector": "global_badge_" + t.setID,
                                "data-a-target": "global_badge_" + t.setID,
                                tabIndex: 0
                            }, a.createElement(D._52, {
                                label: t.title
                            }, a.createElement("img", {
                                alt: t.title,
                                src: t.image1x,
                                srcSet: t.image1x + " 1x, " + t.image2x + " 2x, " + t.image4x + " 4x"
                            })))
                        })).push(a.createElement("div", {
                            role: "radio",
                            "aria-checked": u,
                            key: "none",
                            "data-badge": "",
                            onClick: this.onGlobalBadgeClicked,
                            onKeyPress: this.onGlobalBadgeKeyPress,
                            className: N(m),
                            "data-test-selector": "global_badge_none",
                            "data-a-target": "global_badge_none",
                            tabIndex: 0
                        }, a.createElement(D._52, {
                            label: Object(C.d)("None", "ChatSettings")
                        }, a.createElement("div", {
                            className: "edit-appearance__badge-chooser__none"
                        }, a.createElement(D._24, {
                            asset: D._25.Ban
                        }))))), a.createElement("div", null, a.createElement(D._35, {
                            background: D.n.Base,
                            color: D.K.Base,
                            display: D.R.InlineFlex,
                            flexDirection: D.T.Column,
                            fullWidth: !0
                        }, a.createElement(D._35, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, a.createElement(D._52, {
                            align: D._53.Left,
                            label: Object(C.d)("Your global badge is shown when chatting and whispering.", "ChatSettings"),
                            width: 175
                        }, a.createElement(D.Q, {
                            color: D.K.Alt2,
                            transform: D._48.Uppercase
                        }, Object(C.d)("Global Badge [?]", "ChatSettings")))), a.createElement(D._2, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: D.R.Flex,
                            "data-a-target": "global-badge-selector"
                        }, a.createElement("div", {
                            role: "radiogroup"
                        }, p))), a.createElement(D._35, {
                            background: D.n.Base,
                            color: D.K.Base,
                            display: D.R.InlineFlex,
                            flexDirection: D.T.Column,
                            fullWidth: !0
                        }, a.createElement(D._35, {
                            margin: {
                                top: 2
                            },
                            padding: {
                                top: 2
                            },
                            borderTop: !0
                        }, a.createElement(D._52, {
                            align: D._53.Left,
                            label: Object(C.d)("Change the badge shown when chatting in this channel.", "ChatSettings"),
                            width: 175
                        }, a.createElement(D.Q, {
                            color: D.K.Alt2,
                            transform: D._48.Uppercase
                        }, Object(C.d)("Channel Badge [?]", "ChatSettings")))), a.createElement(D._2, {
                            margin: {
                                y: 1
                            },
                            padding: {
                                top: 1
                            },
                            display: D.R.Flex,
                            "data-a-target": "channel-badge-selector"
                        }, a.createElement("div", {
                            role: "radiogroup"
                        }, d))))
                    }
                }, t.prototype.setChannelBadge = function(e, t, n) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var a, r;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return a = {
                                        "Client-ID": C.o.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, [4, fetch("https://api.twitch.tv/kraken/users/" + t + "/chat/channels/" + e + "/badges", {
                                        method: "PUT",
                                        body: O.stringify({
                                            selected_badge: n
                                        }),
                                        headers: a
                                    })];
                                case 1:
                                    return (r = i.sent()) && r.ok && (this.props.onBadgesChanged(), this.setState({
                                        channelBadgeID: n
                                    })), [2]
                            }
                        })
                    })
                }, t.prototype.setGlobalBadge = function(e, t) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var n, a;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return n = {
                                        "Client-ID": C.o.config.legacyClientID,
                                        Accept: "application/vnd.twitchtv.v4+json; charset=UTF-8",
                                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                                        "Accept-Language": "en-us",
                                        Authorization: "OAuth " + this.props.authToken
                                    }, [4, fetch("https://api.twitch.tv/kraken/users/" + e + "/chat/badges", {
                                        method: "PUT",
                                        body: O.stringify({
                                            selected_badge: t
                                        }),
                                        headers: n
                                    }).catch(console.error)];
                                case 1:
                                    return (a = i.sent()) && a.ok && (this.props.onBadgesChanged(), this.setState({
                                        globalBadgeID: t
                                    })), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(E.a)(I, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(a.Component)),
            x = n("+Znq"),
            j = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(D._8, {
                        "data-toggle-balloon-id": "raids-follower-only-tooltip",
                        margin: {
                            left: .5
                        },
                        position: D._15.Relative
                    }, a.createElement(D._52, {
                        align: D._53.Right,
                        direction: D._54.Top,
                        display: D.R.InlineFlex,
                        label: this.props.text,
                        width: 175,
                        show: !0
                    }, a.createElement(D._2, {
                        alignItems: D.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: D.R.InlineFlex,
                        justifyContent: D._7.Center
                    }, a.createElement(D.Q, {
                        color: D.K.Overlay,
                        fontSize: D.V.Size8,
                        type: D._49.Span,
                        "data-test-selector": "raids-follower-only-tooltip"
                    }, "i"))))
                }, t
            }(a.Component),
            L = n("V5M+"),
            A = n("oSFp"),
            F = n("F8kA"),
            U = n("9u8h"),
            B = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.targetChannelID = t.props.targetChannelID, t
                }
                return i.__extends(t, e), t.fetchRecentRaidsList = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, U.a.get("/kraken/raids?client_id=" + C.a.authSettings.clientID + "&api_version=" + C.a.defaultAPIVersion + "&target_id=" + e)];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), C.j.error(n, "Couldn't fetch raids list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, t.deserialize = function(e) {
                    var t = [];
                    if (e.body && e.body.raids) {
                        for (var n in e.body.raids)
                            if (n.hasOwnProperty) {
                                var i = {
                                    raidID: e.body.raids[n]._id,
                                    raidAt: e.body.raids[n].raid_at,
                                    userID: e.body.raids[n].creator_user._id,
                                    name: e.body.raids[n].creator_user.name
                                };
                                t.push(i)
                            }
                        return t
                    }
                    return []
                }, t
            }(a.Component),
            P = n("oIkB"),
            V = n("g7wA"),
            W = n("O9wU"),
            H = n("jPU6"),
            G = n("y1/w"),
            z = (n("MSFW"), n("L0RX")),
            q = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onUsernameClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-username"),
                            i = e.currentTarget.getAttribute("data-raid-id") || "";
                        n && t.props.onUsernameClick(n, W.a.recent_raids, i)
                    }, t.onBanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.banUser)(Object(P.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t.onUnbanButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-channel-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-login") || "";
                        (0, t.props.unbanUser)(Object(P.a)({
                            channelID: n,
                            bannedUserLogin: i
                        }))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(D._8, {
                        key: "recent-raids-layout2-" + this.props.raiderUserID,
                        className: "recent-raids-item",
                        flexDirection: D.T.Row,
                        display: D.R.Flex,
                        fullWidth: !0
                    }, a.createElement(D._8, {
                        flexDirection: D.T.Row,
                        display: D.R.Flex,
                        fullWidth: !0,
                        justifyContent: D._7.Between
                    }, a.createElement(D.Q, {
                        bold: !0
                    }, a.createElement("a", {
                        className: "recent-raids-item__name",
                        "data-username": this.props.channelLogin,
                        "data-raid-id": this.props.raidID,
                        onClick: this.onUsernameClick,
                        href: "#"
                    }, this.props.channelLogin)), a.createElement(D._8, {
                        position: D._15.Relative
                    }, a.createElement(D._8, {
                        className: "recent-raids-item__timestamp"
                    }, Object(V.k)(Date.parse(this.props.timestamp))), this.getCardSlideInContent())))
                }, t.prototype.getCardSlideInContent = function() {
                    if (!this.props.slideInContent) return null;
                    var e = null;
                    return e = this.props.data.chatRoomBanStatus && this.props.data.chatRoomBanStatus.isPermanent ? a.createElement(D.v, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: D.z.Small,
                        type: D.B.Text,
                        onClick: this.onUnbanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(C.d)("Unban", "RecentRaid")) : a.createElement(D.v, {
                        key: "recent-raids-ban-button-" + this.props.raiderUserID,
                        size: D.z.Small,
                        type: D.B.Text,
                        onClick: this.onBanButtonClick,
                        "data-a-target": "recent-raid-item-button",
                        "data-raid-id": this.props.raidID,
                        "data-target-user-login": this.props.raiderLogin,
                        "data-target-user-id": this.props.raiderUserID,
                        "data-channel-id": this.props.channelID
                    }, Object(C.d)("Ban", "RecentRaid")), a.createElement(D._8, {
                        key: "recent-raids-layout-" + this.props.raiderUserID,
                        className: "recent-raids-item__hover-content",
                        zIndex: D._62.Above,
                        "data-a-target": "recent-raids-item-hover"
                    }, this.props.slideInContent, e)
                }, t = i.__decorate([Object(E.a)(G, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.raiderUserID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(E.a)(H, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var i = e.readQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        }
                                    });
                                    i && (t && t.data && (i.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: n.raiderUserID,
                                            channelID: n.channelID
                                        },
                                        data: i
                                    }))
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(E.a)(z, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                        query: G,
                                        variables: {
                                            targetUserID: t.raiderUserID,
                                            channelID: t.channelID
                                        }
                                    });
                                    if (n) {
                                        var a = i.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                        e.writeQuery({
                                            query: G,
                                            variables: {
                                                targetUserID: t.raiderUserID,
                                                channelID: t.channelID
                                            },
                                            data: a
                                        })
                                    }
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(a.Component),
            Q = n("mw/a"),
            K = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.onReportButtonClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-raid-id") || "",
                            i = e.currentTarget.getAttribute("data-target-user-id") || "",
                            a = e.currentTarget.getAttribute("data-target-user-login") || "";
                        t.props.showReportUserModal({
                            reportContext: {
                                contentType: Q.a.Raid,
                                targetUserID: i,
                                contentID: n,
                                extra: JSON.stringify({
                                    channel_id: i.toString()
                                }),
                                additionalTrackingID: t.props.targetChannelID
                            },
                            title: Object(C.d)("Report {channelDisplayName}", {
                                channelDisplayName: a
                            }, "ReportUserModal")
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, B.fetchRecentRaidsList(this.props.targetChannelID)];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        raidChannels: e
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    var e = [],
                        t = [],
                        n = {};
                    if (void 0 !== this.state.raidChannels)
                        for (var i in 0 === this.state.raidChannels.length && e.push(a.createElement(D.Q, {
                                key: "recent-raids-no-raids",
                                type: D._49.P
                            }, Object(C.d)("You have no recent raids", "RecentRaids"))), this.state.raidChannels)
                            if (i.hasOwnProperty) {
                                var r = this.state.raidChannels[i];
                                this.state.raidChannels.hasOwnProperty(i) && void 0 === n[r.userID] && (t.push(a.createElement(q, {
                                    key: "recent-raids-item-" + r.userID,
                                    slideInContent: [a.createElement(D._35, {
                                        key: "recent-raids-item-report-area-" + r.userID,
                                        color: D.K.Alt2,
                                        display: D.R.InlineFlex
                                    }, a.createElement(D.v, {
                                        key: "recent-raid-report-button",
                                        size: D.z.Small,
                                        type: D.B.Text,
                                        onClick: this.onReportButtonClick,
                                        "data-a-target": "recent-raid-item-button",
                                        "data-raid-id": r.raidID,
                                        "data-target-user-login": r.name,
                                        "data-target-user-id": r.userID
                                    }, Object(C.d)("Report", "RecentRaid")), a.createElement(D._52, {
                                        align: D._53.Right,
                                        width: 150,
                                        label: Object(C.d)("Banning a user prevents them from future chatting or raiding", "RecentRaid")
                                    }))],
                                    timestamp: r.raidAt,
                                    channelLogin: r.name,
                                    raiderUserID: r.userID,
                                    channelID: this.props.targetChannelID,
                                    raiderLogin: r.name,
                                    raidID: r.raidID,
                                    onUsernameClick: this.props.onUsernameClick,
                                    showReportUserModal: this.props.showReportUserModal
                                })), n[r.userID] = !0)
                            }
                    var o = null;
                    return this.props.recentRaids ? a.createElement(D._8, {
                        key: "recent-raids"
                    }, a.createElement(D._8, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(D.Q, {
                        color: D.K.Link,
                        type: D._49.Span
                    }, a.createElement(F.a, {
                        to: {
                            pathname: "/broadcast/dashboard/settings/raids"
                        }
                    }, Object(C.d)("Manage Raid Settings", "RecentRaids")))), e, t) : (o = a.createElement(D._8, {
                        key: "recent-raids",
                        margin: {
                            top: 1,
                            bottom: 1
                        },
                        display: D.R.Flex,
                        justifyContent: D._7.Between,
                        alignItems: D.c.Center
                    }, a.createElement(D.O, {
                        hoverUnderlineNone: !0,
                        onClick: this.props.onClickRecentRaids,
                        "data-test-selector": "recent-raids-button"
                    }, Object(C.d)("See Recent Raids", "ChatSettings")), this.props.tooltipText && a.createElement(D._8, {
                        position: D._15.Relative
                    }, a.createElement(D._52, {
                        align: D._53.Right,
                        direction: D._54.Top,
                        display: D.R.InlineFlex,
                        label: this.props.tooltipText,
                        width: 175,
                        show: !0
                    }, a.createElement(D._2, {
                        alignItems: D.c.Center,
                        className: "chat-settings__highlight-indicator",
                        display: D.R.InlineFlex,
                        justifyContent: D._7.Center,
                        margin: {
                            left: .5
                        }
                    }, a.createElement(D.Q, {
                        color: D.K.Overlay,
                        fontSize: D.V.Size8,
                        type: D._49.Span
                    }, "i"))))), a.createElement(D._8, null, o))
                }, t
            }(a.Component);
        var $ = Object(r.b)(function() {
                return {}
            }, function(e) {
                return Object(s.b)({
                    showReportUserModal: function(e) {
                        var t = i.__rest(e, []);
                        return Object(L.d)(A.a, t)
                    }
                }, e)
            })(K),
            Y = n("UzRK"),
            J = n("YDbY"),
            Z = (n("7t3k"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        autoModToolTipVisible: !1
                    }, n.handleFollowerDurationClick = function(e) {
                        var t = e.currentTarget.getAttribute("data-duration");
                        t && n.onFollowerDurationChange(parseInt(t, 10))
                    }, n.onClickRecentRaids = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), n.props.onClickRecentRaids()
                    }, n.onChatClear = function() {
                        n.props.onChatCommand(Object(k.c)())
                    }, n.getSelectedFollowerDuration = function() {
                        if (n.props.followerModeEnabled) return n.props.followerModeDuration;
                        var e = n.props.lastUsedFollowerDurations[n.props.channelLogin];
                        return "number" == typeof e ? e : Y.a
                    }, n.onFollowerModeToggle = function() {
                        if (n.props.followerModeEnabled) n.props.onChatCommand(Object(k.d)()), n.props.onFollowerModeDisable();
                        else {
                            var e = n.getSelectedFollowerDuration();
                            n.props.onChatCommand(Object(k.f)(e)), n.props.onFollowerModeDurationChange(e), n.props.onFollowerModeEnable()
                        }
                        Object(_.a)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode,
                            newValue: !n.props.followerModeEnabled,
                            settingName: b.a.FollowerMode
                        })
                    }, n.onSlowModeToggle = function() {
                        n.props.slowModeEnabled ? (n.props.onChatCommand(Object(k.e)()), n.props.onSlowModeDisable()) : (n.props.onChatCommand(Object(k.g)()), n.props.onSlowModeEnable()), Object(_.a)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode,
                            newValue: !n.props.slowModeEnabled,
                            settingName: b.a.SlowMode
                        })
                    }, n.onFollowerDurationChange = function(e) {
                        Object(y.c)(n.props.channelLogin, e), n.props.onFollowerModeDurationPreferenceChange(n.props.channelLogin, e), n.props.followerModeEnabled && (n.props.onChatCommand(Object(k.f)(e)), n.props.onFollowerModeDurationChange(e)), Object(_.c)({
                            channelLogin: n.props.channelLogin,
                            followerModeOn: n.props.followerModeEnabled,
                            isHostMode: n.props.isHostMode,
                            newValue: e
                        })
                    }, n.onModIconsToggle = function() {
                        Object(y.b)("showModIcons", !n.props.showModerationIcons), n.props.showModerationIcons ? n.props.onModIconsDisable() : n.props.onModIconsEnable(), Object(_.a)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode,
                            newValue: !n.props.showModerationIcons,
                            settingName: b.a.ShowModIcons
                        })
                    }, n.onShowModerationActionsToggle = function() {
                        Object(y.b)("showModerationActions", !n.props.showModerationActions), n.props.showModerationActions ? n.props.onShowModerationActionsDisable() : n.props.onShowModerationActionsEnable(), Object(_.a)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode,
                            newValue: !n.props.showModerationActions,
                            settingName: b.a.ShowModActions
                        })
                    }, n.onShowAutoModActionsToggle = function() {
                        Object(y.b)("showAutoModActions", !n.props.showAutoModActions), n.props.showAutoModActions ? n.props.onShowAutoModActionsDisable() : n.props.onShowAutoModActionsEnable(), Object(_.a)({
                            channelLogin: n.props.channelLogin,
                            isHostMode: n.props.isHostMode,
                            newValue: !n.props.showAutoModActions,
                            settingName: b.a.ShowAutoModActions
                        })
                    }, n.handleToggleAutoModLink = n.handleToggleAutoModLink.bind(n), n.handleToggleAutoModLink = n.handleToggleAutoModLink.bind(n), n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this;
                    if (!this.props.isCurrentUserModerator) return null;
                    var t = this.getSelectedFollowerDuration(),
                        n = Y.b.map(function(n) {
                            return a.createElement(D._6, {
                                "data-duration": n,
                                key: n,
                                onClick: e.handleFollowerDurationClick,
                                selected: n === t
                            }, a.createElement(D._8, {
                                padding: .5
                            }, Object(Y.c)(n)))
                        });
                    return a.createElement(D._35, {
                        key: "mod-tools",
                        borderTop: !0,
                        "data-test-selector": "mod-tools",
                        margin: {
                            top: 2
                        },
                        padding: {
                            top: 2
                        }
                    }, a.createElement(D._8, {
                        margin: {
                            bottom: 2
                        }
                    }, a.createElement(D.Q, {
                        color: D.K.Alt2,
                        transform: D._48.Uppercase
                    }, Object(C.d)("Mod Tools", "ChatSettings"))), a.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(D.J, {
                        checked: this.props.showModerationIcons,
                        "data-a-target": "mod-icons-checkbox",
                        "data-test-selector": "mod-icons-checkbox",
                        id: "chat-settings-mod-icons",
                        label: Object(C.d)("Mod Icons", "ChatSettings"),
                        onChange: this.onModIconsToggle
                    })), a.createElement(D._35, {
                        margin: {
                            bottom: 1
                        },
                        display: D.R.Flex,
                        justifyContent: D._7.Between,
                        flexWrap: D.U.Wrap
                    }, a.createElement(D.J, {
                        checked: this.props.followerModeEnabled,
                        "data-a-target": "follower-mode-checkbox",
                        "data-test-selector": "follower-mode-checkbox",
                        id: "chat-settings-followers-only",
                        label: Object(C.d)("Followers-Only Chat", "ChatSettings"),
                        onChange: this.onFollowerModeToggle
                    }), this.props.showRaidsTooltip ? a.createElement(j, {
                        text: Object(C.d)("Prevent offensive raiders from chatting.", "RaidReportingChat")
                    }) : null, a.createElement(D._8, {
                        alignItems: D.c.Center,
                        display: D.R.Flex,
                        flexWrap: D.U.NoWrap,
                        justifyContent: D._7.Between
                    }, a.createElement(D._8, {
                        margin: {
                            right: .5
                        }
                    }, a.createElement(D.Q, {
                        color: D.K.Alt2,
                        fontSize: D.V.Size7,
                        type: D._49.Span
                    }, Object(C.d)("Must have followed for", "ChatSettings"))), a.createElement(D._8, {
                        className: "chat-settings__mod-tools-follower-button",
                        flexShrink: 0
                    }, a.createElement(x.a, {
                        display: D.R.InlineBlock
                    }, a.createElement(D.v, {
                        size: D.z.Small,
                        type: D.B.Text,
                        "data-a-target": "follower-mode-dropdown",
                        "data-test-selector": "follower-mode-duration-menu",
                        dropdown: !0
                    }, Object(Y.d)(t)), a.createElement(D.q, {
                        direction: D.r.TopRight
                    }, a.createElement(D._8, {
                        padding: .5
                    }, a.createElement(D.Q, {
                        color: D.K.Alt2
                    }, Object(C.d)("Followers can chat if they have followed for at least", "ChatSettings"))), a.createElement(D._35, {
                        color: D.K.Link
                    }, n)))))), a.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(D.J, {
                        checked: this.props.slowModeEnabled,
                        "data-a-target": "slow-mode-checkbox",
                        "data-test-selector": "slow-mode-checkbox",
                        id: "chat-settings-slow-mode",
                        label: Object(C.d)("Slow Mode", "ChatSettings"),
                        onChange: this.onSlowModeToggle
                    })), a.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(D.J, {
                        checked: this.props.showModerationActions,
                        "data-a-target": "show-mod-actions-checkbox",
                        "data-test-selector": "show-mod-actions",
                        id: "chat-settings-show-mod-actions",
                        label: Object(C.d)("Show Moderation Actions", "ChatSettings"),
                        onChange: this.onShowModerationActionsToggle
                    })), a.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(D.J, {
                        checked: this.props.showAutoModActions,
                        "data-a-target": "show-automod-messages-checkbox",
                        "data-test-selector": "show-automod-messages",
                        id: "chat-settings-show-automod-messages",
                        label: Object(C.d)("Show Messages Caught by AutoMod", "ChatSettings"),
                        onChange: this.onShowAutoModActionsToggle
                    })), a.createElement($, {
                        key: "recent-raids",
                        recentRaids: this.props.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard,
                        targetChannelID: this.props.channelID,
                        tooltipText: this.props.showRaidsTooltip ? Object(C.d)("View recent raids with option to report or ban.", "RaidReportingChat") : ""
                    }), this.renderModerationSettingsLink(), a.createElement("button", {
                        onClick: this.onChatClear,
                        "data-a-target": "clear-chat-button",
                        "data-test-selector": "clear-chat-button"
                    }, Object(C.d)("Clear Chat", "ChatSettings")))
                }, t.prototype.handleModerationSettingsClick = function() {
                    C.l.set("autoModToolTipSeen", 5)
                }, t.prototype.showAutoModHotSpot = function() {
                    return C.l.get("autoModToolTipSeen", 0) < 5
                }, t.prototype.renderModerationSettingsLink = function() {
                    if (Object(J.a)()) {
                        var e = Object(C.d)("Manage Moderation Settings", "ChatSettings");
                        return this.showAutoModHotSpot() ? a.createElement(D._8, {
                            margin: {
                                top: 1,
                                bottom: 1
                            },
                            display: D.R.Flex,
                            justifyContent: D._7.Between,
                            alignItems: D.c.Center
                        }, a.createElement(D.O, {
                            to: "/" + this.props.channelLogin + "/dashboard/settings/automod",
                            "data-a-target": "automod-link-button",
                            "data-test-selector": "automod-link-button",
                            onClick: this.handleModerationSettingsClick
                        }, e), a.createElement("div", {
                            onMouseEnter: this.handleToggleAutoModLink,
                            onMouseLeave: this.handleToggleAutoModLink
                        }, a.createElement(D._8, {
                            alignItems: D.c.Center,
                            className: "chat-moderation-settings__highlight-indicator",
                            display: D.R.InlineFlex,
                            justifyContent: D._7.Center,
                            margin: {
                                left: .5
                            }
                        }, a.createElement(D.Q, {
                            color: D.K.Overlay,
                            fontSize: D.V.Size8,
                            type: D._49.Span
                        }, "i"), a.createElement(D._8, {
                            position: D._15.Relative
                        }, a.createElement(D.q, {
                            direction: D.r.TopRight,
                            show: this.state.autoModToolTipVisible,
                            offsetX: "-0.6rem",
                            offsetY: "1.5rem"
                        }, a.createElement(D._8, {
                            margin: 1
                        }, Object(C.d)("Mods can now update AutoMod levels as well as Blocked and Permitted Terms.", "ChatSettings"))))))) : a.createElement(D._35, {
                            margin: {
                                top: 1,
                                bottom: 1
                            },
                            display: D.R.Flex,
                            justifyContent: D._7.Between,
                            alignItems: D.c.Center,
                            color: D.K.Alt
                        }, a.createElement(D.O, {
                            to: "/" + this.props.channelLogin + "/dashboard/settings/automod",
                            "data-a-target": "automod-link-button",
                            "data-test-selector": "automod-link-button",
                            type: D.P.Inherit,
                            hoverUnderlineNone: !0
                        }, e))
                    }
                }, t.prototype.handleToggleAutoModLink = function() {
                    this.setState(function(e) {
                        return {
                            autoModToolTipVisible: !e.autoModToolTipVisible
                        }
                    })
                }, t
            }(a.Component));
        var X = Object(r.b)(function(e) {
                return {
                    followerModeDuration: e.chat.followerDuration,
                    followerModeEnabled: e.chat.followerMode,
                    lastUsedFollowerDurations: e.chat.lastUsedFollowerDurations,
                    showAutoModActions: e.chat.showAutoModActions,
                    showModerationActions: e.chat.showModerationActions,
                    showModerationIcons: e.chat.showModIcons,
                    slowModeEnabled: e.chat.slowMode
                }
            }, function(e) {
                return Object(s.b)({
                    onChatHide: function() {
                        return f.Q()
                    },
                    onChatUnhide: function() {
                        return f.T()
                    },
                    onFollowerModeDisable: function() {
                        return f.C()
                    },
                    onFollowerModeDurationChange: function(e) {
                        return f.z(e)
                    },
                    onFollowerModeDurationPreferenceChange: function(e, t) {
                        return f.A(e, t)
                    },
                    onFollowerModeEnable: function() {
                        return f.J()
                    },
                    onModIconsDisable: function() {
                        return f.D()
                    },
                    onModIconsEnable: function() {
                        return f.K()
                    },
                    onShowAutoModActionsEnable: function() {
                        return f.L()
                    },
                    onShowAutoModActionsDisable: function() {
                        return f.E()
                    },
                    onShowModerationActionsEnable: function() {
                        return f.M()
                    },
                    onShowModerationActionsDisable: function() {
                        return f.F()
                    },
                    onSlowModeDisable: function() {
                        return f.G()
                    },
                    onSlowModeEnable: function() {
                        return f.N()
                    },
                    onTimestampsDisable: function() {
                        return f.I()
                    },
                    onTimestampsEnable: function() {
                        return f.P()
                    },
                    onThemeChanged: function(e) {
                        return Object(p.b)(e, void 0, !1)
                    },
                    login: function() {
                        return Object(m.f)(u.a.Chat)
                    }
                }, e)
            })(Z),
            ee = n("SZoP"),
            te = n("3T7g"),
            ne = "edit-appearance-button",
            ie = "edit-display-name";

        function ae(e) {
            var t = a.createElement(D.Q, {
                    bold: !0,
                    type: D._49.Span
                }, a.createElement("span", {
                    style: {
                        color: e.chatColor
                    },
                    "data-a-target": ie
                }, Object(ee.a)(e.login, e.displayName))),
                n = null;
            return e.editAppearance || (n = a.createElement(D._8, {
                margin: {
                    top: 1
                }
            }, a.createElement(D.O, {
                hoverUnderlineNone: !0,
                onClick: e.onClickEdit,
                "data-a-target": ne,
                "data-test-selector": ne
            }, Object(C.d)("Edit Appearance", "ChatSettings")))), a.createElement(D._35, {
                background: D.n.Base,
                color: D.K.Base,
                display: D.R.InlineFlex,
                flexDirection: D.T.Column,
                fullWidth: !0
            }, a.createElement(D.Q, {
                color: D.K.Alt2,
                transform: D._48.Uppercase
            }, Object(C.d)("Name Display", "ChatSettings")), a.createElement(D._8, {
                margin: {
                    top: 2
                }
            }, e.userBadges && e.userBadges.map(function(e) {
                return a.createElement(te.a, {
                    key: e.id,
                    badge: e
                })
            }), t), n)
        }
        var re = n("pg5l"),
            oe = (n("Vaxm"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        recentRaids: !1,
                        chatColor: null,
                        raidsTooltipDismissed: !1,
                        autoModToolTipVisible: !1
                    }, t.resizeAnimationFrame = 0, t.dismissRaidsTooltip = function() {
                        t.setState({
                            raidsTooltipDismissed: !0
                        })
                    }, t.onClickEdit = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onClickEditAppearance()
                    }, t.onClickRecentRaids = function() {
                        t.setState({
                            recentRaids: !0
                        })
                    }, t.onClickBack = function(e) {
                        e.nativeEvent.stopImmediatePropagation(), t.props.onLeaveEditAppearance(), t.setState({
                            recentRaids: !1
                        })
                    }, t.onColorSelected = function(e) {
                        t.setState({
                            chatColor: e
                        }), t.props.onColorSelected(e)
                    }, t.onBadgesChanged = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e, t, n;
                            return i.__generator(this, function(i) {
                                switch (i.label) {
                                    case 0:
                                        return !this.props.data || this.props.data.loading ? [3, 2] : [4, this.props.data.refetch()];
                                    case 1:
                                        if ((e = i.sent()).data) {
                                            if (!(t = e.data).user.self) return [2];
                                            n = {}, t.user.self.displayBadges.forEach(function(e) {
                                                n[e.setID] = e.version
                                            }), C.o.tmi.client.updateChannelBadges(this.props.channelLogin, n)
                                        }
                                        i.label = 2;
                                    case 2:
                                        return [2]
                                }
                            })
                        })
                    }, t.onResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                    }, t.setContainerHeight = function() {
                        var e = t.props.containerElement && t.props.containerElement.clientHeight || 700;
                        t.setState({
                            containerHeight: e
                        }), t.resizeAnimationFrame = 0
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("resize", this.onResize, !0), this.setContainerHeight()
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.onResize, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.render = function() {
                    if (!this.props.data || this.props.data.loading) return null;
                    var e = null;
                    if (this.props.isLoggedIn && this.props.data.currentUser) {
                        var t = this.props.data.user.self ? this.props.data.user.self.displayBadges : [];
                        e = a.createElement(ae, {
                            key: "name-display",
                            login: this.props.data.currentUser.login,
                            displayName: this.props.data.currentUser.displayName,
                            chatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                            editAppearance: this.props.editAppearance,
                            userBadges: t,
                            onClickEdit: this.onClickEdit
                        })
                    }
                    var n = [];
                    return this.props.isLoggedIn ? this.props.editAppearance ? n = [a.createElement(D._2, {
                        margin: {
                            bottom: 2
                        },
                        key: "chat-settings-edit-inject",
                        className: "chat-settings__edit-button"
                    }, a.createElement(D.O, {
                        hoverUnderlineNone: !0,
                        key: "chat-settings-edit",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, a.createElement(D.Q, {
                        color: D.K.Link,
                        type: D._49.Span
                    }, a.createElement(D._24, {
                        asset: D._25.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(C.d)("Back", "ChatSettingsAppearance")))), e, a.createElement(M, {
                        key: "edit-appearance",
                        onColorSelected: this.onColorSelected,
                        editAppearance: this.props.editAppearance,
                        authToken: this.props.authToken,
                        channelLogin: this.props.channelLogin,
                        userChatColor: this.state.chatColor || this.props.data.currentUser.chatColor,
                        userLogin: this.props.data.currentUser.login,
                        onBadgesChanged: this.onBadgesChanged
                    })] : this.state.recentRaids ? n = [a.createElement(D._2, {
                        key: "chat-settings-recent-raids"
                    }, a.createElement(D.O, {
                        hoverUnderlineNone: !0,
                        key: "chat-settings-edit",
                        onClick: this.onClickBack,
                        "data-test-selector": "chat-settings-back-button"
                    }, a.createElement(D.Q, {
                        color: D.K.Link,
                        type: D._49.Span
                    }, a.createElement(D._24, {
                        asset: D._25.ChatSettingsBack,
                        height: 10,
                        width: 10
                    }), Object(C.d)("Back", "ChatSettingsRecentRaids")), a.createElement(D._8, {
                        margin: {
                            top: 2
                        }
                    }, a.createElement(D.Q, {
                        key: "recent-raids-title",
                        color: D.K.Alt2,
                        transform: D._48.Uppercase
                    }, Object(C.d)("Recent Raids", "ChatSettings"))))), a.createElement($, {
                        key: "recent-raids",
                        targetChannelID: this.props.channelID,
                        recentRaids: this.state.recentRaids,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onUsernameClick: this.props.onShowViewerCard
                    })] : (n = [e, this.renderUniversalOptions()], this.props.isCurrentUserModerator && !this.props.isEmbedded && n.push(a.createElement(X, {
                        key: "moderation-tools",
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isHostMode: this.props.isHostMode,
                        isLoggedIn: this.props.isLoggedIn,
                        onChatCommand: this.props.onChatCommand,
                        onClickRecentRaids: this.onClickRecentRaids,
                        onShowViewerCard: this.props.onShowViewerCard,
                        recentRaids: this.state.recentRaids,
                        showRaidsTooltip: this.showRaidsTooltip
                    }))) : n = [a.createElement(R, {
                        key: "color-chooser",
                        onColorSelected: this.props.onColorSelected
                    }), this.renderUniversalOptions()], a.createElement(S.b, {
                        className: "chat-settings",
                        suppressScrollX: !0,
                        style: {
                            maxHeight: this.state.containerHeight
                        }
                    }, a.createElement("div", {
                        onClick: this.dismissRaidsTooltip
                    }, a.createElement(D._35, {
                        key: "chat-settings",
                        className: "chat-settings__content",
                        background: D.n.Base,
                        color: D.K.Base,
                        padding: 2
                    }, n)))
                }, t.prototype.renderUniversalOptions = function() {
                    if (!this.props.data) return null;
                    var e = this.props.isPopout && a.createElement(D.J, {
                            checked: this.props.darkModeEnabled,
                            "data-a-target": "darkmode-checkbox",
                            "data-test-selector": "dark-mode-checkbox",
                            id: "chat-settings-dark-mode",
                            label: Object(C.d)("Dark Mode", "ChatSettings"),
                            onChange: this.props.onDarkModeToggle
                        }),
                        t = !this.props.isEmbedded && a.createElement("button", {
                            onClick: this.props.onChatPopout,
                            "data-a-target": "popout-chat-button",
                            "data-test-selector": "popout-button"
                        }, Object(C.d)("Popout", "ChatSettings")),
                        n = !this.props.isPopout && !this.props.isEmbedded && (window.BetterTTV || window.FrankerFaceZ) && a.createElement("button", {
                            onClick: this.props.onLegacyChatPopout,
                            "data-test-selector": "legacy-popout-button"
                        }, Object(C.d)("Legacy Popout", "ChatSettings")),
                        i = !this.props.isPopout && a.createElement("button", {
                            onClick: this.props.onChatHide,
                            "data-a-target": "hide-chat-button",
                            "data-test-selector": "hide-chat-button"
                        }, Object(C.d)("Hide Chat", "ChatSettings"));
                    return a.createElement(D._8, {
                        key: "chat-options"
                    }, a.createElement(D._35, {
                        borderTop: !0,
                        margin: {
                            top: 2
                        },
                        padding: {
                            y: 2
                        }
                    }, a.createElement(D.Q, {
                        color: D.K.Alt2,
                        transform: D._48.Uppercase
                    }, Object(C.d)("Chat Options", "ChatSettings"))), a.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(D.J, {
                        checked: this.props.showTimestamps,
                        "data-a-target": "timestamp-checkbox",
                        "data-test-selector": "timestamps-selector",
                        id: "chat-settings-timestamp",
                        label: Object(C.d)("Timestamps", "ChatSettings"),
                        onChange: this.props.onTimestampToggle
                    })), a.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, e), a.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, i), a.createElement(D._8, {
                        margin: {
                            bottom: 1
                        }
                    }, t), n && a.createElement(D._8, null, n))
                }, Object.defineProperty(t.prototype, "showRaidsTooltip", {
                    get: function() {
                        return this.props.sawFirstRaidPrompt && !this.state.raidsTooltipDismissed
                    },
                    enumerable: !0,
                    configurable: !0
                }), t = i.__decorate([Object(E.a)(re, {
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin
                            }
                        }
                    }
                })], t)
            }(a.Component)),
            se = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        editAppearance: !1
                    }, t.handleSettingsToggle = function(e) {
                        t.props.onToggle && t.props.onToggle(e), t.state.editAppearance && t.setState({
                            editAppearance: !1
                        })
                    }, t.onEdit = function() {
                        t.setState({
                            editAppearance: !0
                        })
                    }, t.onLeaveEdit = function() {
                        t.setState({
                            editAppearance: !1
                        })
                    }, t.onDarkModeToggle = function() {
                        var e = t.props.darkModeEnabled ? l.a.Light : l.a.Dark;
                        t.props.onThemeChanged(e, !t.props.isPopout), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.darkModeEnabled,
                            settingName: b.a.DarkMode
                        })
                    }, t.onTimestampToggle = function() {
                        Object(y.b)("showTimestamps", !t.props.showTimestamps), t.props.showTimestamps ? t.props.onTimestampsDisable() : t.props.onTimestampsEnable(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !t.props.showTimestamps,
                            settingName: b.a.ShowTimestamps
                        })
                    }, t.onChatHide = function() {
                        t.props.onChatHide(), Object(_.a)({
                            channelLogin: t.props.channelLogin,
                            isHostMode: t.props.isHostMode,
                            newValue: !0,
                            settingName: b.a.HideChat
                        })
                    }, t.onChatPopout = function() {
                        t.props.isPopout || t.props.onChatHide();
                        var e = window.open("/popout/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(c.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onLegacyChatPopout = function() {
                        t.props.onChatHide();
                        var e = window.open("https://www.twitch.tv/" + t.props.channelLogin + "/chat?popout=", "_blank", "right=50,top=50,width=400,height=600,resizable=yes,scrollbars=no,toolbar=no,location=no,directories=no,status=no,menubar=no,copyhistory=no");
                        e && !Object(d.a)() && (e.focus(), Object(c.a)(e, function() {
                            t.props.onChatUnhide()
                        }))
                    }, t.onColorSelected = function(e) {
                        t.props.isLoggedIn ? t.props.onChatCommand(Object(k.b)(e)) : t.props.login()
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(ce, {
                        onToggle: this.handleSettingsToggle
                    }, a.createElement(oe, {
                        authToken: this.props.authToken,
                        darkModeEnabled: this.props.darkModeEnabled,
                        editAppearance: this.state.editAppearance,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        isEmbedded: this.props.isEmbedded,
                        onChatCommand: this.props.onChatCommand,
                        onChatHide: this.onChatHide,
                        onChatPopout: this.onChatPopout,
                        onDarkModeToggle: this.onDarkModeToggle,
                        onLegacyChatPopout: this.onLegacyChatPopout,
                        onTimestampToggle: this.onTimestampToggle,
                        showTimestamps: this.props.showTimestamps,
                        theatreModeEnabled: this.props.theatreModeEnabled,
                        onColorSelected: this.onColorSelected,
                        channelLogin: this.props.channelLogin,
                        channelID: this.props.channelID,
                        isLoggedIn: this.props.isLoggedIn,
                        onClickEditAppearance: this.onEdit,
                        onLeaveEditAppearance: this.onLeaveEdit,
                        sawFirstRaidPrompt: this.props.sawFirstRaidPrompt,
                        onShowViewerCard: this.props.onShowViewerCard,
                        containerElement: this.props.containerElement
                    }))
                }, t
            }(a.Component);
        var le = Object(r.b)(function(e) {
                return {
                    isLoggedIn: Object(h.d)(e),
                    darkModeEnabled: Object(g.a)(e) === l.a.Dark,
                    showTimestamps: e.chat.showTimestamps,
                    theatreModeEnabled: e.ui.theatreModeEnabled
                }
            }, function(e) {
                return Object(s.b)({
                    login: function() {
                        return Object(m.f)(u.a.Chat)
                    },
                    onChatHide: function() {
                        return f.Q()
                    },
                    onChatUnhide: function() {
                        return f.T()
                    },
                    onThemeChanged: function(e) {
                        return Object(p.b)(e, void 0, !1)
                    },
                    onTimestampsDisable: function() {
                        return f.I()
                    },
                    onTimestampsEnable: function() {
                        return f.P()
                    },
                    onShowViewerCard: v.d
                }, e)
            })(se),
            de = Object(o.f)(le),
            ce = function(e) {
                return a.createElement(x.a, {
                    onToggle: e.onToggle
                }, a.createElement(D.w, {
                    icon: D._25.Gear,
                    ariaLabel: Object(C.d)("Chat settings", "ChatInput"),
                    "data-a-target": "chat-settings",
                    disabled: !!e.disabled
                }), a.createElement(D.q, {
                    direction: D.r.Top,
                    noTail: !0,
                    offsetY: "11px",
                    "data-a-target": "chat-settings-balloon"
                }, e.children))
            };
        n.d(t, "a", function() {
            return de
        }), n.d(t, "b", function() {
            return ce
        })
    },
    Lzcc: function(e, t) {},
    M5Tl: function(e, t) {},
    M8zv: function(e, t, n) {
        e.exports = n.p + "assets/empty_state-b5883e957cd574b6630af9c5d66f9b61.png"
    },
    MApH: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_BanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 126
            }
        };
        n.loc.source = {
            body: "mutation Chat_BanUserFromChatRoom($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    MSFW: function(e, t) {},
    Mful: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "chatMessage"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "ChatMessage"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "authorName"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "authorColor"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "author"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "body"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "emotes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "embeddedEmote"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "setID"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "version"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bitsUsed"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/embedded-emote-fragment.gql"\nfragment chatMessage on ChatMessage {\nid\nauthorName\nauthorColor\nauthor {\nid\nlogin\n}\nbody {\ncontent\nemotes {\n...embeddedEmote\n}\n}\nbadges {\nsetID\nversion\n}\nbitsUsed\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("0ImK").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    N5sm: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WhisperThread_SetThreadSpamStatus"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "spamInfo"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "lastMarkedNotSpamAt"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "likelihood"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 178
            }
        };
        n.loc.source = {
            body: "mutation WhisperThread_SetThreadSpamStatus($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    NZkJ: function(e, t) {},
    Nay6: function(e, t, n) {
        "use strict";
        var i = n("HW6M"),
            a = n("GiK3"),
            r = (n("7vYp"), function(e) {
                var t, n = [a.createElement("span", {
                    key: "username-display",
                    className: "chat-author__display-name",
                    "data-a-target": "chat-message-username",
                    "data-a-user": e.userData.userLogin,
                    "data-test-selector": "message-username",
                    style: {
                        color: e.userData.color
                    }
                }, e.userData.userDisplayName)];
                if (e.userData.isIntl) {
                    var r = i(((t = {})["chat-author__intl-login"] = !e.highlighted, t["chat-author__intl-login--highlighted"] = e.highlighted, t));
                    n.push(a.createElement("span", {
                        key: "username-login",
                        style: {
                            color: e.userData.color
                        },
                        className: r,
                        "data-test-selector": "message-username-canonical"
                    }, " (" + e.userData.userLogin + ")"))
                }
                return a.createElement("span", {
                    key: e.userData.userID + "-authorlabel"
                }, n)
            });
        n.d(t, !1, function() {
            return "message-username"
        }), n.d(t, !1, function() {
            return "message-username-canonical"
        }), n.d(t, !1, function() {
            return "chat-author__display-name"
        }), n.d(t, !1, function() {
            return "chat-author__intl-login"
        }), n.d(t, !1, function() {
            return "chat-author__intl-login--highlighted"
        }), n.d(t, "a", function() {
            return r
        })
    },
    Ncf8: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n, r) {
            return {
                type: i.b.Moderation,
                moderationType: e,
                id: Object(a.a)(t + "-mod"),
                userLogin: t,
                reason: n,
                duration: r
            }
        };
        var i = n("qkCi"),
            a = n("INp2")
    },
    Nctl: function(e, t, n) {
        e.exports = n.p + "assets/bits-crate-fd354824f8cadead34bd7c4850b36abe.png"
    },
    NikC: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), t.b = function(e, t, n) {
            void 0 === n && (n = !0);
            return function(i) {
                i(Object(r.A)(e)), n && Object(a.d)(e), t && Object(o.b)(e, t)
            }
        };
        var i, a = n("VAT8"),
            r = n("7enT"),
            o = n("xrVp");
        ! function(e) {
            e[e.UserMenu = 1] = "UserMenu", e[e.TypedCommand = 2] = "TypedCommand"
        }(i || (i = {}))
    },
    O0Qc: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        }), t.h = function(e) {
            return "/ignore " + e
        }, t.j = function(e) {
            return "/unignore " + e
        }, t.i = function(e) {
            return "/mod " + e
        }, t.k = function(e) {
            return "/unmod " + e
        }, t.m = function(e) {
            return /^[\/]/.test(e)
        }, t.c = function() {
            return "/clear"
        }, t.d = function() {
            return "/followersoff"
        }, t.e = function() {
            return "/slowoff"
        }, t.f = function(e) {
            return "/followers " + e
        }, t.g = function() {
            return "/slow"
        }, t.b = function(e) {
            return "/color " + e
        }, t.q = function(e) {
            var t = e.trim().match(o);
            if (!t) return null;
            return {
                recipientLogin: t[1] || null,
                body: t[2] || null
            }
        }, t.r = function(e) {
            var t = e.trim().match(s);
            if (!t) return {
                recipientLogin: null,
                body: null
            };
            return {
                recipientLogin: t[1] || null,
                body: t[2] || null
            }
        }, t.n = function(e) {
            var t = e.trim().match(l);
            if (!t) return null;
            return {
                bannedUserLogin: t[1],
                duration: t[2] && Number(t[2]) || null
            }
        }, t.p = function(e) {
            var t = e.trim().match(d);
            if (!t) return null;
            return {
                duration: t[1] && Number(t[1]) || null
            }
        }, t.o = function(e) {
            var t = e.trim().match(u);
            if (!t) return null;
            var n = t[1];
            if (!n.startsWith("#") && -1 === c.indexOf(n.toLowerCase())) return null;
            return {
                color: n
            }
        }, t.l = function(e, t) {
            var n = e.match(m);
            if (!n) return {
                handled: !1
            };
            var r = n[1],
                o = i.o.store.getState().chat.commandHandlers[n[1].toLowerCase()];
            if (!o) return {
                command: r,
                handled: !1
            };
            var s = (n[2] || "").trim(),
                l = {
                    channelLogin: t
                };
            try {
                return {
                    command: r,
                    handled: !0,
                    result: o(s, l)
                }
            } catch (e) {
                return a.warn("Exception thrown from chat command handler", {
                    command: n[1],
                    err: e
                }), {
                    handled: !1
                }
            }
        };
        var i = n("6sO2"),
            a = i.o.logger.withCategory("chat-commands"),
            r = "/unraid";
        var o = /^\/w(?:$|\s+)(\S+)?\s*(.+)?/i;
        var s = /^(\S+)?\s+(.+)?$/;
        var l = /^\/ban\s+(\S+)(?:\s+(\d+)?)?$/;
        var d = /^\/slow(?:\s+(\d+)?)?$/;
        var c = ["blue", "blueviolet", "cadetblue", "chocolate", "coral", "dodgerblue", "firebrick", "goldenrod", "green", "hotpink", "orangered", "red", "seagreen", "springgreen", "yellowgreen"],
            u = /^\/color\s+(#[A-Fa-f0-9]{6}|[A-Za-z]+)$/;
        var m = /^[/.]([a-z0-9]+)(.+)?$/i
    },
    O9wU: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.recent_raids = 0] = "recent_raids", e[e.chat_message = 1] = "chat_message", e[e.room_message = 2] = "room_message", e[e.viewer_list = 3] = "viewer_list", e[e.member_list = 4] = "member_list", e[e.test = 5] = "test"
            }(i || (i = {}))
    },
    OLl6: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return i.__awaiter(this, void 0, void 0, function() {
                var t, n;
                return i.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            t = null, i.label = 1;
                        case 1:
                            return i.trys.push([1, 3, , 4]), [4, a.o.apollo.client.query({
                                query: r,
                                variables: {
                                    login: e
                                }
                            })];
                        case 2:
                            return t = i.sent(), [3, 4];
                        case 3:
                            return n = i.sent(), a.j.warn(n, "Failed to fetch user targeted by chat command.", {
                                userLogin: e
                            }), [3, 4];
                        case 4:
                            return t && t.data.user.id ? [2, t.data.user.id] : [2, null]
                    }
                })
            })
        };
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("pV+t");
        n.n(r)
    },
    OcEY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "bitsOffersFragment"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "BitsOffer"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bits"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "InlineFragment",
                        typeCondition: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BitsBundleOffer"
                            }
                        },
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "price"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "discount"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPromo"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "includesVAT"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "promotion"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "type"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 145
            }
        };
        n.loc.source = {
            body: "fragment bitsOffersFragment on BitsOffer {\nid\ntype\nbits\n... on BitsBundleOffer {\nprice\ndiscount\nisPromo\nurl\nincludesVAT\npromotion {\nid\ntype\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Oioc: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "JoinRoomsButton_JoinRooms"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "JoinChannelRoomsInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "joinChannelRooms"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 143
            }
        };
        n.loc.source = {
            body: "mutation JoinRoomsButton_JoinRooms($input: JoinChannelRoomsInput!) {\njoinChannelRooms(input: $input) {\nchannel {\nself {\nisChannelMember\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ouuk: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            e || (e = navigator.userAgent);
            return !!i.exec(e)
        };
        var i = /\scurse\/\d/
    },
    "P+j/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("3zLD"),
            o = n("RH2O"),
            s = n("7vx8"),
            l = n("RweG"),
            d = n("Ldv2"),
            c = n("TeXj"),
            u = n("Aj/L"),
            m = n("Tzcg"),
            p = n("6sO2"),
            h = n("nEoF"),
            g = n("FDYX"),
            f = n("CSlQ"),
            v = n("CwIZ"),
            b = n("HW6M"),
            k = n("zCIC"),
            y = n("6BvN");

        function _(e) {
            return e.charCode === y.a.Enter || e.charCode === y.a.Space
        }
        var C = n("7LIQ"),
            S = n("J4ib"),
            E = n("Odds"),
            N = (n("9uSE"), function(e) {
                var t = {
                        "emote-picker__tab": !0
                    },
                    n = null,
                    r = null;
                if (e.channelTabVisible) {
                    var o = b(i.__assign({}, t, {
                        "emote-picker__tab--active": e.channelTabEnabled && e.channelTabSelected,
                        "emote-picker__tab--disabled": !e.channelTabEnabled
                    }));
                    n = a.createElement(E._2, {
                        padding: {
                            x: 1
                        }
                    }, a.createElement("div", {
                        key: "ChannelTabLink",
                        id: "emote-picker__channel",
                        className: o,
                        onClick: e.channelTabEnabled ? e.selectChannelTab : void 0,
                        onKeyPress: e.channelTabEnabled ? e.selectChannelTabKeypress : void 0,
                        "data-a-target": "emote-channel-tab",
                        tabIndex: 0
                    }, a.createElement("span", null, Object(S.d)("Channel", "EmotePicker"))))
                }
                if (e.allTabVisible) {
                    var s = b(i.__assign({}, t, {
                        "emote-picker__tab--active": !(e.channelTabSelected && e.channelTabEnabled)
                    }));
                    r = a.createElement(E._2, {
                        padding: {
                            x: 1
                        }
                    }, a.createElement("div", {
                        key: "allTabLink",
                        id: "emote-picker__all",
                        className: s,
                        onClick: e.selectAllTab,
                        onKeyPress: e.selectAllTabKeypress,
                        "data-a-target": "emote-all-tab",
                        tabIndex: 0
                    }, a.createElement("span", null, Object(S.d)("All", "EmotePicker"))))
                }
                return a.createElement(E._35, {
                    background: E.n.Base,
                    borderTop: !0,
                    className: "emote-picker__tabs-container"
                }, n, r)
            }),
            T = n("YEG/"),
            w = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = [];
                    if (this.props.subscribeTexts)
                        for (var t = 0; t <= this.props.plan.level; t++) {
                            var n = this.props.subscribeTexts[t];
                            n && (t < this.props.plan.level ? (e.push(a.createElement("span", {
                                key: "upsell-predicate:" + t
                            }, n)), e.push(a.createElement("span", {
                                key: "upsell-plus:" + t
                            }, " + "))) : this.props.plan.level > 0 ? e.push(a.createElement("strong", {
                                key: "upsell-strong-end:" + this.props.plan.level
                            }, n)) : e.push(a.createElement("span", {
                                key: "upsell-end:" + t
                            }, n)))
                        }
                    if (!this.props.plan.emoteSetID) return null;
                    var i = {
                            id: this.props.plan.emoteSetID,
                            emotes: this.props.plan.emotes || []
                        },
                        r = {};
                    return this.props.plan.price && (r.purchase = this.props.plan.price), a.createElement(E._8, {
                        className: "emote-picker-plan-upsell",
                        display: E.R.Flex,
                        flexDirection: E.T.Column,
                        alignItems: E.c.Center,
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(C.a, {
                        emoteSet: i,
                        locked: !0
                    }), a.createElement(E._8, {
                        margin: 1,
                        alignItems: E.c.Center
                    }, e), a.createElement(T.a, {
                        isSubbedToTier: !1,
                        tierPrice: r.purchase || "",
                        reportSubAction: this.props.reportSubAction,
                        url: this.props.plan.url,
                        isEsportChannel: this.props.isEsportChannel
                    }))
                }, t
            }(a.Component),
            D = (n("Xo53"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.channelTabSelectionKeypress = function(e) {
                        _(e) && n.selectChannelTab(e)
                    }, n.allTabSelectionKeypress = function(e) {
                        _(e) && n.selectAllTab(e)
                    }, n.closeOnEsc = function(e) {
                        e.keyCode === y.a.Esc && n.props.toggleVisibility()
                    }, n.handleFilterChange = function(e) {
                        var t = e.target.value,
                            i = t.toLowerCase(),
                            a = n.filterAvailableUpsells(n.props.availableUpsells, i),
                            r = n.filterEmoteSets(n.props.ownedChannelEmoteSets, i);
                        n.setState({
                            filter: i,
                            filteredAllEmoteSets: n.filterEmoteSets(n.props.allEmoteSets, i),
                            filteredAvailableUpsells: a,
                            filteredOwnedChannelEmoteSets: r,
                            inputValue: t,
                            channelTabEnabled: r.length > 0 || a.length > 0
                        })
                    }, n.state = {
                        filter: "",
                        filteredOwnedChannelEmoteSets: t.ownedChannelEmoteSets,
                        filteredAvailableUpsells: t.availableUpsells,
                        filteredAllEmoteSets: t.allEmoteSets,
                        inputValue: "",
                        channelTabSelected: !0,
                        channelTabEnabled: t.ownedChannelEmoteSets.length > 0 || t.availableUpsells.length > 0
                    }, n.selectAllTab = function() {
                        return n.setChannelTabSelected(!1)
                    }, n.selectChannelTab = function() {
                        return n.setChannelTabSelected(!0)
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    if (!e.gqlError)
                        if (this.state.filter.length > 0) {
                            var t = this.filterAvailableUpsells(this.props.availableUpsells, this.state.filter),
                                n = this.filterEmoteSets(this.props.ownedChannelEmoteSets, this.state.filter);
                            this.setState({
                                filteredAllEmoteSets: this.filterEmoteSets(this.props.allEmoteSets, this.state.filter),
                                filteredAvailableUpsells: t,
                                filteredOwnedChannelEmoteSets: n,
                                channelTabEnabled: n.length > 0 || t.length > 0
                            })
                        } else this.setState({
                            filteredOwnedChannelEmoteSets: e.ownedChannelEmoteSets,
                            filteredAvailableUpsells: e.availableUpsells,
                            filteredAllEmoteSets: e.allEmoteSets,
                            channelTabEnabled: e.ownedChannelEmoteSets.length > 0 || e.availableUpsells.length > 0
                        })
                }, t.prototype.render = function() {
                    return a.createElement(E.q, {
                        "data-a-target": "emote-picker",
                        direction: this.props.direction ? this.props.direction : E.r.TopRight,
                        size: this.props.size ? this.props.size : E.s.Medium,
                        noTail: !0,
                        show: !0
                    }, a.createElement(E._8, {
                        className: b("emote-picker")
                    }, this.renderTabContent(), a.createElement(E._8, {
                        className: "emote-picker__controls-container",
                        position: E._15.Relative
                    }, a.createElement(E._35, {
                        padding: 1,
                        borderTop: !0
                    }, a.createElement(E._4, {
                        autoFocus: !0,
                        onChange: this.handleFilterChange,
                        onKeyDown: this.closeOnEsc,
                        placeholder: Object(p.d)("Search for Emotes", "EmotePicker"),
                        type: E._5.Text,
                        value: this.state.inputValue
                    })), a.createElement(N, {
                        allTabVisible: this.props.allEmoteSets.length > 0,
                        channelTabEnabled: this.state.channelTabEnabled,
                        channelTabSelected: this.state.channelTabSelected,
                        channelTabVisible: !!this.props.channelTabVisible,
                        selectAllTab: this.selectAllTab,
                        selectAllTabKeypress: this.allTabSelectionKeypress,
                        selectChannelTab: this.selectChannelTab,
                        selectChannelTabKeypress: this.channelTabSelectionKeypress
                    }))))
                }, t.prototype.renderTabContent = function() {
                    var e = this,
                        t = [];
                    return this.props.gqlError ? t.push(a.createElement(E._8, {
                        key: "emotePicker-error"
                    }, a.createElement(E.Q, {
                        color: E.K.Error
                    }, Object(p.d)("Unable to load available emotes.", "EmotePicker")))) : this.props.loading ? t.push(a.createElement(E._8, {
                        alignItems: E.c.Center,
                        display: E.R.Flex,
                        key: "loading",
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: E._7.Center
                    }, a.createElement(E._10, {
                        key: "LoadingSpinner"
                    }))) : this.state.channelTabEnabled && this.state.channelTabSelected ? (this.state.filteredOwnedChannelEmoteSets.length > 0 && t.push(a.createElement(E._8, {
                        className: "emote-picker__content-block",
                        key: "ownedChannelEmoteSets",
                        padding: 1,
                        position: E._15.Relative
                    }, a.createElement(C.a, {
                        emoteSet: this.state.filteredOwnedChannelEmoteSets[0],
                        onClickEmote: this.props.onClickEmote,
                        locked: !1
                    }))), t = t.concat(this.state.filteredAvailableUpsells.map(function(t) {
                        return a.createElement(E._8, {
                            className: "emote-picker__content-block",
                            key: "planUpsell:" + t.level,
                            padding: 1,
                            position: E._15.Relative
                        }, a.createElement(w, {
                            plan: t,
                            isEsportChannel: e.props.isEsportChannel,
                            subscribeTexts: e.props.subscribeTexts,
                            reportSubAction: e.props.reportSubAction
                        }))
                    }))) : t = this.state.filteredAllEmoteSets.map(function(t) {
                        return a.createElement(E._8, {
                            key: "emoteGrid" + t.id,
                            position: E._15.Relative,
                            padding: {
                                top: 1,
                                bottom: 2
                            },
                            className: "emote-picker__content-block"
                        }, a.createElement(C.a, {
                            emoteSet: t,
                            onClickEmote: e.props.onClickEmote,
                            locked: !1
                        }))
                    }), t.length > 0 ? a.createElement(k.b, {
                        className: "emote-picker__tab-content"
                    }, a.createElement(E._8, {
                        padding: 1
                    }, t)) : null
                }, t.prototype.filterEmoteSet = function(e, t) {
                    return e.filter(function(e) {
                        return e.token.toLowerCase().includes(t)
                    })
                }, t.prototype.setChannelTabSelected = function(e) {
                    this.setState({
                        channelTabSelected: e
                    })
                }, t.prototype.filterEmoteSets = function(e, t) {
                    for (var n = [], i = 0, a = e; i < a.length; i++) {
                        var r = a[i],
                            o = this.filterEmoteSet(r.emotes, t);
                        o.length > 0 && n.push({
                            id: r.id,
                            emotes: o
                        })
                    }
                    return n
                }, t.prototype.filterAvailableUpsells = function(e, t) {
                    for (var n = [], a = 0, r = e; a < r.length; a++) {
                        var o = r[a];
                        if (o.emotes) {
                            var s = this.filterEmoteSet(o.emotes, t);
                            s.length > 0 && n.push(i.__assign({}, o, {
                                emotes: s
                            }))
                        }
                    }
                    return n
                }, t = i.__decorate([Object(f.d)("EmotePickerMenu", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component)),
            R = n("LYwx"),
            O = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.trackSubEvent = function(e) {
                        Object(v.b)(i.__assign({}, e, {
                            action: v.a.ClickCheckout,
                            channelID: n.props.channelData && n.props.channelData.user && n.props.channelData.user.id || "",
                            channelLogin: n.props.channelData && n.props.channelData.user && n.props.channelData.user.displayName || "",
                            isMenuOpen: null,
                            hasSubCredit: null,
                            sub_location: "emote_picker",
                            modal: !1,
                            showPrimeContent: !0,
                            giftRecipient: null
                        }))
                    };
                    var a = {
                        allEmoteSets: [],
                        availableUpsells: [],
                        channelTabVisible: !1,
                        gqlError: t.emoteSetsData && !!t.emoteSetsData.error || t.channelData && !!t.channelData.error || !1,
                        gqlLoading: t.emoteSetsData && !!t.emoteSetsData.loading || t.channelData && !!t.channelData.loading || !1,
                        subscribeTexts: [],
                        ownedChannelEmoteSets: [],
                        ownedSetIDs: new Set([])
                    };
                    return a = n.applyDataPropsToState(t, a), n.state = i.__assign({}, a), n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.checkDataLoaded(this.props) && (this.props.onLoad && this.props.onLoad(this.checkForContent(this.props)), this.props.latencyTracking.reportInteractive())
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.emoteSetsData && e.emoteSetsData.error || e.channelData && e.channelData.error) this.setState({
                        gqlError: !0
                    });
                    else {
                        var t = this.applyDataPropsToState(e, this.state);
                        this.props.pubsub.messages.subscriptionInfo !== e.pubsub.messages.subscriptionInfo && (this.props.channelData && this.props.channelData.refetch(), this.props.emoteSetsData && this.props.emoteSetsData.refetch()), this.checkDataLoaded(e) && (e.latencyTracking.reportInteractive(), e.onLoad && e.onLoad(this.checkForContent(e)), t.gqlLoading = !1), this.setState(i.__assign({}, t, {
                            gqlError: !1
                        }))
                    }
                }, t.prototype.render = function() {
                    var e = this.props.channelData && this.props.channelData.user && this.props.channelData.user.id || "",
                        t = Object(c.c)(e, this.props.sessionUser);
                    return this.props.visible ? a.createElement(D, {
                        allEmoteSets: this.state.allEmoteSets,
                        availableUpsells: this.state.availableUpsells,
                        channelTabVisible: this.state.channelTabVisible,
                        gqlError: this.state.gqlError,
                        isEsportChannel: t,
                        loading: this.state.gqlLoading,
                        onClickEmote: this.props.onClickEmote,
                        ownedChannelEmoteSets: this.state.ownedChannelEmoteSets,
                        toggleVisibility: this.props.toggleVisibility,
                        subscribeTexts: this.state.subscribeTexts,
                        reportSubAction: this.trackSubEvent,
                        direction: this.props.direction,
                        size: this.props.size
                    }) : null
                }, t.prototype.checkDataLoaded = function(e) {
                    var t = !e.channelOwnerID || e.channelData && !e.channelData.loading,
                        n = !e.isLoggedIn || e.emoteSetsData && !e.emoteSetsData.loading;
                    return t && n
                }, t.prototype.checkForContent = function(e) {
                    var t = e.emoteSetsData && e.emoteSetsData.emoteSets && e.emoteSetsData.emoteSets.length > 0 || !1,
                        n = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1;
                    return t || n
                }, t.prototype.applyDataPropsToState = function(e, t) {
                    var n, a, r, o, s = i.__assign({}, t);
                    if (e.emoteSetsData && e.emoteSetsData.emoteSets && (s.ownedSetIDs = new Set(e.emoteSetsData.emoteSets.map(function(e) {
                            return parseInt(e.id, 10)
                        })), s.allEmoteSets = Object(m.a)(e.emoteSetsData.emoteSets)), e.channelData && e.channelData.user) {
                        var l = void 0;
                        e.channelData.user.self && e.channelData.user.self.subscriptionBenefit && (l = e.channelData.user.self.subscriptionBenefit.platform), s.availableUpsells = (n = s.ownedSetIDs, a = e.channelData.user.subscriptionProducts, o = [], !(r = l) || r !== h.a.IOS && r !== h.a.Android ? (a.forEach(function(e, t) {
                            var r = e.price;
                            0 === t && Object(g.d)(a) && (r = Object(g.a)(a[0])), e.emotes && e.emotes.length && e.emoteSetID && !n.has(parseInt(e.emoteSetID, 10)) && o.push(i.__assign({}, e, {
                                emotes: Object(m.b)(e.emotes),
                                level: t,
                                price: r
                            }))
                        }), o) : o), s.subscribeTexts = function(e) {
                            for (var t = [], n = 0; n < e.length; n++) {
                                var i = e[n];
                                0 === n && i.emotes && i.emotes.length > 1 ? t[n] = Object(p.d)("Unlock {numEmotes, number} Sub Emotes", {
                                    numEmotes: i.emotes.length
                                }, "assembleSubscribeTexts") : 0 === n ? t[n] = Object(p.d)("Unlock 1 Sub Emote", "assembleSubscribeTexts") : i.emotes && i.emotes.length > 1 ? t[n] = Object(p.d)("{numEmotes, number} Extra {price} Sub Emotes", {
                                    numEmotes: i.emotes.length,
                                    price: i.price
                                }, "assembleSubscribeTexts") : i.emotes && i.emotes.length && (t[n] = Object(p.d)("1 Extra {price} Sub Emote", {
                                    price: i.price
                                }, "assembleSubscribeTexts"))
                            }
                            return t
                        }(e.channelData.user.subscriptionProducts), s.ownedChannelEmoteSets = function(e, t) {
                            for (var n = [{
                                    id: "0",
                                    emotes: []
                                }], i = 0, a = t; i < a.length; i++) {
                                var r = a[i];
                                r.emotes && r.emoteSetID && e.has(parseInt(r.emoteSetID, 10)) && (n[0].emotes = n[0].emotes.concat(Object(m.b)(r.emotes)))
                            }
                            return n[0].emotes.length ? n : []
                        }(s.ownedSetIDs, e.channelData.user.subscriptionProducts)
                    }
                    return s.channelTabVisible = e.channelData && e.channelData.user && e.channelData.user.subscriptionProducts.filter(this.subscriptionProductHasEmotes).length > 0 || !1, s
                }, t.prototype.subscriptionProductHasEmotes = function(e) {
                    return void 0 !== e.emoteSetID && !!e.emotes && e.emotes.length > 0
                }, t
            }(a.Component);
        var I = Object(r.compose)(Object(o.b)(function(e) {
            return {
                currentUserID: e.session.user && e.session.user.id,
                sessionUser: e.session.user,
                isLoggedIn: Object(u.d)(e)
            }
        }), Object(s.a)(R, {
            name: "channelData",
            skip: function(e) {
                return !e.channelOwnerID
            },
            options: function(e) {
                return {
                    variables: {
                        channelOwnerID: e.channelOwnerID
                    }
                }
            }
        }), Object(l.a)([{
            topic: function(e) {
                return "user-subscribe-events-v1." + e.currentUserID
            },
            mapMessageTypesToProps: {
                "*": "subscriptionInfo"
            },
            skip: function(e) {
                return !e.currentUserID
            }
        }]), Object(f.d)("EmotePicker"), Object(d.a)())(O);
        n.d(t, "a", function() {
            return I
        })
    },
    P0T5: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), t.j = function() {
            g(a.MarkAllRead)
        }, t.h = function() {
            g(a.EnableDoNotDisturb)
        }, t.g = function() {
            g(a.DisableDoNotDisturb)
        }, t.l = function(e, t) {
            p({
                context: t,
                targetUserLogin: e,
                reason: i.Spam,
                source: "conversations_button"
            })
        }, t.o = function(e) {
            h(e, s.MarkNotSpam)
        }, t.n = function(e) {
            h(e, s.Archive)
        }, t.k = function(e) {
            m({
                threadID: e,
                action: r.Mute
            })
        }, t.m = function(e) {
            m({
                threadID: e,
                action: r.Unmute
            })
        }, t.i = function(e) {
            m({
                threadID: e,
                action: r.Expand
            })
        }, t.e = function(e) {
            m({
                threadID: e,
                action: r.Collapse
            })
        }, t.d = function(e) {
            m({
                threadID: e,
                action: r.Close
            })
        }, t.b = function(e) {
            m({
                threadID: e,
                action: r.Archive
            })
        }, t.f = function(e) {
            d.o.tracking.track(c.SpadeEventType.WhisperThreadCreate, {
                conversation_id: e.threadID,
                target_login: e.targetUserlogin,
                source: "search_target_result",
                search_result_rank: e.searchResultRank
            })
        }, t.c = function(e) {
            d.o.tracking.track(c.SpadeEventType.WhisperSearchClick, {
                query: e.searchQuery,
                source: "conversation_list",
                rank: e.searchResultRank,
                is_conversation: e.isConversation
            })
        }, t.q = function(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t;
                return l.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, f()];
                        case 1:
                            return t = n.sent(), d.o.tracking.track(c.SpadeEventType.WhisperSent, {
                                to: e.targetUserLogin,
                                from: t && t.login,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID,
                                availability: t && t.availability
                            }), [2]
                    }
                })
            })
        }, t.p = function(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t;
                return l.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, f()];
                        case 1:
                            return t = n.sent(), d.o.tracking.track(c.SpadeEventType.WhisperReceived, {
                                to: t && t.login,
                                from: e.targetUserLogin,
                                player: "web",
                                is_turbo: t && t.hasTurbo,
                                conversation_id: e.threadID
                            }), [2]
                    }
                })
            })
        };
        var i, a, r, o, s, l = n("TToO"),
            d = n("6sO2"),
            c = n("vH/s"),
            u = n("yDSg");
        n.n(u);

        function m(e) {
            d.o.tracking.track(c.SpadeEventType.WhisperThreadMod, {
                conversation_id: e.threadID,
                action: e.action
            })
        }

        function p(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t;
                return l.__generator(this, function(n) {
                    switch (n.label) {
                        case 0:
                            return [4, f()];
                        case 1:
                            return t = n.sent(), d.o.tracking.track(c.SpadeEventType.WhisperIgnoreUser, {
                                ui_context: e.context,
                                from_login: t && t.login,
                                ignored_login: e.targetUserLogin,
                                reason: e.reason || i.Other,
                                source: e.source
                            }), [2]
                    }
                })
            })
        }

        function h(e, t) {
            return l.__awaiter(this, void 0, void 0, function() {
                var n;
                return l.__generator(this, function(i) {
                    switch (i.label) {
                        case 0:
                            return [4, f()];
                        case 1:
                            return n = i.sent(), d.o.tracking.track(c.SpadeEventType.WhisperThreadMod, {
                                conversation_id: e,
                                action: t,
                                login: n && n.login
                            }), [2]
                    }
                })
            })
        }

        function g(e) {
            d.o.tracking.track(c.SpadeEventType.WhisperAllThreadsMod, {
                action: e
            })
        }

        function f() {
            var e = this;
            return new Promise(function(t) {
                setTimeout(function() {
                    return l.__awaiter(e, void 0, void 0, function() {
                        var e, n, i;
                        return l.__generator(this, function(a) {
                            switch (a.label) {
                                case 0:
                                    e = null, a.label = 1;
                                case 1:
                                    return a.trys.push([1, 3, , 4]), [4, d.o.apollo.client.query({
                                        query: u
                                    })];
                                case 2:
                                    return e = a.sent(), [3, 4];
                                case 3:
                                    return n = a.sent(), d.j.error(n, "Failed to make query for current user info in WhisperSent reporting"), [3, 4];
                                case 4:
                                    return i = e && e.data && e.data.currentUser, t(i), [2]
                            }
                        })
                    })
                })
            })
        }! function(e) {
            e.Harassment = "Harassment", e.Spam = "Spam", e.Other = "Other"
        }(i || (i = {})),
        function(e) {
            e.MarkAllRead = "mark_all_read", e.EnableDoNotDisturb = "do_not_disturb_on", e.DisableDoNotDisturb = "do_not_disturb_off"
        }(a || (a = {})),
        function(e) {
            e.Mute = "mute", e.Unmute = "unmute", e.Expand = "maximize", e.Collapse = "minimize", e.Close = "close", e.Archive = "archive", e.Open = "open"
        }(r || (r = {})),
        function(e) {
            e.Dock = "dock", e.SpamPropmt = "dock_spam_cta"
        }(o || (o = {})),
        function(e) {
            e.Archive = "archive", e.MarkNotSpam = "mark_not_spam"
        }(s || (s = {}))
    },
    P7hg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ActiveRoomButton"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sendMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 133
            }
        };
        n.loc.source = {
            body: "query ActiveRoomButton($id: ID!) {\nroom(id: $id) {\nid\nname\nisPreviewable\nminimumAllowedRole\nself {\npermissions {\nsendMessages\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    PPK2: function(e, t) {},
    PqoY: function(e, t) {},
    QCOJ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Embed: "embed",
            Web: "web"
        }
    },
    QFW6: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("6sO2"),
            o = n("vH/s");
        ! function(e) {
            e.Everyone = "everyone", e.ModsOnly = "mod", e.StreamChat = "twitch_chat", e.SubsOnly = "sub"
        }(i || (i = {}));
        var s = n("gGMi");
        n.d(t, "a", function() {
            return l
        }), n.d(t, "b", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var l = function(e) {
                var t;
                switch (e.roomMinimumRole) {
                    case s.b.Everyone:
                        t = i.Everyone;
                        break;
                    case s.b.Moderator:
                        t = i.ModsOnly;
                        break;
                    case s.b.Subscriber:
                        t = i.SubsOnly;
                        break;
                    default:
                        t = i.StreamChat
                }
                var n = {
                    channel: e.channelLogin,
                    chatroom_type: t,
                    is_host_mode: e.isHostMode,
                    is_using_web_sockets: !0
                };
                return e.roomID && (n.chatroom_id = e.roomID), n
            },
            d = function(e) {
                r.n.track(o.SpadeEventType.ChatRoomJoined, l(e))
            },
            c = function(e) {
                r.n.track(o.SpadeEventType.ChatRoomWatched, a.__assign({}, l(e), {
                    channel_id: e.channelID,
                    client_time: Math.floor(e.clientTime / 1e3)
                }))
            }
    },
    "QKs+": function(e, t, n) {
        "use strict";
        t.a = function() {
            return Object(i.a)(a, {
                props: function(e) {
                    if (e.data && !e.data.loading && !e.data.error && e.data.currentUser && e.data.currentUser.blockedUsers) {
                        var t = e.data.currentUser.blockedUsers.reduce(function(e, t) {
                            return t && t.id && e.push(t.id), e
                        }, []);
                        return {
                            blockedUsers: t
                        }
                    }
                    return {
                        blockedUsers: []
                    }
                },
                skip: function(e) {
                    return !(e.isLoggedIn || e.authToken)
                }
            })
        };
        var i = n("7vx8"),
            a = n("vKYs");
        n.n(a)
    },
    QMHY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatRoom_AutohostPrompt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 135
            }
        };
        n.loc.source = {
            body: "query ChatRoom_AutohostPrompt($login: String!) {\ncurrentUser {\nid\n}\nuser(login: $login) {\nid\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QNxL: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "SharePurchaseTokenInChat"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "SharePurchaseTokenInChatInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "sharePurchaseTokenInChat"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 125
            }
        };
        n.loc.source = {
            body: "mutation SharePurchaseTokenInChat($input:SharePurchaseTokenInChatInput!) {\nsharePurchaseTokenInChat(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QPF3: function(e, t, n) {
        "use strict";
        t.a = function() {
            if (i.b) {
                var e = window.getComputedStyle(i.b);
                return +e.getPropertyValue("width").replace("px", "")
            }
            return 0
        };
        var i = n("1Mw/")
    },
    QRuM: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("GiK3"),
            o = n("6sO2");
        ! function(e) {
            e.On = "on", e.Off = "off", e.StaffOnly = "staff"
        }(i || (i = {}));
        var s = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    var e = o.b.get(this.props.name, i.Off);
                    return e === i.On || e === i.StaffOnly && this.props.isStaff ? this.props.children : null
                }, t
            }(r.Component),
            l = s;
        n.d(t, "a", function() {
            return i
        }), n.d(t, "c", function() {
            return s
        }), n.d(t, "b", function() {
            return l
        })
    },
    "QU+n": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "badge"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "Badge"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "setID"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "version"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "title"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image1x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "NORMAL"
                            }
                        }],
                        directives: []
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image2x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "DOUBLE"
                            }
                        }],
                        directives: []
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "image4x"
                        },
                        name: {
                            kind: "Name",
                            value: "imageURL"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "size"
                            },
                            value: {
                                kind: "EnumValue",
                                value: "QUADRUPLE"
                            }
                        }],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "clickAction"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "clickURL"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 170
            }
        };
        n.loc.source = {
            body: "fragment badge on Badge {\nid\nsetID\nversion\ntitle\nimage1x: imageURL(size: NORMAL)\nimage2x: imageURL(size: DOUBLE)\nimage4x: imageURL(size: QUADRUPLE)\nclickAction\nclickURL\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QY1R: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomPicker"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isBroadcaster"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "maxAllowedChannelRooms"
                                },
                                arguments: [],
                                directives: [{
                                    kind: "Directive",
                                    name: {
                                        kind: "Name",
                                        value: "include"
                                    },
                                    arguments: [{
                                        kind: "Argument",
                                        name: {
                                            kind: "Name",
                                            value: "if"
                                        },
                                        value: {
                                            kind: "Variable",
                                            name: {
                                                kind: "Name",
                                                value: "isBroadcaster"
                                            }
                                        }
                                    }]
                                }]
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channelRooms"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "topic"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPreviewable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumAllowedRole"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isArchived"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isMuted"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isUnread"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unreadMentionCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "subscriptionProducts"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 353
            }
        };
        n.loc.source = {
            body: "query RoomPicker ($id: ID! $isBroadcaster: Boolean!) {\nuser(id: $id) {\nid\ndisplayName\nmaxAllowedChannelRooms @include(if: $isBroadcaster)\nchannelRooms {\nname\nid\ntopic\nisPreviewable\nminimumAllowedRole\nself {\nisArchived\nisMuted\nisUnread\nunreadMentionCount\n}\n}\nself {\nisChannelMember\nisModerator\nsubscriptionBenefit {\nid\n}\n}\nsubscriptionProducts {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    QkQX: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_RejectFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RejectFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "rejectFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "friendButtonFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nmutation FriendButton_RejectFriendRequest($input: RejectFriendRequestInput!) {\nrejectFriendRequest(input: $input) {\nuser {\nid\n...friendButtonFragment\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    QsiC: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "PinnedCheer_Cheers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "top"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isTopEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 275
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/chat/models/chat-message-fragment.gql"\nquery PinnedCheer_Cheers($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\ntop {\n...chatMessage\n}\nrecent {\n...chatMessage\n}\nrecentTimeoutMs\nsettings {\nisRecentEnabled\nisTopEnabled\nrecentTimeoutMs\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("Mful").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    R9op: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            if (e.chat && e.chat.messages) return e.chat.messages[t] || [];
            return []
        }, t.c = function(e) {
            return e.chat.renderSent
        }, t.b = function(e) {
            var t = [];
            if (e.chat && e.chat.commandHandlers)
                for (var n in e.chat.commandHandlers) e.chat.commandHandlers[n] && t.push(n);
            return t.sort()
        };
        var i = n("TToO"),
            a = n("LIeg"),
            r = (n.n(a), n("6sO2")),
            o = n("vh75"),
            s = n("UzRK"),
            l = n("VsL1");
        r.o.store.registerReducer("chat", function(e, t) {
            var n, r;
            switch (void 0 === e && (n = Object(l.a)(), e = i.__assign({}, n, {
                commandHandlers: {},
                emoteSets: [],
                followerDuration: s.a,
                followerMode: !1,
                isHidden: !1,
                messages: {},
                slowMode: !1,
                subsOnlyMode: !1,
                renderSent: null
            })), t.type) {
                case o.d:
                    return i.__assign({}, e, {
                        isHidden: !0
                    });
                case o.e:
                    return i.__assign({}, e, {
                        emoteSets: [],
                        messages: {}
                    });
                case o.f:
                    return i.__assign({}, e, {
                        isHidden: !1
                    });
                case o.g:
                    return i.__assign({}, e, {
                        emoteSets: t.emoteSets
                    });
                case o.h:
                    return i.__assign({}, e, {
                        followerMode: !1
                    });
                case o.i:
                    return i.__assign({}, e, {
                        followerDuration: t.duration
                    });
                case o.j:
                    return i.__assign({}, e, {
                        lastUsedFollowerDurations: i.__assign({}, e.lastUsedFollowerDurations, (r = {}, r[t.channelLogin] = t.duration, r))
                    });
                case o.k:
                    return i.__assign({}, e, {
                        followerMode: !0
                    });
                case o.l:
                    return a(e, function(e) {
                        return e.messages
                    }, function(e) {
                        return e[t.channel] = t.messages.slice(), e
                    });
                case o.b:
                    return i.__assign({}, e, {
                        showAutoModActions: !1
                    });
                case o.c:
                    return i.__assign({}, e, {
                        showAutoModActions: !0
                    });
                case o.m:
                    return i.__assign({}, e, {
                        showModerationActions: !1
                    });
                case o.n:
                    return i.__assign({}, e, {
                        showModerationActions: !0
                    });
                case o.o:
                    return i.__assign({}, e, {
                        showModIcons: !1
                    });
                case o.p:
                    return i.__assign({}, e, {
                        showModIcons: !0
                    });
                case o.s:
                    return i.__assign({}, e, {
                        slowMode: !1
                    });
                case o.t:
                    return i.__assign({}, e, {
                        slowMode: !0
                    });
                case o.u:
                    return i.__assign({}, e, {
                        subsOnlyMode: !1
                    });
                case o.v:
                    return i.__assign({}, e, {
                        subsOnlyMode: !0
                    });
                case o.w:
                    return i.__assign({}, e, {
                        showTimestamps: !1
                    });
                case o.x:
                    return i.__assign({}, e, {
                        showTimestamps: !0
                    });
                case o.a:
                    return a(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return e[t.command] = t.handler, e
                    });
                case o.q:
                    return a(e, function(e) {
                        return e.commandHandlers
                    }, function(e) {
                        return delete e[t.command], e
                    });
                case o.r:
                    return i.__assign({}, e, {
                        renderSent: t.customEvent
                    });
                default:
                    return e
            }
        })
    },
    RbGx: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("GiK3"),
            a = (n.n(i), n("mbxv")),
            r = function(e) {
                var t, n = e.badgesToRender,
                    r = e.badgeSets,
                    o = [];
                t = n, Array.isArray(t) ? o = n.map(function(e) {
                    var t = r.getBadge(e.setID, e.version);
                    return null === t ? null : i.createElement(a.a, {
                        key: t.setID + "/" + t.version,
                        badge: t
                    })
                }) : function(e) {
                    return !Array.isArray(e)
                }(n) && (o = Object.keys(n).map(function(e) {
                    var t = n[e],
                        o = r.getBadge(e, t);
                    return null === o ? null : i.createElement(a.a, {
                        key: o.setID + "/" + o.version,
                        badge: o
                    })
                }));
                var s = o.filter(function(e) {
                    return null !== e
                });
                return i.createElement("span", null, s)
            }
    },
    RweG: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2");

        function o(e) {
            return function(t) {
                return function(n) {
                    function o(t) {
                        var i = n.call(this, t) || this;
                        i.unsubscribers = {};
                        var a = {};
                        return e.map(function(e) {
                            e.skip && e.skip(t) || (a[i.getTopic(e.topic, t)] = {
                                isSubscribing: !0
                            })
                        }), i.state = {
                            status: a,
                            messages: {}
                        }, i
                    }
                    return i.__extends(o, n), o.prototype.componentDidMount = function() {
                        var t = this;
                        e.forEach(function(e) {
                            if (!e.skip || !e.skip(t.props)) {
                                var n = t.getTopic(e.topic, t.props);
                                t.unsubscribers[n] = t.subscribe(e, n)
                            }
                        })
                    }, o.prototype.componentWillReceiveProps = function(t) {
                        var n = this,
                            a = {},
                            r = {};
                        e.forEach(function(e) {
                            if (!e.skip || !e.skip(t)) {
                                var i = n.getTopic(e.topic, t);
                                a[i] || (a[i] = {
                                    isSubscribing: !0
                                }), n.unsubscribers[i] ? r[i] = n.unsubscribers[i] : r[i] = n.subscribe(e, i)
                            }
                        }), Object.keys(this.unsubscribers).forEach(function(e) {
                            r[e] || n.unsubscribers[e]()
                        }), this.unsubscribers = r, this.setState(function(e) {
                            return {
                                status: i.__assign({}, e.status, a)
                            }
                        })
                    }, o.prototype.componentWillUnmount = function() {
                        var e = this;
                        Object.keys(this.unsubscribers).map(function(t) {
                            return e.unsubscribers[t]()
                        })
                    }, o.prototype.render = function() {
                        var e = {
                            pubsub: {
                                messages: this.state.messages,
                                status: this.state.status
                            }
                        };
                        return a.createElement(t, i.__assign({}, this.props, e))
                    }, o.prototype.getTopic = function(e, t) {
                        return "string" == typeof e ? e : e(t)
                    }, o.prototype.subscribe = function(e, t) {
                        var n = this;
                        return r.k.subscribe({
                            topic: t,
                            success: function() {
                                n.setState(function(e) {
                                    return {
                                        status: i.__assign({}, e.status, (n = {}, n[t] = {
                                            isSubscribing: !1
                                        }, n))
                                    };
                                    var n
                                })
                            },
                            failure: function(e) {
                                n.setState(function(n) {
                                    return {
                                        status: i.__assign({}, n.status, (a = {}, a[t] = {
                                            error: e,
                                            isSubscribing: !1
                                        }, a))
                                    };
                                    var a
                                })
                            },
                            onMessage: function(t) {
                                var a = e.mapMessageTypesToProps[t.type || ""] || e.mapMessageTypesToProps["*"];
                                a && (e.skipMessage && e.skipMessage(t, n.props) || n.setState(function(e) {
                                    return {
                                        messages: i.__assign({}, e.messages, (n = {}, n[a] = t, n))
                                    };
                                    var n
                                }))
                            }
                        })
                    }, o
                }(a.Component)
            }
        }
        n.d(t, "a", function() {
            return o
        })
    },
    RwqP: function(e, t) {},
    S20p: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_ShareResub_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "resubNotification"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "months"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "token"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 142
            }
        };
        n.loc.source = {
            body: "query Chat_ShareResub_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nself {\nresubNotification {\nid\nmonths\ntoken\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    S4DY: function(e, t) {},
    SX5d: function(e, t) {},
    SZoP: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        }), t.b = o;
        var i = n("GiK3"),
            a = (n.n(i), /^[\x00-\x7F]*$/),
            r = function(e, t, n) {
                return void 0 === n && (n = !1), t && e && !o(t) ? n ? t + " (" + e + ")" : i.createElement("span", null, t, " ", i.createElement("span", {
                    className: "intl-login"
                }, "(" + e + ")")) : t || (e || "")
            };

        function o(e) {
            return a.test(e)
        }
    },
    ScRf: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_UpdateChatColor"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateChatColorInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateChatColor"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "chatColor"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 117
            }
        };
        n.loc.source = {
            body: "mutation Chat_UpdateChatColor($input: UpdateChatColorInput!){\nupdateChatColor(input: $input) {\nuser {\nchatColor\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    TCxx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UpdateRoomModes"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomModesInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoomModes"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "room"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "modes"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "slowModeDurationSeconds"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "r9kModeEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emotesOnlyModeEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumSlowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "maximumSlowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 254
            }
        };
        n.loc.source = {
            body: "mutation UpdateRoomModes($input: UpdateRoomModesInput!) {\nupdateRoomModes(input: $input) {\nroom {\nid\nmodes {\nslowModeDurationSeconds\nr9kModeEnabled\nemotesOnlyModeEnabled\n}\n}\nerror {\ncode\nminimumSlowModeDurationSeconds\nmaximumSlowModeDurationSeconds\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "TT/W": function(e, t) {},
    TVUY: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "currentUser"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "login"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "displayName"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "availability"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "activity"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "type"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Watching"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "user"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "displayName"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Streaming"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "stream"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "game"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "name"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "InlineFragment",
                                typeCondition: {
                                    kind: "NamedType",
                                    name: {
                                        kind: "Name",
                                        value: "Playing"
                                    }
                                },
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 204
            }
        };
        n.loc.source = {
            body: "fragment currentUser on User {\nid\nlogin\ndisplayName\navailability\nactivity {\ntype\n... on Watching {\nuser {\ndisplayName\n}\n}\n... on Streaming {\nstream {\ngame {\nname\n}\n}\n}\n... on Playing {\ngame {\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ta4Q: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UnmodUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnmodUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unmodUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channel"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "target"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 119
            }
        };
        n.loc.source = {
            body: "mutation UnmodUser($input: UnmodUserInput!){\nunmodUser(input: $input) {\nchannel {\nid\n}\ntarget {\nid\n}\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    TeXj: function(e, t, n) {
        "use strict";
        t.c = function(e, t, n) {
            void 0 === n && (n = !1);
            return u(r, e, t, n)
        }, t.a = c, t.b = function(e, t, n) {
            void 0 === n && (n = !1);
            var r = i.b.get(s, a.a.Off),
                o = t && t.roles && t.roles.isStaff || !1;
            return c(e, t, n) && (r === a.a.On || r === a.a.StaffOnly && o)
        }, t.d = function(e) {
            var t = i.b.get(l, a.a.Off),
                n = i.b.get(d, []),
                r = e && n.includes(e.id) || !1,
                o = e && e.roles && e.roles.isStaff || !1;
            return t === a.a.On || t === a.a.StaffOnly && o || r
        };
        var i = n("6sO2"),
            a = n("QRuM"),
            r = "esport_channel_page_whitelist",
            o = "esport_insider_pass_whitelist",
            s = "esport_insider_pass_gifting_launch",
            l = "esport_insider_prime_bits_launch",
            d = "esport_insider_prime_bits_launch_user_whitelist";

        function c(e, t, n) {
            return void 0 === n && (n = !1), u(o, e, t, n)
        }

        function u(e, t, n, a) {
            void 0 === a && (a = !1);
            var r = i.b.get(e, []),
                o = n && n.roles && n.roles.isStaff || a;
            return r.includes(t) || r.includes(t + "-staff") && o
        }
    },
    "Ti/Y": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation DismissNewChatterToken($input: DismissRitualTokenInput!) {\ndismissRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    TnJK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            DarkMode: "darkMode",
            FollowerDuration: "followerDuration",
            FollowerMode: "followerMode",
            HideChat: "hideChat",
            ShowMessageFlags: "showMessageFlags",
            ShowAutoModActions: "showAutoModActions",
            ShowModActions: "showModerationActions",
            ShowModIcons: "showModIcons",
            ShowTimestamps: "showTimestamps",
            SlowMode: "slowMode"
        }
    },
    Tur5: function(e, t, n) {
        "use strict";
        var i = n("bgpf");
        n.d(t, "RitualTokenMutationErrors", function() {
            return i.a
        }), n.d(t, "RitualTokenStatus", function() {
            return i.b
        }), n.d(t, "RitualTokenType", function() {
            return i.c
        });
        var a = n("AQmT"),
            r = (n.n(a), n("xfb5")),
            o = (n.n(r), n("6vcJ"));
        n.n(o)
    },
    Tzcg: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        }), n.d(t, "a", function() {
            return m
        }), n.d(t, "e", function() {
            return h
        }), n.d(t, "d", function() {
            return g
        });
        var i = n("TToO"),
            a = n("Bir6"),
            r = n("nEoF"),
            o = {
                "^B-?\\)$": "B)",
                "^:-?[z|Z|\\|]$": ":|",
                "^:-?\\)$": ":)",
                "^:-?\\($": ":(",
                "^:-?(p|P)$": ":P",
                "^;-?(p|P)$": ";P",
                "^:-?[\\\\/]$": ":/",
                "^;-?\\)$": ";)",
                "^R-?\\)$": "R)",
                "^:>$": ":>",
                "^[oO](_|\\.)[oO]$": "O_o",
                "^:-?D$": ":D",
                "^:-?(o|O)$": ":O",
                "^>\\($": ">(",
                "^:-?(?:7|L)$": ":7",
                "^:-?(S|s)$": ":S",
                "^#-?[\\\\/]$": "#/",
                "^<\\]$": "<]",
                "^<3$": "<3",
                "^&lt;3$": "<3",
                "^&lt;\\]$": "<]",
                "^&gt;\\($": ">("
            },
            s = ["1.0", "2.0", "3.0"],
            l = new Set([457, 33, 42, 0]),
            d = function(e) {
                return e.map(function(e) {
                    var t = p(e.token),
                        n = o[t] || t,
                        a = s.reduce(function(t, n) {
                            var i = t.concat("https://static-cdn.jtvnw.net/emoticons/v1/" + e.id + "/" + n + " " + n + "x");
                            return "3.0" !== n && (i = i.concat(", ")), i
                        }, "");
                    return i.__assign({
                        displayName: n,
                        srcSet: a
                    }, e)
                })
            },
            c = function(e) {
                var t = p(e);
                return o[t] || t
            },
            u = function(e) {
                return e.slice().sort(function(e, t) {
                    return parseInt(e.id, 10) - parseInt(t.id, 10)
                })
            },
            m = function(e) {
                for (var t = [], n = [], i = 0, a = e; i < a.length; i++) {
                    var r = a[i];
                    l.has(parseInt(r.id, 10)) ? t.push({
                        id: r.id,
                        emotes: d(u(r.emotes))
                    }) : n.push({
                        id: r.id,
                        emotes: d(u(r.emotes))
                    })
                }
                return n.concat(t)
            },
            p = function(e) {
                return function(e) {
                    return /[\|\\\^\$\*\+\?\:\#]/.test(e)
                }(e) ? "^" + e.replace(/\\(?=[&;:])/g, "") + "$" : e
            },
            h = function(e, t) {
                var n = r.c,
                    i = [],
                    o = [],
                    s = [],
                    l = new RegExp("^" + Object(a.a)(t), "i");
                return e.forEach(function(e) {
                    n[e.token] ? s.push(e) : e.token.match(l) ? i.push(e) : o.push(e)
                }), i.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), o.sort(function(e, t) {
                    return e.token < t.token ? -1 : e.token > t.token ? 1 : 0
                }), s.sort(function(e, t) {
                    return n[t.token].count - n[e.token].count
                }), s.concat(i).concat(o)
            },
            g = function(e) {
                var t = {};
                return e.filter(function(e) {
                    return !t.hasOwnProperty(e.token) && (t[e.token] = !0)
                })
            }
    },
    "U+9K": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RoomDetails_UpdateRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "room"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "topic"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPreviewable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumAllowedRole"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "maxLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 179
            }
        };
        n.loc.source = {
            body: "mutation RoomDetails_UpdateRoom($input: UpdateRoomInput!) {\nupdateRoom(input: $input) {\nroom {\nname\ntopic\nisPreviewable\nminimumAllowedRole\n}\nerror {\ncode\nmaxLength\nminLength\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    UMQJ: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_Channels"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "sourceChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetChannelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "sourceChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "sourceChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "targetChannel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetChannelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "profileImageURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "70"
                                    }
                                }],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 268
            }
        };
        n.loc.source = {
            body: "query RaidNotification_Channels($sourceChannelID: ID! $targetChannelID: ID!) {\nsourceChannel: user(id: $sourceChannelID) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\n}\ntargetChannel: user(id: $targetChannelID) {\nid\nlogin\ndisplayName\nprofileImageURL(width: 70)\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ucyv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "UpdateLastReadAt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomViewInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoomView"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roomView"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMentionCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lastReadAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation UpdateLastReadAt($input: UpdateRoomViewInput!) {\nupdateRoomView(input: $input) {\nroomView {\nunreadMentionCount\nlastReadAt\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    Ugo3: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_UnfriendUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnfriendUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unfriendUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "friendButtonFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 211
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nmutation FriendButton_UnfriendUser($input: UnfriendUserInput!) {\nunfriendUser(input: $input) {\nuser {\nid\n...friendButtonFragment\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    UiRd: function(e, t) {},
    Umoc: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return l
        }), n.d(t, "a", function() {
            return d
        }), n.d(t, "c", function() {
            return c
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            o = n("TnJK"),
            s = n("QFW6"),
            l = function(e) {
                a.n.track(r.SpadeEventType.ChatSettingsOpened, Object(s.a)(e))
            },
            d = function(e) {
                var t = i.__assign({}, Object(s.a)(e), {
                    setting_name: e.settingName,
                    new_value: e.newValue.toString()
                });
                a.n.track(r.SpadeEventType.ChatSettingsChanged, t)
            },
            c = function(e) {
                var t = i.__assign({}, Object(s.a)(e), {
                    setting_name: o.a.FollowerDuration,
                    new_value: e.newValue.toString(),
                    follower_mode_on: e.followerModeOn
                });
                a.n.track(r.SpadeEventType.ChatSettingsChanged, t)
            }
    },
    Uvj5: function(e, t) {},
    UzRK: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        }), t.c = function(e) {
            switch (e) {
                case 0:
                    return Object(i.d)("0 minutes (Any followers)", "FollowersOnlyLabel");
                case 10:
                    return Object(i.d)("10 minutes (Most used)", "FollowersOnlyLabel");
                case 30:
                    return Object(i.d)("30 minutes", "FollowersOnlyLabel");
                case 60:
                    return Object(i.d)("1 hour", "FollowersOnlyLabel");
                case 1440:
                    return Object(i.d)("1 day", "FollowersOnlyLabel");
                case 10080:
                    return Object(i.d)("1 week", "FollowersOnlyLabel");
                case 43200:
                    return Object(i.d)("1 month", "FollowersOnlyLabel");
                case 129600:
                    return Object(i.d)("3 months", "FollowersOnlyLabel");
                default:
                    return i.j.warn("[FollowersOnlyLabel] Tried to generate a label for a non-preset.", e), ""
            }
        }, t.d = function(e) {
            switch (e) {
                case 0:
                    return Object(i.d)("0 min", "FollowersOnlyShorthand");
                case 10:
                    return Object(i.d)("10 min", "FollowersOnlyShorthand");
                case 30:
                    return Object(i.d)("30 min", "FollowersOnlyShorthand");
                case 60:
                    return Object(i.d)("1 hr", "FollowersOnlyShorthand");
                case 1440:
                    return Object(i.d)("1 day", "FollowersOnlyShorthand");
                case 10080:
                    return Object(i.d)("1 wk", "FollowersOnlyShorthand");
                case 43200:
                    return Object(i.d)("1 mo", "FollowersOnlyShorthand");
                case 129600:
                    return Object(i.d)("3 mo", "FollowersOnlyShorthand");
                default:
                    return Object(i.d)("custom", "FollowersOnlyShorthand")
            }
        };
        var i = n("6sO2"),
            a = 30,
            r = [0, 10, 30, 60, 1440, 10080, 43200, 129600]
    },
    "V+9p": function(e, t) {},
    "VB5+": function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            o = n("QFW6"),
            s = function(e) {
                var t = i.__assign({}, Object(o.a)(e), {
                    mentioned_user_display_name: e.mentionedUserDisplayName,
                    user: e.userLogin
                });
                a.n.track(r.SpadeEventType.ChatMentionUsed, t)
            }
    },
    VSa1: function(e, t) {},
    Vaxm: function(e, t) {},
    VkpB: function(e, t) {},
    Vr0l: function(e, t) {},
    VsL1: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("6sO2"),
            r = "control";
        t.a = s, t.b = function(e, t) {
            var n = s();
            n[e] = t, a.l.set(o, n)
        }, t.c = function(e, t) {
            var n = s();
            n.lastUsedFollowerDurations[e] = t, a.l.set(o, n)
        };
        var o = "chatSettings";

        function s() {
            var e = a.l.get(o, {});
            return i.__assign({
                lastUsedFollowerDurations: {},
                showAutoModActions: !0,
                showMessageFlags: !0,
                showModerationActions: !0,
                showModIcons: !1,
                showTimestamps: !1,
                zachModeStatus: r
            }, e)
        }
    },
    "Vvm+": function(e, t) {},
    W266: function(e, t) {},
    WIs4: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("HZww");

        function o(e) {
            return function(t) {
                return function(n) {
                    function o(t) {
                        var i = n.call(this, t) || this;
                        return i.mutator = function(e, t) {
                            return i.options.mutator(e, t)
                        }, i.typesChanged = function(e) {
                            if (e.types && !i.options.types || !e.types && i.options.types) return !0;
                            if (e.types && i.options.types) {
                                if (e.types.length !== i.options.types.length) return !0;
                                var t = new Set(i.options.types);
                                return e.types.some(function(e) {
                                    return !t.has(e)
                                })
                            }
                            return !1
                        }, i.options = e(t), i
                    }
                    return i.__extends(o, n), o.prototype.componentDidMount = function() {
                        this.options.skip || this.subscribe(this.options)
                    }, o.prototype.componentWillReceiveProps = function(t) {
                        var n = e(t);
                        n.skip !== this.options.skip && (n.skip ? this.unsubscribe() : this.subscribe(n)), n.skip || (n.topic !== this.options.topic || n.type !== this.options.type || this.typesChanged(n)) && (this.unsubscribe(), this.subscribe(n)), this.options = n
                    }, o.prototype.componentWillUnmount = function() {
                        this.unsubscribe()
                    }, o.prototype.render = function() {
                        return a.createElement(t, i.__assign({}, this.props))
                    }, o.prototype.subscribe = function(e) {
                        this.unsubscriber = Object(r.r)({
                            query: e.query,
                            variables: e.variables,
                            topic: e.topic,
                            type: e.type,
                            types: e.types,
                            mutator: this.mutator,
                            skipMessage: e.skipMessage
                        })
                    }, o.prototype.unsubscribe = function() {
                        this.unsubscriber && (this.unsubscriber(), this.unsubscriber = null)
                    }, o
                }(a.Component)
            }
        }
        n.d(t, "a", function() {
            return o
        })
    },
    WVx7: function(e, t, n) {
        "use strict";
        var i, a = n("RH2O"),
            r = n("V5M+"),
            o = n("Iw4B"),
            s = n("Aj/L"),
            l = n("TToO"),
            d = n("GiK3"),
            c = n("2KeS"),
            u = n("6sO2"),
            m = n("+8VM"),
            p = n("7vx8"),
            h = n("oIkB");
        ! function(e) {
            e[e.ExitEarly = 0] = "ExitEarly", e[e.Unknown = 1] = "Unknown", e[e.Adblock = 2] = "Adblock", e[e.LimitReached = 3] = "LimitReached"
        }(i || (i = {}));
        var g = n("4JjK"),
            f = n("/LBW"),
            v = n("Odds"),
            b = n("zzpv"),
            k = (n("x583"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.hasAwarded = !1, t.messageHandler = function(e) {
                        return l.__awaiter(t, void 0, void 0, function() {
                            var t, n, a, r, o;
                            return l.__generator(this, function(s) {
                                switch (s.label) {
                                    case 0:
                                        if (e.origin !== window.location.origin) return [2];
                                        if (!(t = e.data) || "trueXAd" !== t.msgSrc) return [2];
                                        switch (t.type) {
                                            case g.a.Ready:
                                                return [3, 1];
                                            case g.a.RequestAd:
                                                return [3, 2];
                                            case g.a.Dimensions:
                                                return [3, 3];
                                            case g.a.OnStart:
                                                return [3, 4];
                                            case g.a.OnCredit:
                                                return [3, 5];
                                            case g.a.OnClose:
                                            case g.a.OnFinish:
                                            case g.a.LimitReached:
                                            case g.a.Adblock:
                                            case g.a.OnError:
                                                return [3, 9]
                                        }
                                        return [3, 10];
                                    case 1:
                                        return n = {
                                            msgSrc: "wateb-ad-modal",
                                            tuid: this.props.tuid
                                        }, e.source.postMessage(n, "*"), [2];
                                    case 2:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(f.g)({
                                                campaignID: a.campaign_id.toString(),
                                                requestID: t.requestID,
                                                requestMethod: this.props.requestRef
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 3:
                                        return t.height && t.width && this.setState({
                                            customDimensions: {
                                                height: t.height,
                                                width: t.width
                                            }
                                        }), [3, 10];
                                    case 4:
                                        try {
                                            if (!(a = JSON.parse(t.activityJSON))) return [2];
                                            Object(f.f)({
                                                requestID: t.requestID,
                                                adblock: !1,
                                                campaignID: a.campaign_id.toString()
                                            })
                                        } catch (e) {}
                                        return [2];
                                    case 5:
                                        return s.trys.push([5, 7, , 8]), [4, this.props.redeemTrueXAd(Object(h.a)({
                                            args: t.engagement.signature_argument_string,
                                            signature: t.engagement.signature,
                                            trueXAd: {
                                                creativeID: t.engagement.ad.creative_id,
                                                campaignID: t.engagement.ad.campaign_id,
                                                name: t.engagement.ad.name,
                                                currencyAmount: t.engagement.ad.currency_amount
                                            },
                                            targetID: this.props.channelID
                                        }))];
                                    case 6:
                                        return r = s.sent(), this.hasAwarded = !0, this.props.onBitsAwarded && this.props.onBitsAwarded(r.data.redeemTrueXAd.grantedBits), [3, 8];
                                    case 7:
                                        return o = s.sent(), u.j.warn("Error while redeeming bits for truex ad", o), this.props.onError && this.props.onError(i.Unknown), [3, 8];
                                    case 8:
                                        return [3, 10];
                                    case 9:
                                        return this.props.onError && (t.type === g.a.LimitReached ? this.props.onError(i.LimitReached) : t.type === g.a.Adblock ? this.props.onError(i.Adblock) : t.type === g.a.OnError ? this.props.onError(i.Unknown) : this.hasAwarded || this.props.onError(i.ExitEarly)), this.props.closeModal(), [3, 10];
                                    case 10:
                                        return [2]
                                }
                            })
                        })
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    window.addEventListener("message", this.messageHandler)
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("message", this.messageHandler)
                }, t.prototype.render = function() {
                    return d.createElement(v._35, {
                        background: v.n.Base
                    }, d.createElement("div", {
                        className: "t-watch-ads-modal",
                        style: this.state.customDimensions
                    }, d.createElement(m.a, null), d.createElement("iframe", {
                        src: "/products/bits/ad"
                    })))
                }, t = l.__decorate([Object(p.a)(b, {
                    name: "redeemTrueXAd"
                })], t)
            }(d.Component));
        var y, _ = Object(a.b)(null, function(e) {
                return Object(c.b)({
                    closeModal: r.c
                }, e)
            })(k),
            C = n("HW6M"),
            S = n("3zLD"),
            E = n("jF7o"),
            N = n("zCIC");

        function T(e) {
            return l.__awaiter(this, void 0, void 0, function() {
                var t, n, i, a, r;
                return l.__generator(this, function(o) {
                    switch (o.label) {
                        case 0:
                            if (t = u.b.get("bits_truex_partner_hash", ""), !(n = u.b.get("bits_truex_api_url", "")) || !t) return u.j.warn("Truex API info missing from dynamic settings"), [2, y.Error];
                            o.label = 1;
                        case 1:
                            return o.trys.push([1, 5, , 6]), [4, fetch(n + "?placement.key=" + t + "&user.uid=" + e + "&max_activities=1")];
                        case 2:
                            return (i = o.sent()).ok ? [4, i.json()] : [3, 4];
                        case 3:
                            if ((a = o.sent()) && Array.isArray(a) && a.length) return [2, y.Available];
                            o.label = 4;
                        case 4:
                            return [2, y.Unavailable];
                        case 5:
                            return r = o.sent(), u.j.warn("Failed checking ad availability from TrueX, probably due to AdBlock", r), [2, y.AdBlocked];
                        case 6:
                            return [2]
                    }
                })
            })
        }! function(e) {
            e[e.Error = 0] = "Error", e[e.AdBlocked = 1] = "AdBlocked", e[e.Unavailable = 2] = "Unavailable", e[e.Available = 3] = "Available"
        }(y || (y = {}));
        var w, D = function(e) {
                var t = null;
                return e.disableWatchAd && (t = Object(u.d)("Try again later", "Bits--WatchAdOffer")), d.createElement(v._35, {
                    className: "bits-buy-card__offer-row",
                    display: v.R.Flex,
                    flexShrink: 0,
                    borderBottom: !0,
                    justifyContent: v._7.Between,
                    flexWrap: v.U.NoWrap,
                    padding: {
                        x: 2,
                        y: 1
                    }
                }, d.createElement(v._8, {
                    padding: {
                        right: 4
                    }
                }, d.createElement("strong", null, Object(u.d)("Get {minBitsCount} or more Bits by watching short ads", {
                    minBitsCount: e.minPayout
                }, "Bits--WatchAdOffer"))), d.createElement(v._8, {
                    flexShrink: 0,
                    display: v.R.Flex,
                    flexDirection: v.T.Column,
                    alignItems: v.c.End
                }, d.createElement(v.v, {
                    type: v.B.Hollow,
                    "data-a-target": "bits-watch-ad",
                    onClick: e.onWatchAdClick,
                    disabled: e.disableWatchAd
                }, Object(u.d)("Watch Ad", "Bits--WatchAdOffer")), t && d.createElement(v._8, {
                    className: "bits-buy-card__sub-text",
                    alignSelf: v.d.Stretch,
                    textAlign: v._45.Center,
                    margin: {
                        top: .5
                    }
                }, t)))
            },
            R = /version\/([\w\.]+).+?(mobile\s?safari|safari)/i,
            O = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        enableWatchAd: !0
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    return l.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return l.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, T(this.props.truexUserID)];
                                case 1:
                                    return e = t.sent(), Object(f.e)({
                                        channel: this.props.channelLogin,
                                        channelID: this.props.channelID,
                                        available: e === y.Available
                                    }), e !== y.Available && e !== y.AdBlocked && this.setState({
                                        enableWatchAd: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return R.test(navigator.userAgent) ? null : d.createElement(D, l.__assign({}, this.props, {
                        disableWatchAd: !this.state.enableWatchAd
                    }))
                }, t
            }(d.Component),
            I = n("jxGs"),
            M = n("3iBR"),
            x = n("iydZ"),
            j = n("ZJYd"),
            L = n("CFVp"),
            A = n("qe65"),
            F = (n("aysN"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleBuyClick = function(e) {
                        var n = t.props.channelID || "",
                            i = Object(j.b)({
                                trackBitsCardInteraction: t.props.trackBitsCardInteraction,
                                channelID: n,
                                purchaseUrl: e.currentTarget.dataset.purchaseUrl,
                                bitsAmount: e.currentTarget.dataset.bitsAmount,
                                closeAllBits: t.props.closeAllBits,
                                location: t.props.location
                            });
                        i && (t.props.onBuyPopupClose(i), t.props.onClose())
                    }, t
                }
                return l.__extends(t, e), t.prototype.render = function() {
                    if (this.props.offer.type === I.a) {
                        if (!this.props.channelLogin) return null;
                        var e = this.props.currentUserSHA || "";
                        return d.createElement(O, {
                            key: "wateb",
                            minPayout: this.props.offer.bits,
                            onWatchAdClick: this.props.handleWatchAdClick,
                            truexUserID: e,
                            channelID: this.props.channelID || "",
                            channelLogin: this.props.channelLogin
                        })
                    }
                    var t = null;
                    Object(j.c)(this.props.offer) ? t = d.createElement(v._8, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                        "data-test-selector": "first-time-promo-form"
                    }, d.createElement(v.Q, {
                        type: v._49.Strong,
                        fontSize: v.V.Size6
                    }, Object(u.d)("Special Offer: 1st Time Buyers", "Bits--BuyCard"))) : Object(j.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === I.c ? t = d.createElement(v._8, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                        "data-test-selector": "black-friday-promo-form"
                    }, d.createElement(v.Q, {
                        type: v._49.Strong,
                        fontSize: v.V.Size6
                    }, Object(u.d)("Flash Sale: Now thru Nov. 27!", "Bits--BuyCard"))) : Object(j.d)(this.props.offer) && null !== this.props.offer.promotion && this.props.offer.promotion.id === I.d && (t = d.createElement(v._8, {
                        className: "bits-buy-card-offer-row__bonus-text bits-buy-card-offer-row__bonus-text-headline",
                        "data-test-selector": "prime-promo-promo-form"
                    }, d.createElement(v.Q, {
                        type: v._49.Strong,
                        fontSize: v.V.Size6
                    }, Object(u.d)("Twitch Prime Bits Discount", "Bits--BuyCard"))));
                    var n = null;
                    this.props.offer.discount && (n = d.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text",
                        "data-test-selector": "discount-subtext-form"
                    }, Object(u.d)("{percentOff,number,percent} discount", {
                        percentOff: this.props.offer.discount
                    }, "Bits--BuyCard")));
                    var i = null;
                    (Object(j.c)(this.props.offer) || Object(j.e)(this.props.offer)) && (i = d.createElement("div", {
                        className: "bits-buy-card-offer-row__sub-text",
                        "data-test-selector": "one-per-account-form"
                    }, Object(u.d)("one per account", "Bits--BuyCard")));
                    var a = this.props.isLastRow ? v._35 : v._8;
                    return d.createElement(a, {
                        className: "bits-buy-card-offer-row",
                        flexShrink: 0,
                        display: v.R.Flex,
                        justifyContent: v._7.Center,
                        borderBottom: this.props.isLastRow,
                        flexDirection: v.T.Column,
                        padding: {
                            x: 2,
                            y: 1
                        }
                    }, t, d.createElement(v._8, {
                        display: v.R.Flex,
                        justifyContent: v._7.Between,
                        alignItems: v.c.Center
                    }, d.createElement(v._8, {
                        flexGrow: 1
                    }, d.createElement(v.Q, {
                        type: v._49.H5,
                        color: v.K.Base,
                        bold: !0
                    }, this.props.offer.bits, " Bits"), this.getAvailableTiers(this.props.offer.bits)), d.createElement(v._8, {
                        flexShrink: 0,
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        alignItems: v.c.End
                    }, d.createElement(v.v, {
                        onClick: this.handleBuyClick,
                        "data-purchase-url": this.props.offer.url,
                        "data-bits-amount": this.props.offer.bits,
                        "data-a-target": "bits-purchase-button-" + this.props.offer.bits
                    }, this.props.offer.price), (n || i) && d.createElement(v._8, {
                        alignSelf: v.d.Stretch,
                        textAlign: v._45.Right,
                        margin: {
                            top: .5
                        }
                    }, n, i))))
                }, t.prototype.getAvailableTiers = function(e) {
                    var t = this.props.bitsConfig && this.props.bitsConfig.indexedActions[M.g];
                    t || (t = Object(L.b)());
                    var n = t.orderedTiers.filter(function(t) {
                        return t.bits <= e
                    }).reverse();
                    return d.createElement(v._8, {
                        padding: {
                            top: .5
                        },
                        className: "bits-buy-card-offer-row__tier-bits-images"
                    }, n.map(function(e) {
                        return d.createElement(A.a, {
                            key: e.bits,
                            sources: Object(x.b)(e, 2, !1)
                        })
                    }))
                }, t
            }(d.Component)),
            U = (n("pzcm"), function(e) {
                var t = [],
                    n = [],
                    i = null;
                return e.offers.forEach(function(a, r) {
                    var o = d.createElement(F, {
                            key: a.id,
                            offer: a,
                            isLastRow: r + 1 < e.offers.length,
                            bitsConfig: e.bitsConfig,
                            channelID: e.channelID,
                            channelLogin: e.channelLogin,
                            currentUserSHA: e.currentUserSHA,
                            location: e.location,
                            onClose: e.onClose,
                            onBuyPopupClose: e.onBuyPopupClose,
                            handleWatchAdClick: e.handleWatchAdClick,
                            closeAllBits: e.closeAllBits,
                            trackBitsCardInteraction: e.trackBitsCardInteraction
                        }),
                        s = Object(j.d)(a),
                        l = Object(j.c)(a),
                        c = a.type === I.a;
                    l && !e.hidePromos ? t.push(o) : s && !l ? t.push(o) : c && !e.hideWateb ? i = o : c || s || n.push(o)
                }), e.fullsize ? d.createElement(v._8, {
                    className: "bits-buy-card-offers__full-size",
                    flexGrow: 1,
                    flexWrap: v.U.NoWrap,
                    display: v.R.Flex,
                    flexDirection: v.T.Column
                }, i, t, n) : d.createElement(N.b, {
                    className: "bits-buy-card-offers__scroll-view"
                }, d.createElement(v._8, {
                    flexGrow: 1,
                    flexWrap: v.U.NoWrap,
                    display: v.R.Flex,
                    flexDirection: v.T.Column
                }, i, t, n))
            }),
            B = function(e) {
                var t = null;
                e.pricesIncludeVAT && (t = d.createElement(v.Q, {
                    "data-test-selector": "prices-include-vat-selector",
                    italic: !0,
                    type: v._49.P,
                    color: v.K.Alt
                }, Object(u.d)("Prices include VAT", "Bits--BuyCard")));
                var n = null;
                e.minBitsToCheer && e.minBitsToCheer > 1 && (n = d.createElement(v.Q, {
                    "data-test-selector": "min-bits-to-cheer-selector",
                    color: v.K.Alt
                }, Object(u.d)("{displayName} requires {minBits} Bits to Cheer in this channel.", {
                    displayName: e.displayName,
                    minBits: e.minBitsToCheer
                }, "Bits--BuyCard")));
                var i = null;
                return void 0 !== e.bitsBalance && null !== e.bitsBalance && (i = d.createElement(v.Q, {
                    "data-test-selector": "bits-balance-header-selector",
                    color: v.K.Alt
                }, Object(u.d)("You have {totalBits} Bits", {
                    totalBits: d.createElement("strong", {
                        "data-a-target": "buy-card-bits-count"
                    }, e.bitsBalance)
                }, "Bits--BuyCard"))), d.createElement(v._35, {
                    className: "bits-buy-card-header",
                    padding: {
                        x: 1,
                        bottom: 1
                    },
                    borderBottom: !0,
                    flexShrink: 0
                }, d.createElement(v._8, {
                    margin: {
                        bottom: 1
                    }
                }, d.createElement(v.Q, {
                    type: v._49.H4,
                    color: v.K.Alt
                }, Object(u.d)("Purchase Bits", "Bits--BuyCard")), t), i, n)
            },
            P = n("nrdj"),
            V = function(e) {
                return d.createElement(v._8, {
                    display: v.R.Flex,
                    flexGrow: 1,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    fullWidth: !0,
                    flexWrap: v.U.NoWrap,
                    padding: {
                        y: 1
                    }
                }, d.createElement(P.a, {
                    prefix: "cheer",
                    amount: e.amount,
                    bitsConfig: e.bitsConfig,
                    showAmount: !0,
                    showImage: !0
                }), d.createElement(v._8, {
                    display: v.R.Flex,
                    padding: {
                        top: 1
                    },
                    flexGrow: 1,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    flexWrap: v.U.NoWrap
                }, d.createElement(v.Q, {
                    type: v._49.H4,
                    bold: !0
                }, Object(u.d)("You got {bitsAmount,number} Bits!", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward")), d.createElement(v._2, {
                    padding: {
                        top: 1
                    }
                }, d.createElement(v.Q, {
                    color: v.K.Alt2
                }, Object(u.d)("{bitsAmount,number} Bits were added to your Bit inventory.", {
                    bitsAmount: e.amount
                }, "Bits--WatchAdAward"), d.createElement("br", null), Object(u.d)("You can use these Bits to Cheer!", "Bits--WatchAdAward")))), d.createElement(v._8, {
                    display: v.R.Flex,
                    padding: {
                        x: 1,
                        top: 3
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._7.Between
                }, d.createElement(v.v, {
                    onClick: e.onStartCheering
                }, Object(u.d)("Start Cheering", "Bits--WatchAdAward")), d.createElement(v.v, {
                    type: v.B.Hollow,
                    onClick: e.onWatchAnother,
                    disabled: !e.hasAdAvailable
                }, Object(u.d)("Watch Another", "Bits--WatchAdAward"))))
            },
            W = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasAdAvailable: !0
                    }, t
                }
                return l.__extends(t, e), t.prototype.componentWillMount = function() {
                    return l.__awaiter(this, void 0, void 0, function() {
                        return l.__generator(this, function(e) {
                            switch (e.label) {
                                case 0:
                                    return [4, T(this.props.truexUserID)];
                                case 1:
                                    return e.sent() !== y.Available && this.setState({
                                        hasAdAvailable: !1
                                    }), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return d.createElement(V, l.__assign({}, this.props, {
                        hasAdAvailable: this.state.hasAdAvailable
                    }))
                }, t
            }(d.Component),
            H = (n("q8Cw"), function(e) {
                var t = Object(u.d)("Something's wrong!", "Bits--WatchAdError"),
                    n = Object(u.d)("Something went wrong. Wait a while and try again.", "Bits--WatchAdError"),
                    a = "adserrorgeneric";
                switch (e.type) {
                    case i.Adblock:
                        a = "adserroradblock", n = Object(u.d)("We can't load this Ad, probably because Ad Blocking software is running. To watch an ad and get Bits, please disable all Ad Blocking software.", "Bits--WatchAdError");
                        break;
                    case i.LimitReached:
                        a = "adserrorlimit", t = Object(u.d)("Ad Limit Reached", "Bits--WatchAdError"), n = Object(u.d)("That's all the Ads we have for now. Try again tomorrow!", "Bits--WatchAdError");
                        break;
                    case i.ExitEarly:
                        n = Object(u.d)("To get Bits, you must view and interact with the Ad for the minimum amount of time.", "Bits--WatchAdError")
                }
                var r = d.createElement(v._8, {
                    className: "watch-ad-error__footer",
                    display: v.R.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._7.Center
                }, d.createElement(v.v, {
                    onClick: e.onTryAgain
                }, Object(u.d)("Try Again", "Bits--WatchAdError")));
                return e.type === i.LimitReached && (r = d.createElement(v._8, {
                    className: "watch-ad-error__footer",
                    display: v.R.Flex,
                    padding: {
                        top: 2
                    },
                    alignSelf: v.d.Stretch,
                    justifyContent: v._7.Between
                }, d.createElement(v.v, {
                    onClick: e.onClose
                }, Object(u.d)("Got It", "Bits--WatchAdError")), d.createElement(v.v, {
                    onClick: e.onTryAgain,
                    type: v.B.Hollow
                }, Object(u.d)("Buy Bits", "Bits--WatchAdError")))), d.createElement(v._8, {
                    padding: {
                        x: 1
                    },
                    display: v.R.Flex,
                    flexGrow: 1,
                    flexDirection: v.T.Column,
                    alignItems: v.c.Center,
                    fullWidth: !0,
                    flexWrap: v.U.NoWrap
                }, d.createElement(v._8, {
                    padding: {
                        y: 2
                    }
                }, d.createElement("img", {
                    className: "watch-ad-error__error-image",
                    src: M.b + "/light/static/1/" + a + ".png"
                })), d.createElement(v._8, {
                    padding: {
                        bottom: 1
                    }
                }, d.createElement(v.Q, {
                    type: v._49.H4,
                    bold: !0
                }, t)), d.createElement(v.Q, {
                    color: v.K.Alt2
                }, n), r)
            }),
            G = n("CSlQ"),
            z = n("aqNN"),
            q = (n("6Rwu"), "storage.wateb.agreedToWatebTerms.v1"),
            Q = "bits-show-wateb-terms",
            K = "bits-agree-wateb-terms";
        ! function(e) {
            e[e.Inactive = 0] = "Inactive", e[e.Error = 1] = "Error", e[e.Awarded = 2] = "Awarded"
        }(w || (w = {}));
        var $ = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        wateb: w.Inactive,
                        watebError: null,
                        bitsAwarded: 0,
                        showWatebTerms: !1,
                        agreedToWatebTerms: u.l.get(q, !1)
                    }, t.onBuyPopupClose = function(e) {
                        Object(E.a)(e, function() {
                            t.props.data && t.props.data.refetch()
                        })
                    }, t.onAdBitsAwarded = function(e) {
                        t.props.data && !t.props.data.loading && t.props.data.refetch(), t.setState({
                            wateb: w.Awarded,
                            bitsAwarded: e
                        })
                    }, t.renderWatebTerms = function(e, n) {
                        return d.createElement(v._35, l.__assign({
                            className: C(e),
                            display: v.R.Flex,
                            flexDirection: v.T.Column,
                            justifyContent: v._7.Center,
                            padding: {
                                bottom: 2,
                                x: 2
                            },
                            textAlign: v._45.Left,
                            "data-a-target": Q
                        }, n), d.createElement(v._35, {
                            margin: {
                                top: 2,
                                bottom: 2,
                                left: 0
                            },
                            alignItems: v.c.Baseline
                        }, d.createElement("div", {
                            key: "Bits--back-edit",
                            style: {
                                cursor: "pointer"
                            },
                            onClick: t.onCloseWatebTerms
                        }, d.createElement(v.Q, {
                            color: v.K.Link,
                            type: v._49.Span
                        }, d.createElement(v._24, {
                            asset: v._25.ChatSettingsBack,
                            height: 10,
                            width: 10
                        }), Object(u.d)("Back", "Bits--Watch-Ad-Terms")))), d.createElement(v._8, {
                            padding: {
                                bottom: 2
                            }
                        }, d.createElement(v.Q, {
                            type: v._49.Span
                        }, Object(u.d)("Before continuing to watch ads to earn Bits, we remind you that the <x:link>Bits Acceptable Use Policy</x:link> applies to your participation with this feature and any Bits you may obtain. As a reminder, you may not:", {
                            "x:link": function(e) {
                                return d.createElement("span", {
                                    key: "helplink"
                                }, d.createElement("a", {
                                    href: "https://www.twitch.tv/p/legal/bits-acceptable-use/",
                                    target: "_blank",
                                    rel: "noopener noreferrer"
                                }, e))
                            }
                        }, "Bits--Watch-Ad-Terms")), d.createElement(v._8, {
                            margin: {
                                y: 1
                            }
                        }, d.createElement("li", null, Object(u.d)("Obtain Bits to Cheer on your own channel via this feature", "Bits--Watch-Ad-Terms")), d.createElement("li", null, Object(u.d)("Collect Bits via this feature through the use of multiple accounts, robots, or other automated means", "Bits--Watch-Ad-Terms")))), d.createElement(v._8, {
                            display: v.R.Flex,
                            justifyContent: v._7.Center
                        }, d.createElement(v.v, {
                            size: v.z.Small,
                            onClick: t.onAgreeToWatebTerms,
                            "data-a-target": K
                        }, Object(u.d)("Continue", "Bits--Watch-Ad-Terms"))))
                    }, t.onAgreeToWatebTerms = function() {
                        u.l.set(q, !0), t.setState({
                            agreedToWatebTerms: !0,
                            showWatebTerms: !1
                        }), t.showWatchAdModal()
                    }, t.onCloseWatebTerms = function() {
                        t.setState({
                            showWatebTerms: !1
                        })
                    }, t.handleWatchAdClick = function() {
                        return l.__awaiter(t, void 0, void 0, function() {
                            return l.__generator(this, function(e) {
                                return this.state.agreedToWatebTerms ? (this.showWatchAdModal(), [2]) : (this.setState({
                                    showWatebTerms: !0
                                }), [2])
                            })
                        })
                    }, t.receiveAdErrorState = function(e) {
                        t.setState({
                            wateb: w.Error,
                            watebError: e
                        })
                    }, t.resetAdErrorState = function() {
                        t.state.wateb === w.Error && (t.setState({
                            wateb: w.Inactive
                        }), t.props.data && t.props.data.refetch())
                    }, t
                }
                return l.__extends(t, e), t.prototype.shouldComponentUpdate = function(e) {
                    return !e.adModalOpen
                }, t.prototype.render = function() {
                    var e = {
                            border: !0,
                            background: v.n.Base,
                            fullWidth: !0,
                            elevation: 3
                        },
                        t = C({
                            "bits-buy-card": !0,
                            "bits-buy-card__chat-tooltip": this.props.location === f.b.ChatTooltip
                        }),
                        n = null;
                    if (this.props.location === f.b.ChatTooltip && (n = d.createElement("button", {
                            className: "bits-buy-card__close",
                            onClick: this.props.onClose,
                            "data-a-target": "bits-buy-card-close-button"
                        }, d.createElement(v._24, {
                            asset: v._25.Close,
                            height: 11,
                            width: 11
                        }))), !this.props.data || this.props.data.loading) return d.createElement(v._35, l.__assign({
                        className: t,
                        "data-a-target": "bits-buy-card-loading",
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._7.Center,
                        textAlign: v._45.Center
                    }, e), d.createElement(v._10, {
                        delay: 0
                    }), d.createElement(v._8, {
                        padding: {
                            top: 2
                        }
                    }, d.createElement(v.Q, {
                        italic: !0
                    }, Object(u.d)("Fetching bits", "Bits--BuyCard"))));
                    if (this.props.data.error) return d.createElement(v._8, l.__assign({
                        className: C(t, "bits-buy-card--shorter"),
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._7.Center,
                        padding: 2,
                        textAlign: v._45.Center,
                        "data-a-target": "bits-buy-card-error"
                    }, e), n, d.createElement(v.Q, {
                        italic: !0
                    }, Object(u.d)("Bits prices are unavailable right now. Check back again later.", "Bits--BuyCard")));
                    if (this.state.showWatebTerms) return this.renderWatebTerms(t, e);
                    var i = this.renderWatebCard();
                    if (i) return d.createElement(v._35, l.__assign({
                        className: C(t, "bits-buy-card--shorter"),
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        alignItems: v.c.Center,
                        justifyContent: v._7.Center,
                        textAlign: v._45.Center,
                        padding: 1
                    }, e), n, i);
                    var a = [];
                    this.props.data.currentUser ? a = this.props.data.currentUser.bitsOffers : this.props.data.bitsOffers && (a = this.props.data.bitsOffers);
                    var r = a.filter(function(e) {
                            return e.type === I.b
                        }).some(function(e) {
                            return e.includesVAT
                        }),
                        o = this.props.data.user ? this.props.data.user.id : "",
                        s = d.createElement(U, {
                            offers: a,
                            fullsize: this.props.fullsize,
                            hidePromos: this.props.hidePromos,
                            hideWateb: this.props.hideWateb,
                            bitsConfig: this.props.bitsConfig,
                            channelID: o,
                            channelLogin: this.props.channelLogin,
                            closeAllBits: this.props.closeAllBits,
                            currentUserSHA: this.props.data && this.props.data.currentUser && this.props.data.currentUser.idSHA1,
                            handleWatchAdClick: this.handleWatchAdClick,
                            location: this.props.location,
                            onBuyPopupClose: this.onBuyPopupClose,
                            onClose: this.props.onClose,
                            trackBitsCardInteraction: this.props.trackBitsCardInteraction
                        }),
                        c = null;
                    return this.props.location === f.b.ChatTooltip && (c = d.createElement(B, {
                        bitsBalance: this.props.data && this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        displayName: this.props.data && this.props.data.user && this.props.data.user.displayName || this.props.channelLogin || "",
                        minBitsToCheer: this.props.data && this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.settings.cheerMinimumBits,
                        pricesIncludeVAT: r
                    })), d.createElement(v._35, l.__assign({
                        className: t,
                        padding: {
                            top: 1
                        },
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        "data-a-target": "bits-buy-card"
                    }, e), n, c, s)
                }, t.prototype.renderWatebCard = function() {
                    if (this.props.data && this.props.data.currentUser) switch (this.state.wateb) {
                        case w.Awarded:
                            return d.createElement(W, {
                                bitsConfig: this.props.bitsConfig,
                                amount: this.state.bitsAwarded,
                                onStartCheering: this.props.onClose,
                                onWatchAnother: this.handleWatchAdClick,
                                truexUserID: this.props.data.currentUser.idSHA1
                            });
                        case w.Error:
                            return d.createElement(H, {
                                type: this.state.watebError || i.Unknown,
                                onClose: this.props.onClose,
                                onTryAgain: this.resetAdErrorState
                            });
                        default:
                            return !1
                    }
                }, t.prototype.showWatchAdModal = function() {
                    this.props.data && this.props.data.currentUser && this.props.data.user && this.props.showWatchAdModal({
                        tuid: this.props.data.currentUser.idSHA1,
                        onBitsAwarded: this.onAdBitsAwarded,
                        onError: this.receiveAdErrorState,
                        requestRef: f.c.ShowAdButton,
                        channelID: this.props.data.user.id
                    })
                }, t = l.__decorate([Object(p.a)(z, {
                    name: "data",
                    options: function(e) {
                        return {
                            variables: {
                                channelLogin: e.channelLogin,
                                withChannel: !!e.channelLogin,
                                isLoggedIn: e.isLoggedIn
                            }
                        }
                    }
                })], t)
            }(d.Component),
            Y = Object(S.compose)(Object(G.d)("BitsBuyCard", {
                autoReportInteractive: !0
            }))($);

        function J(e) {
            return {
                adModalOpen: Object(o.b)(e, _),
                isLoggedIn: Object(s.d)(e)
            }
        }

        function Z(e) {
            return {
                showWatchAdModal: function(t) {
                    return e(Object(r.d)(_, t))
                }
            }
        }
        var X = Object(a.b)(J, Z)(Y);
        n.d(t, !1, function() {
            return J
        }), n.d(t, !1, function() {
            return Z
        }), n.d(t, "a", function() {
            return X
        })
    },
    X7fs: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomMessages"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "first"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "last"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Int"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "before"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "after"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "first"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "last"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "last"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "before"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "before"
                                        }
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "after"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                            kind: "NamedType",
                                                            name: {
                                                                kind: "Name",
                                                                value: "RoomMessage"
                                                            }
                                                        },
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "deletedAt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "sentAt"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "roomMessageContent"
                                                                },
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "sender"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "login"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "chatColor"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayName"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "displayBadges"
                                                                        },
                                                                        arguments: [{
                                                                            kind: "Argument",
                                                                            name: {
                                                                                kind: "Name",
                                                                                value: "channelID"
                                                                            },
                                                                            value: {
                                                                                kind: "Variable",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "channelID"
                                                                                }
                                                                            }
                                                                        }],
                                                                        directives: [],
                                                                        selectionSet: {
                                                                            kind: "SelectionSet",
                                                                            selections: [{
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "setID"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }, {
                                                                                kind: "Field",
                                                                                name: {
                                                                                    kind: "Name",
                                                                                    value: "version"
                                                                                },
                                                                                arguments: [],
                                                                                directives: []
                                                                            }]
                                                                        }
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 466
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/rooms/models/room-message-content-fragment.gql"\nquery RoomMessages($roomID: ID! $channelID: ID! $first: Int! $last: Int! $before: Cursor $after: Cursor) {\nroom(id: $roomID) {\nid\nmessages(first: $first last: $last before: $before after: $after) {\nedges {\ncursor\nnode {\n... on RoomMessage {\nid\ndeletedAt\nsentAt\n...roomMessageContent\nsender {\nid\nlogin\nchatColor\ndisplayName\ndisplayBadges(channelID: $channelID) {\nsetID\nversion\n}\n}\n}\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("2LJg").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    XViT: function(e, t) {},
    XYVN: function(e, t, n) {
        "use strict";
        t.a = function(e, t, n, o) {
            return {
                topic: n ? Object(a.a)(n) : "",
                type: i.PubsubMessageType.BitsLeaderboardEvent,
                mutator: function(e, t) {
                    if (!t || !n) return t;
                    var i = e.top.map(function(e) {
                        return Object(r.b)(e, n.id)
                    });
                    if (t.user) {
                        if (t.user.tournament && t.user.tournament.teamLeaderboard && (t.user.tournament.teamLeaderboard.items.edges = i), t.user.tournament && t.user.tournament.globalLeaderboard && (t.user.tournament.globalLeaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.tournament.self && t.user.tournament.self.globalLeaderboardItem)) {
                            var a = Object(r.b)(e.entry_context.entry, n.id);
                            t.user.tournament.self.globalLeaderboardItem = a.node
                        }
                        if (t.user.cheer && t.user.cheer.leaderboard && (t.user.cheer.leaderboard.items.edges = i, o && e.entry_context && e.entry_context.entry.entry_key === o && t.user.self && t.user.self.bitsLeaderboardItem)) {
                            var s = Object(r.b)(e.entry_context.entry, n.id);
                            t.user.self.bitsLeaderboardItem = s.node
                        }
                    }
                    return t
                },
                skip: !n,
                query: e,
                variables: {
                    channelID: t
                }
            }
        };
        var i = n("aMxy"),
            a = n("HZww"),
            r = n("bkpq")
    },
    XdSf: function(e, t, n) {
        "use strict";
        t.a = function() {
            var e = this;
            return Object(a.a)(r, {
                props: function(t) {
                    return {
                        updateChatColorMutation: function(n) {
                            return i.__awaiter(e, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        color: n
                                                    }
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return [2, e.sent().data];
                                        case 2:
                                            throw new Error("Update chat color mutation is not ready")
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i = n("TToO"),
            a = n("7vx8"),
            r = n("ScRf");
        n.n(r)
    },
    Xo53: function(e, t) {},
    Y5T0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BitsCommandHandler_DismissPinnedCheer"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPinnedCheerInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissPinnedCheer"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "mutation BitsCommandHandler_DismissPinnedCheer($input: DismissPinnedCheerInput!) {\ndismissPinnedCheer(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    YDbY: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var i = n("6sO2"),
            a = function() {
                return i.b.get("dashboard_moderation_settings_enabled", !1)
            }
    },
    "YEG/": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("yDzg"),
            s = n("CSlQ"),
            l = n("CwIZ"),
            d = n("Odds"),
            c = "subscribe-button__subscribe-tier-button",
            u = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasPopupExperiment: !1
                    }, t.handleClick = function() {
                        t.openCheckout(), t.props.reportSubAction({
                            action: l.a.ClickCheckout,
                            checkoutButtonTier: t.props.tierPrice
                        })
                    }, t.setPopupExperiment = function() {
                        var e = r.o.experiments.getAssignment("TWILIGHT_SUB_CHECKOUT_POPUP");
                        t.setState({
                            hasPopupExperiment: "yes" === e
                        })
                    }, t.openCheckout = function() {
                        t.state.hasPopupExperiment && window.open(Object(o.a)(t.props.url, {
                            ref: "subscribe-tier-button"
                        }), "Twitch", "width=1000, height=1100, menubar, toolbar, location, personalbar, scrollbars")
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    !1 !== this.props.targetBlank && this.setPopupExperiment()
                }, t.prototype.render = function() {
                    if (this.props.isSubbedToTier) {
                        var e = Object(r.d)("Subscribed", "SubTierButton");
                        return a.createElement(d.v, {
                            ariaLabel: e,
                            "data-test-selector": c,
                            disabled: !0,
                            icon: d._25.Star
                        }, e)
                    }
                    var t = this.props.isEsportChannel ? Object(r.d)("Get the All-Access Pass", "SubTierButton") : Object(r.d)("Subscribe Now", "SubTierButton");
                    return a.createElement(d.v, i.__assign({
                        ariaLabel: t + " " + this.props.tierPrice,
                        "data-test-selector": c,
                        linkTo: this.state.hasPopupExperiment ? void 0 : this.props.url,
                        onClick: this.handleClick,
                        purchase: this.props.tierPrice
                    }, Object(d._63)(this.props), {
                        targetBlank: void 0 === this.props.targetBlank || this.props.targetBlank
                    }), t)
                }, t = i.__decorate([Object(s.d)("SubTierButton", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component);
        n.d(t, !1, function() {
            return c
        }), n.d(t, "a", function() {
            return u
        })
    },
    YH6m: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("GiK3"),
            o = n("6sO2"),
            s = n("vBst"),
            l = n("Tzcg"),
            d = n("CSlQ"),
            c = n("daN3"),
            u = n("37Pp"),
            m = n("YEG/"),
            p = n("FDYX"),
            h = n("CwIZ"),
            g = n("odx1"),
            f = n("Odds"),
            v = (n("6O9f"), "gift-subscription-button"),
            b = "subscribe-button";

        function k(e) {
            return "subscribe-button-modal-tab-" + e
        }! function(e) {
            e[e.Prime = 0] = "Prime", e[e.Tier1 = 1] = "Tier1", e[e.Tier2 = 2] = "Tier2", e[e.Tier3 = 3] = "Tier3"
        }(i || (i = {}));
        var y = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.toggleActiveTab = function(e) {
                    if (e.currentTarget.parentElement) switch (e.currentTarget.parentElement.getAttribute("data-tier")) {
                        case "subscribe-button-modal-tab-" + i.Prime:
                            n.setState({
                                activeTab: i.Prime,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(i.Prime);
                            break;
                        case "subscribe-button-modal-tab-" + i.Tier1:
                            n.setState({
                                activeTab: i.Tier1,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(i.Tier1);
                            break;
                        case "subscribe-button-modal-tab-" + i.Tier2:
                            n.setState({
                                activeTab: i.Tier2,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[1])
                            }), n.props.onSelectTierTab(i.Tier2);
                            break;
                        case "subscribe-button-modal-tab-" + i.Tier3:
                            n.setState({
                                activeTab: i.Tier3,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[2])
                            }), n.props.onSelectTierTab(i.Tier3);
                            break;
                        default:
                            n.setState({
                                activeTab: i.Prime,
                                currentPurchasePrice: n.getPrice(n.props.subscriptionProducts[0])
                            }), n.props.onSelectTierTab(i.Prime)
                    }
                }, n.getTabTitle = function() {
                    switch (n.state.activeTab) {
                        case i.Prime:
                            return Object(o.d)("Free Channel Sub with Twitch Prime", "SubTierTabs");
                        case i.Tier1:
                            return n.props.subscriptionProducts[0].displayName;
                        case i.Tier2:
                            return n.props.subscriptionProducts[1].displayName;
                        case i.Tier3:
                            return n.props.subscriptionProducts[2].displayName;
                        default:
                            return n.props.subscriptionProducts[0].displayName
                    }
                }, n.getTierSubscribeButton = function() {
                    var e = n.props.subscriptionProducts[n.state.activeTab - 1];
                    if (n.props.isGift) {
                        var t = Object(o.d)("Gift A Subscription", "SubTierTabs");
                        return n.props.giftRecipient ? r.createElement(c.a, {
                            subProductId: e.id,
                            giftRecipient: n.props.giftRecipient,
                            checkoutURL: e.url,
                            buttonMessage: t,
                            purchase: n.state.currentPurchasePrice,
                            onClick: n.reportGiftCheckoutAction
                        }) : r.createElement(f.v, {
                            ariaLabel: t + " " + n.state.currentPurchasePrice,
                            "data-test-selector": v,
                            onClick: n.onGiftSelect,
                            purchase: n.state.currentPurchasePrice
                        }, t)
                    }
                    return n.state.subbedTier === n.state.activeTab && n.state.activeTab === i.Prime ? r.createElement(g.a, {
                        authToken: n.props.authToken,
                        "data-a-target": "subscribe-with-prime-button",
                        isSubscribed: n.props.isSubscribed,
                        isSubscribedWithPrime: n.props.subbedTier === s.a.Prime,
                        onSubscribedWithPrime: n.onSubscribedWithPrime,
                        reportSubMenuAction: n.props.reportSubMenuAction,
                        subLogin: n.props.subLogin,
                        userHasPrime: n.props.userHasPrime,
                        canPrimeSubscribe: n.props.canPrimeSubscribe,
                        channelLogin: n.props.subLogin
                    }) : r.createElement(m.a, {
                        isSubbedToTier: n.state.subbedTier === n.state.activeTab,
                        tierPrice: n.state.currentPurchasePrice,
                        reportSubAction: n.props.reportSubMenuAction,
                        url: e.url,
                        "data-a-target": "subscribe-now-button",
                        "data-test-selector": b
                    })
                }, n.onSubscribedWithPrime = function() {
                    n.props.onSubscribedWithPrime && n.props.onSubscribedWithPrime()
                }, n.reportGiftCheckoutAction = function() {
                    n.props.reportSubMenuAction({
                        action: h.a.BuyGiftSub,
                        checkoutButtonTier: n.state.currentPurchasePrice,
                        giftRecipient: n.props.giftRecipient ? n.props.giftRecipient : null
                    })
                }, n.onGiftSelect = function() {
                    n.props.onGiftSelect && n.props.onGiftSelect()
                }, n.getTierExperimentAssignment = function() {
                    var e = o.o.experiments.getAssignment("TWILIGHT_MOBILE_SUBS_TIER_NAMES");
                    n.setState({
                        tierNameEnabled: "name" === e
                    })
                }, n.mapSubbedTierToTabs = function(e) {
                    e.subbedTier === s.a.Prime ? (n.setState({
                        activeTab: i.Prime,
                        subbedTier: i.Prime
                    }), e.onSelectTierTab(i.Prime)) : e.subbedTier === s.a.Tier1 ? (n.setState({
                        activeTab: i.Tier1,
                        subbedTier: i.Tier1
                    }), e.onSelectTierTab(i.Tier1)) : e.subbedTier === s.a.Tier2 ? (n.setState({
                        activeTab: i.Tier2,
                        subbedTier: i.Tier2
                    }), e.onSelectTierTab(i.Tier2)) : e.subbedTier === s.a.Tier3 ? (n.setState({
                        activeTab: i.Tier3,
                        subbedTier: i.Tier3
                    }), e.onSelectTierTab(i.Tier3)) : e.isGift ? e.onSelectTierTab(n.state.activeTab) : e.onSelectTierTab(i.Prime)
                }, n.getExtraEmotes = function(e) {
                    return (e === i.Tier2 ? Object(l.b)(n.props.subscriptionProducts[1].emotes) : Object(l.b)(n.props.subscriptionProducts[2].emotes.concat(n.props.subscriptionProducts[1].emotes))).map(function(e) {
                        return r.createElement(f._8, {
                            display: f.R.InlineFlex,
                            margin: {
                                right: .5
                            },
                            key: e.id
                        }, r.createElement("img", {
                            srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/" + e.srcSet
                        }))
                    })
                }, n.state = n.getInitialState(), n
            }
            return a.__extends(t, e), t.prototype.componentWillMount = function() {
                this.mapSubbedTierToTabs(this.props), this.getTierExperimentAssignment()
            }, t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                var e = null;
                this.state.subbedTier && (e = r.createElement(f._8, {
                    display: f.R.InlineFlex,
                    margin: {
                        right: .5
                    },
                    className: "subscription-balloon-options__subbed-star"
                }, r.createElement(f._24, {
                    asset: f._25.Star
                })));
                var t = null,
                    n = null,
                    a = null,
                    l = this.state.tierNameEnabled ? Object(o.d)("Tier 3", "SubTierTabs") : this.props.subscriptionProducts[2].price,
                    d = r.createElement(f._8, {
                        display: f.R.InlineFlex
                    }, this.state.subbedTier === i.Tier3 && e, r.createElement(f._36, {
                        active: this.state.activeTab === i.Tier3,
                        "data-tier": k(i.Tier3),
                        "data-a-target": k(i.Tier3),
                        onClick: this.toggleActiveTab
                    }, l));
                if (this.props.subbedTier !== s.a.Prime || this.props.isGift || (t = r.createElement(f._8, {
                        display: f.R.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, r.createElement(f._8, {
                        display: f.R.InlineFlex,
                        margin: {
                            right: 1
                        },
                        className: "subscription-balloon-options__prime-crown"
                    }, r.createElement(f._24, {
                        asset: f._25.Crown
                    })), r.createElement(f._36, {
                        active: this.state.activeTab === i.Prime,
                        "data-tier": k(i.Prime),
                        "data-a-target": k(i.Prime),
                        onClick: this.toggleActiveTab
                    }, Object(o.d)("Prime", "SubTierTabs")))), !this.props.subbedTier || this.props.subbedTier === s.a.Tier1) {
                    var c = this.state.tierNameEnabled ? Object(o.d)("Tier 1", "SubTierTabs") : this.props.subscriptionProducts[0].price;
                    n = r.createElement(f._8, {
                        display: f.R.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === i.Tier1 && e, r.createElement(f._36, {
                        active: this.state.activeTab === i.Tier1,
                        "data-tier": k(i.Tier1),
                        "data-a-target": k(i.Tier1),
                        onClick: this.toggleActiveTab
                    }, c))
                }
                if (!this.props.subbedTier || this.props.subbedTier === s.a.Prime || this.props.subbedTier === s.a.Tier1 || this.props.subbedTier === s.a.Tier2) {
                    var m = this.state.tierNameEnabled ? Object(o.d)("Tier 2", "SubTierTabs") : this.props.subscriptionProducts[1].price;
                    a = r.createElement(f._8, {
                        display: f.R.InlineFlex,
                        margin: {
                            right: 2
                        }
                    }, this.state.subbedTier === i.Tier2 && e, r.createElement(f._36, {
                        active: this.state.activeTab === i.Tier2,
                        "data-tier": k(i.Tier2),
                        "data-a-target": k(i.Tier2),
                        onClick: this.toggleActiveTab
                    }, m))
                }
                var p = this.props.subscriptionProducts[1].emotes.length,
                    h = p + this.props.subscriptionProducts[2].emotes.length,
                    g = null;
                (p > 0 && this.state.activeTab === i.Tier2 || h > 0 && this.state.activeTab === i.Tier3) && (g = r.createElement(f._8, {
                    display: f.R.InlineFlex,
                    alignItems: f.c.Center
                }, this.getExtraEmotes(this.state.activeTab), r.createElement(f.Q, {
                    bold: !0
                }, Object(o.d)("{extraEmoteCount, plural, one {Plus {extraEmoteCount, number} extra channel emote} other {Plus {extraEmoteCount, number} extra channel emotes}}", {
                    extraEmoteCount: this.state.activeTab === i.Tier2 ? p : h
                }, "SubTierTabs"))));
                var v = this.props.subscriptionProducts[this.state.activeTab - 1];
                return r.createElement(f._8, {
                    className: "channel-header__subscription-balloon-options"
                }, r.createElement(f._8, {
                    margin: {
                        bottom: 1
                    }
                }, r.createElement(f._37, null, t, n, a, d)), r.createElement(f._8, null, r.createElement(f._8, {
                    margin: {
                        bottom: 1
                    }
                }, r.createElement(f.Q, {
                    type: f._49.H5,
                    bold: !0
                }, this.getTabTitle())), r.createElement(f._8, {
                    margin: {
                        bottom: 1
                    }
                }, r.createElement(f.Q, null, Object(o.d)("{availableEmoteCount, plural, one {Includes {availableEmoteCount, number} emoticon, subscriber badge, and customizable messages upon subscribing} other {Includes {availableEmoteCount, number} emoticons, subscriber badge, and customizable messages upon subscribing}}", {
                    availableEmoteCount: this.props.subscriptionProducts[0].emotes.length
                }, "SubTierTabs"))), g, r.createElement(u.a, {
                    subscriptionProduct: v,
                    isGift: this.props.isGift
                }), r.createElement(f._8, {
                    margin: {
                        top: 1,
                        right: 1
                    }
                }, this.getTierSubscribeButton())))
            }, t.prototype.getInitialState = function() {
                var e = this.props.subscriptionProducts[0].price;
                return (Object(p.d)(this.props.subscriptionProducts) || Object(p.c)(this.props.subscriptionProducts)) && (e = Object(p.a)(this.props.subscriptionProducts[0], this.props.isGift)), {
                    activeTab: i.Tier1,
                    currentPurchasePrice: e,
                    subbedTier: null,
                    tierNameEnabled: !1
                }
            }, t.prototype.getPrice = function(e) {
                return Object(p.d)(this.props.subscriptionProducts) || Object(p.c)(this.props.subscriptionProducts) ? Object(p.a)(e, this.props.isGift) : e.price
            }, t = a.__decorate([Object(d.d)("SubTierTabs")], t)
        }(r.Component);
        n.d(t, !1, function() {
            return v
        }), n.d(t, !1, function() {
            return b
        }), n.d(t, "b", function() {
            return i
        }), n.d(t, !1, function() {
            return k
        }), n.d(t, "a", function() {
            return y
        })
    },
    YhVV: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = [];
            if (!e || !t) return n;
            var a = /[^\s\.,\!]+/g,
                r = a.exec(e);
            for (; r;) {
                var o = r[0],
                    s = t[o];
                if (s && "function" != typeof s) {
                    var l = Object(i.d)(e.slice(0, r.index)),
                        d = l ? l.length : r.index;
                    n[d] = {
                        startIndex: d,
                        endIndex: d + o.length,
                        data: {
                            alt: o,
                            images: {
                                themed: !1,
                                sources: {
                                    "1x": Object(i.f)(s.id, 1),
                                    "2x": Object(i.f)(s.id, 2),
                                    "4x": Object(i.f)(s.id, 4)
                                }
                            }
                        }
                    }
                }
                r = a.exec(e)
            }
            return n
        }, t.a = function(e) {
            for (var t = {}, n = 0, i = e; n < i.length; n++)
                for (var o = i[n], s = 0, l = o.emotes; s < l.length; s++)
                    for (var d = l[s], c = a[d.token] || [d.token], u = 0, m = c; u < m.length; u++) {
                        var p = m[u];
                        t[p] && o.id === r || (t[p] = {
                            id: d.id,
                            token: p
                        })
                    }
            return t
        };
        var i = n("l21v");
        var a = {
                "\\:\\&gt\\;": [":>"],
                "\\&gt\\;\\(": [">("],
                "\\&lt\\;\\]": ["<]"],
                "\\&lt\\;3": ["<3"],
                ":-?(?:7|L)": [":-7", ":-L", ":7", ":L"],
                "[oO](_|\\.)[oO]": ["o_o", "O_O", "o_O", "O_o", "o.o", "O.O", "o.O", "O.o"],
                "\\;-?(p|P)": [";-p", ";-P", ";p", ";P"],
                "\\;-?\\)": [";-)", ";)"],
                "\\:-?(o|O)": [":-o", ":-O", ":o", ":O"],
                "\\:-?(p|P)": [":-p", ":-P", ":p", ":P"],
                "\\:-?(S|s)": [":-S", ":-s", ":s", ":S"],
                "\\:-?[\\\\/]": [":-/", ":-\\", ":/", ":\\"],
                "\\:-?[z|Z|\\|]": [":-|", ":-Z", ":-z", ":|", ":Z", ":z"],
                "\\:-?\\(": [":-(", ":("],
                "\\:-?\\)": [":-)", ":)"],
                "\\:-?D": [":-D", ":D"],
                "#-?[\\\\/]": ["#-/", "#-\\", "#/", "#\\"],
                "B-?\\)": ["B-)", "B)"],
                "R-?\\)": ["R-)", "R)"]
            },
            r = "0"
    },
    "Z+EN": function(e, t) {},
    Z1Q9: function(e, t) {},
    Z3Cb: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("CIox"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("7vx8"),
            d = n("WIs4"),
            c = n("aMxy"),
            u = n("NXs7"),
            m = n("HZww"),
            p = n("vH/s"),
            h = n("9u8h"),
            g = function() {
                function e() {}
                return e.fetchChannelsList = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e, t;
                        return i.__generator(this, function(n) {
                            switch (n.label) {
                                case 0:
                                    return n.trys.push([0, 2, , 3]), [4, h.a.get("/kraken/autohost/list")];
                                case 1:
                                    return e = n.sent(), [2, this.deserialize(e)];
                                case 2:
                                    return t = n.sent(), s.j.error(t, "Couldn't fetch autohost list"), [2, []];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.setChannelsList = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return i.trys.push([0, 2, , 3]), [4, h.a.put("/kraken/autohost/list", {
                                        body: {
                                            targets: e.join(",")
                                        }
                                    })];
                                case 1:
                                    return t = i.sent(), [2, this.deserialize(t)];
                                case 2:
                                    return n = i.sent(), s.j.error(n, "Couldn't update autohost list"), [2, e];
                                case 3:
                                    return [2]
                            }
                        })
                    })
                }, e.deserialize = function(e) {
                    return e.body ? e.body.targets.map(function(e) {
                        return e._id.toString()
                    }) : []
                }, e
            }();
        var f, v, b = n("Odds"),
            k = (n("7X7f"), n("QMHY")),
            y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isDismissed: !1
                    }, t.dismiss = function() {
                        t.setState({
                            isDismissed: !0
                        }), t.track(p.SpadeEventType.AutohostChatDismiss);
                        var e = t.getAutohostNotificationsDismissed();
                        e[t.props.data.user.id] = {
                            dismissedDate: (new Date).getTime()
                        }, t.setAutohostNotificationsDismissed(e)
                    }, t.addChannelToAutohost = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, g.fetchChannelsList()];
                                    case 1:
                                        return e = t.sent().concat([this.props.data.user.id]), this.setState({
                                            autohostChannels: e
                                        }), g.setChannelsList(e), this.track(p.SpadeEventType.AutohostChatYes), [2]
                                }
                            })
                        })
                    }, t.trackSettingsClick = function() {
                        t.track(p.SpadeEventType.AutohostChatSettings)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var e;
                        return i.__generator(this, function(t) {
                            switch (t.label) {
                                case 0:
                                    return [4, g.fetchChannelsList()];
                                case 1:
                                    return e = t.sent(), this.setState({
                                        autohostChannels: e
                                    }), this.isShowing && this.track(p.SpadeEventType.AutohostChatImpression), [2]
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    if (!this.isShowing) return null;
                    var e = Object(s.d)("You are now hosting {channel}", {
                            channel: this.props.data.user.displayName
                        }, "AutohostPrompt"),
                        t = Object(s.d)("Auto host this channel whenever you're offline?", "AutohostPrompt"),
                        n = Object(s.d)("Yes", "AutohostPrompt"),
                        i = Object(s.d)("Settings", "AutohostPrompt");
                    return a.createElement(b._35, {
                        "data-target": "autohost-container",
                        "data-test-selector": "autohost_prompt",
                        background: b.n.Base,
                        className: "autohost-prompt",
                        margin: {
                            x: 2
                        },
                        position: b._15.Relative
                    }, a.createElement(b.q, {
                        size: b.s.Medium,
                        direction: b.r.TopLeft,
                        show: !0
                    }, a.createElement(b._35, {
                        alignItems: b.c.Center,
                        borderBottom: !0,
                        display: b.R.Flex,
                        flexDirection: b.T.Column,
                        justifyContent: b._7.Around,
                        padding: 1
                    }, a.createElement(b._8, {
                        position: b._15.Absolute,
                        attachTop: !0,
                        attachRight: !0
                    }, a.createElement(b.w, {
                        ariaLabel: Object(s.d)("Close", "AutohostPrompt"),
                        size: b.x.Small,
                        type: b.y.Secondary,
                        "data-test-selector": "autohost-dismiss-button",
                        icon: b._25.Close,
                        onClick: this.dismiss
                    })), a.createElement(b.m, {
                        alt: this.props.data.user.displayName,
                        src: this.props.data.user.profileImageURL,
                        size: 30
                    }), a.createElement(b._8, {
                        className: "autohost-prompt__hosting-message",
                        display: b.R.Flex,
                        padding: {
                            top: .5
                        }
                    }, a.createElement(b._24, {
                        asset: b._25.Check
                    }), a.createElement(b._2, {
                        margin: {
                            left: .5
                        }
                    }, a.createElement(b.Q, null, e)))), a.createElement(b._8, {
                        className: "autohost-prompt__prompt",
                        justifyContent: b._7.Center,
                        display: b.R.Flex,
                        flexWrap: b.U.Wrap,
                        padding: 1
                    }, a.createElement(b.Q, null, t), a.createElement(b._55, {
                        gutterSize: b._57.ExtraSmall,
                        childWidth: b._56.Large
                    }, a.createElement("div", null, a.createElement(b.v, {
                        "data-test-selector": "autohost-yes-button",
                        fullWidth: !0,
                        onClick: this.addChannelToAutohost
                    }, n)), a.createElement("div", null, a.createElement(b.v, {
                        "data-test-selector": "autohost-settings-button",
                        fullWidth: !0,
                        onClick: this.trackSettingsClick,
                        type: b.B.Hollow,
                        linkTo: "https://twitch.tv/settings/profile"
                    }, i))))))
                }, Object.defineProperty(t.prototype, "isShowing", {
                    get: function() {
                        return !this.state.isDismissed && !!this.props.hostedChannelLogin && !this.props.data.loading && !this.props.data.error && this.props.data.user && !!this.state.autohostChannels && !this.state.autohostChannels.includes(this.props.data.user.id) && !this.getAutohostNotificationsDismissed()[this.props.data.user.id]
                    },
                    enumerable: !0,
                    configurable: !0
                }), t.prototype.track = function(e) {
                    ! function(e, t) {
                        s.n.track(e, i.__assign({
                            time: Date.now()
                        }, t))
                    }(e, {
                        user_id: this.props.data.currentUser.id,
                        hosting_channel_id: this.props.data.currentUser.id,
                        hosted_channel_id: this.props.data.user.id
                    })
                }, t.prototype.getAutohostNotificationsDismissed = function() {
                    return s.l.get("autohost-notifications-dismissed", {})
                }, t.prototype.setAutohostNotificationsDismissed = function(e) {
                    return s.l.set("autohost-notifications-dismissed", e)
                }, t = i.__decorate([Object(l.a)(k, {
                    skip: function(e) {
                        return !e.hostedChannelLogin
                    },
                    options: function(e) {
                        return {
                            variables: {
                                login: e.hostedChannelLogin
                            }
                        }
                    }
                })], t)
            }(a.Component),
            _ = n("3T7g"),
            C = n("J4ib"),
            S = n("QsiC"),
            E = n("HW6M"),
            N = n("zCIC");
        n("bL99");
        ! function(e) {
            e[e.Gold = 0] = "Gold", e[e.Silver = 1] = "Silver", e[e.Bronze = 2] = "Bronze", e[e.Default = 3] = "Default"
        }(f || (f = {})),
        function(e) {
            e[e.Big = 0] = "Big", e[e.Small = 1] = "Small"
        }(v || (v = {}));
        var T, w = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.renderMedalSVG(this.props.medal, this.props.size),
                        t = E("bits-leaderboard-medal__profile-image", {
                            "bits-leaderboard-medal__profile-image--big": this.props.size === v.Big
                        }, {
                            "bits-leaderboard-medal__profile-image--small": this.props.size === v.Small
                        }),
                        n = null;
                    return this.props.profileImageUrl && (n = a.createElement(b._2, {
                        position: b._15.Absolute
                    }, a.createElement("img", {
                        className: t,
                        src: this.props.profileImageUrl
                    }))), a.createElement(b._8, {
                        className: "bits-leaderboard-medal",
                        display: b.R.Flex,
                        position: b._15.Relative
                    }, e, n)
                }, t.prototype.renderMedalSVG = function(e, t) {
                    var n = t === v.Big ? "bits-leaderboard-medal__big" : "bits-leaderboard-medal__small",
                        i = null;
                    switch (e) {
                        case f.Gold:
                            i = a.createElement(O, null);
                            break;
                        case f.Silver:
                            i = a.createElement(I, null);
                            break;
                        case f.Bronze:
                            i = a.createElement(D, null);
                            break;
                        default:
                            i = a.createElement(R, null)
                    }
                    return a.createElement(b._2, {
                        className: n
                    }, i)
                }, t
            }(a.Component),
            D = function(e) {
                return a.createElement("svg", {
                    className: e.className,
                    viewBox: "0 0 32 32",
                    xmlns: "http://www.w3.org/2000/svg",
                    xmlnsXlink: "http://www.w3.org/1999/xlink"
                }, a.createElement("defs", null, a.createElement("linearGradient", {
                    x1: "14.834%",
                    y1: "10.25%",
                    x2: "82.068%",
                    y2: "89.469%",
                    id: "bits-leaderboard-bronze-linearGradient-1"
                }, a.createElement("stop", {
                    stopColor: "#DF904C",
                    offset: "0%"
                }), a.createElement("stop", {
                    stopColor: "#A65611",
                    offset: "100%"
                })), a.createElement("path", {
                    id: "bits-leaderboard-bronze-path-2",
                    d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                }), a.createElement("linearGradient", {
                    x1: "19.142%",
                    y1: "10.021%",
                    x2: "79.509%",
                    y2: "86.458%",
                    id: "bits-leaderboard-bronze-linearGradient-3"
                }, a.createElement("stop", {
                    offset: "0%"
                }), a.createElement("stop", {
                    stopColor: "#494949",
                    offset: "9.355%"
                }), a.createElement("stop", {
                    stopColor: "#BCBCBC",
                    offset: "13.369%"
                }), a.createElement("stop", {
                    stopColor: "#FFF",
                    offset: "20.419%"
                }), a.createElement("stop", {
                    stopColor: "#818181",
                    offset: "25.723%"
                }), a.createElement("stop", {
                    stopColor: "#5D5D5D",
                    offset: "39.965%"
                }), a.createElement("stop", {
                    stopColor: "#EFEFEF",
                    offset: "45.279%"
                }), a.createElement("stop", {
                    stopColor: "#7A7A7A",
                    offset: "50.012%"
                }), a.createElement("stop", {
                    stopColor: "#717171",
                    offset: "57.677%"
                }), a.createElement("stop", {
                    stopColor: "#B5B5B5",
                    offset: "63.526%"
                }), a.createElement("stop", {
                    stopColor: "#888",
                    offset: "69.88%"
                }), a.createElement("stop", {
                    stopColor: "#F1F1F1",
                    offset: "75.215%"
                }), a.createElement("stop", {
                    stopColor: "#B9B9B9",
                    offset: "79.325%"
                }), a.createElement("stop", {
                    stopColor: "#545454",
                    offset: "92.875%"
                }), a.createElement("stop", {
                    offset: "100%"
                })), a.createElement("linearGradient", {
                    x1: "19.604%",
                    y1: "10.043%",
                    x2: "84.81%",
                    y2: "89.074%",
                    id: "bits-leaderboard-bronze-linearGradient-4"
                }, a.createElement("stop", {
                    stopColor: "#F2C6A5",
                    offset: "0%"
                }), a.createElement("stop", {
                    stopColor: "#864223",
                    offset: "100%"
                })), a.createElement("circle", {
                    id: "bits-leaderboard-bronze-path-5",
                    cx: "16",
                    cy: "16",
                    r: "11"
                })), a.createElement("g", {
                    id: "bits-leaderboard-bronze-Symbols",
                    fill: "none",
                    fillRule: "evenodd"
                }, a.createElement("g", {
                    id: "bits-leaderboard-bronze-Medal-3-bronze-lg"
                }, a.createElement("g", {
                    id: "bits-leaderboard-bronze-Star-Copy-2B"
                }, a.createElement("use", {
                    fill: "#DE9572",
                    xlinkHref: "#bits-leaderboard-bronze-path-2"
                }), a.createElement("path", {
                    stroke: "url(#bits-leaderboard-bronze-linearGradient-1)",
                    d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                })), a.createElement("path", {
                    id: "bits-leaderboard-bronze-Star-Copy-3B",
                    fill: "url(#bits-leaderboard-bronze-linearGradient-3)",
                    opacity: ".4",
                    d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                }), a.createElement("g", {
                    id: "bits-leaderboard-bronze-Oval-Copy-B"
                }, a.createElement("use", {
                    fill: "#A96643",
                    xlinkHref: "#bits-leaderboard-bronze-path-5"
                }), a.createElement("circle", {
                    stroke: "url(#bits-leaderboard-bronze-linearGradient-4)",
                    cx: "16",
                    cy: "16",
                    r: "11.5"
                })))))
            },
            R = function(e) {
                return a.createElement("svg", {
                    className: e.className,
                    viewBox: "0 0 20 20",
                    xmlns: "http://www.w3.org/2000/svg",
                    xmlnsXlink: "http://www.w3.org/1999/xlink"
                }, a.createElement("defs", null, a.createElement("path", {
                    id: "bits-leaderboard-default-path-1",
                    d: "M10 16.88l-1.31676 1.01089-.91717-1.38367-1.57365.52857-.4182-1.6065-1.66001-.01104.12608-1.65525-1.56648-.54944.65672-1.52462-1.3032-1.0283L3.1435 9.43184l-.8987-1.39573 1.45468-.79978-.39681-1.61193 1.63555-.2841.14808-1.65343 1.63918.26234.67692-1.51576 1.46519.78037L10 2l1.13241 1.21383 1.46519-.78037.67692 1.51576 1.63918-.26234.14808 1.65342 1.63555.28411-.3968 1.61193 1.45467.79978-.8987 1.39573 1.11618 1.22878-1.3032 1.02831.6567 1.52462-1.56647.54944.12608 1.65525-1.66.01104-.41821 1.6065-1.57365-.52857-.91717 1.38367z"
                })), a.createElement("g", {
                    id: "bits-leaderboard-default-Symbols",
                    fill: "none",
                    fillRule: "evenodd"
                }, a.createElement("g", {
                    id: "bits-leaderboard-default-bitbadge/blank"
                }, a.createElement("g", {
                    id: "bits-leaderboard-default-Star"
                }, a.createElement("use", {
                    fill: "#D7CCEB",
                    xlinkHref: "#bits-leaderboard-default-path-1"
                }), a.createElement("path", {
                    stroke: "#D7CCEB",
                    d: "M10 17.51035l-1.4374 1.10351-1.0012-1.51044-1.71783.577-.45652-1.7537-1.8121-.01204.13763-1.8069-1.71-.59979.71688-1.6643-1.4226-1.12253L2.5153 9.3798l-.98104-1.52362 1.58796-.87305-.43317-1.75961 1.7854-.31014.16165-1.80492 1.78937.28638.73894-1.65463 1.59943.85187L10 1.26703l1.23616 1.32505 1.59943-.85187.73894 1.65463 1.78937-.28638.16165 1.80492 1.7854.31014-.43317 1.7596 1.58796.87306-.98104 1.52362 1.21844 1.34136-1.4226 1.12252.71688 1.66431-1.71.59978.13763 1.8069-1.8121.01205-.45652 1.7537-1.71782-.577-1.00121 1.51044L10 17.51036z"
                })), a.createElement("circle", {
                    id: "bits-leaderboard-default-Oval-2",
                    fill: "#EEE9F6",
                    cx: "10",
                    cy: "10",
                    r: "6"
                }))))
            },
            O = function(e) {
                return a.createElement("svg", {
                    className: e.className,
                    viewBox: "0 0 32 32",
                    xmlns: "http://www.w3.org/2000/svg",
                    xmlnsXlink: "http://www.w3.org/1999/xlink"
                }, a.createElement("defs", null, a.createElement("linearGradient", {
                    x1: "15.783%",
                    y1: "9.653%",
                    x2: "82.407%",
                    y2: "91.627%",
                    id: "bits-leaderboard-gold-linearGradient-1"
                }, a.createElement("stop", {
                    stopColor: "#D8B258",
                    offset: "0%"
                }), a.createElement("stop", {
                    stopColor: "#A4770E",
                    offset: "100%"
                })), a.createElement("path", {
                    id: "bits-leaderboard-gold-path-2",
                    d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                }), a.createElement("linearGradient", {
                    x1: "17.025%",
                    y1: "7.356%",
                    x2: "84.092%",
                    y2: "91.769%",
                    id: "bits-leaderboard-gold-linearGradient-3"
                }, a.createElement("stop", {
                    stopColor: "#E5B561",
                    offset: "0%"
                }), a.createElement("stop", {
                    stopColor: "#EEC05F",
                    offset: "12.638%"
                }), a.createElement("stop", {
                    stopColor: "#FFECB9",
                    offset: "20.419%"
                }), a.createElement("stop", {
                    stopColor: "#DCB35E",
                    offset: "30.58%"
                }), a.createElement("stop", {
                    stopColor: "#E0B55B",
                    offset: "45.279%"
                }), a.createElement("stop", {
                    stopColor: "#CDA148",
                    offset: "62.771%"
                }), a.createElement("stop", {
                    stopColor: "#E9CC8F",
                    offset: "76.584%"
                }), a.createElement("stop", {
                    stopColor: "#ECBE5D",
                    offset: "83.038%"
                }), a.createElement("stop", {
                    stopColor: "#C09A4C",
                    offset: "100%"
                })), a.createElement("linearGradient", {
                    x1: "83.2%",
                    y1: "89.733%",
                    x2: "12.813%",
                    y2: "3.179%",
                    id: "bits-leaderboard-gold-linearGradient-4"
                }, a.createElement("stop", {
                    stopColor: "#9A790A",
                    offset: "0%"
                }), a.createElement("stop", {
                    stopColor: "#FFEFB9",
                    offset: "87.642%"
                }), a.createElement("stop", {
                    stopColor: "#FFF",
                    offset: "100%"
                })), a.createElement("circle", {
                    id: "bits-leaderboard-gold-path-5",
                    cx: "16",
                    cy: "16",
                    r: "11"
                })), a.createElement("g", {
                    id: "bits-leaderboard-gold-Symbols",
                    fill: "none",
                    fillRule: "evenodd"
                }, a.createElement("g", {
                    id: "bits-leaderboard-gold-Medal-1-gold-lg"
                }, a.createElement("g", {
                    id: "bits-leaderboard-gold-Star"
                }, a.createElement("use", {
                    fill: "#D6A94C",
                    xlinkHref: "#bits-leaderboard-gold-path-2"
                }), a.createElement("path", {
                    stroke: "url(#bits-leaderboard-gold-linearGradient-1)",
                    d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                })), a.createElement("path", {
                    id: "bits-leaderboard-gold-Star",
                    fill: "url(#bits-leaderboard-gold-linearGradient-3)",
                    d: "M16 28.58l-2.469 2.215-1.615-2.897-3.055 1.294-.587-3.265-3.31.232.505-3.279-3.206-.855 1.543-2.937-2.755-1.85 2.413-2.277-2.005-2.643 3.021-1.371-1.037-3.151 3.302-.316.042-3.317 3.226.774 1.117-3.124 2.8 1.78L16 1l2.07 2.592 2.8-1.78 1.117 3.125 3.226-.774.042 3.317 3.302.316-1.037 3.151 3.021 1.37-2.005 2.644 2.413 2.278-2.755 1.849 1.543 2.937-3.206.855.505 3.28-3.31-.233-.587 3.265-3.055-1.294-1.615 2.897z"
                }), a.createElement("g", {
                    id: "bits-leaderboard-gold-Oval"
                }, a.createElement("use", {
                    fill: "#BE912A",
                    xlinkHref: "#bits-leaderboard-gold-path-5"
                }), a.createElement("circle", {
                    stroke: "url(#bits-leaderboard-gold-linearGradient-4)",
                    cx: "16",
                    cy: "16",
                    r: "11.5"
                })))))
            },
            I = function(e) {
                return a.createElement("svg", {
                    className: e.className,
                    viewBox: "0 0 32 32",
                    xmlns: "http://www.w3.org/2000/svg",
                    xmlnsXlink: "http://www.w3.org/1999/xlink"
                }, a.createElement("defs", null, a.createElement("linearGradient", {
                    x1: "18.738%",
                    y1: "20.297%",
                    x2: "79.716%",
                    y2: "88.714%",
                    id: "bits-leaderboard-silver-linearGradient-1"
                }, a.createElement("stop", {
                    stopColor: "#D0D8DB",
                    offset: "0%"
                }), a.createElement("stop", {
                    stopColor: "#7E848A",
                    offset: "100%"
                })), a.createElement("path", {
                    id: "bits-leaderboard-silver-path-2",
                    d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                }), a.createElement("linearGradient", {
                    x1: "19.638%",
                    y1: "10.855%",
                    x2: "81.99%",
                    y2: "89.124%",
                    id: "bits-leaderboard-silver-linearGradient-3"
                }, a.createElement("stop", {
                    stopColor: "#202020",
                    offset: "0%"
                }), a.createElement("stop", {
                    stopColor: "#BCBCBC",
                    offset: "13.369%"
                }), a.createElement("stop", {
                    stopColor: "#FFF",
                    offset: "20.779%"
                }), a.createElement("stop", {
                    stopColor: "#313131",
                    offset: "30.58%"
                }), a.createElement("stop", {
                    stopColor: "#EFEFEF",
                    offset: "45.279%"
                }), a.createElement("stop", {
                    stopColor: "#B5B5B5",
                    offset: "61.521%"
                }), a.createElement("stop", {
                    stopColor: "#FFF",
                    offset: "74.572%"
                }), a.createElement("stop", {
                    stopColor: "#656565",
                    offset: "87.343%"
                }), a.createElement("stop", {
                    stopColor: "#C4C4C4",
                    offset: "100%"
                })), a.createElement("linearGradient", {
                    x1: "0%",
                    y1: "0%",
                    x2: "99.438%",
                    y2: "96.312%",
                    id: "bits-leaderboard-silver-linearGradient-4"
                }, a.createElement("stop", {
                    stopColor: "#FFF",
                    offset: "3.677%"
                }), a.createElement("stop", {
                    offset: "100%"
                })), a.createElement("linearGradient", {
                    x1: "8.437%",
                    y1: "13.448%",
                    x2: "86.525%",
                    y2: "83.33%",
                    id: "bits-leaderboard-silver-linearGradient-5"
                }, a.createElement("stop", {
                    stopColor: "#FFF",
                    offset: "0%"
                }), a.createElement("stop", {
                    stopColor: "#EAEEF2",
                    offset: "9.632%"
                }), a.createElement("stop", {
                    stopColor: "#686C71",
                    offset: "100%"
                })), a.createElement("circle", {
                    id: "bits-leaderboard-silver-path-6",
                    cx: "16",
                    cy: "16",
                    r: "11"
                })), a.createElement("g", {
                    id: "bits-leaderboard-silver-Symbols",
                    fill: "none",
                    fillRule: "evenodd"
                }, a.createElement("g", {
                    id: "bits-leaderboard-silver-Medal-2-silver-lg"
                }, a.createElement("g", {
                    id: "bits-leaderboard-silver-Star-Copy-2"
                }, a.createElement("use", {
                    fill: "#CBC8D0",
                    xlinkHref: "#bits-leaderboard-silver-path-2"
                }), a.createElement("path", {
                    stroke: "url(#bits-leaderboard-silver-linearGradient-1)",
                    d: "M16 29.53l-2.59 1.988-1.803-2.72-3.095 1.039-.823-3.16-3.264-.021.248-3.256-3.08-1.08 1.29-2.998-2.562-2.023 2.195-2.416-1.768-2.745 2.861-1.573-.78-3.17 3.216-.559.292-3.252L9.56 4.1l1.332-2.98 2.881 1.534L16 .267l2.227 2.387 2.881-1.535L22.44 4.1l3.223-.516.292 3.252 3.216.559-.78 3.17 2.86 1.573-1.767 2.745 2.195 2.416-2.563 2.023 1.292 2.998-3.08 1.08.247 3.256-3.264.021-.823 3.16-3.095-1.04-1.803 2.721L16 29.53z"
                })), a.createElement("path", {
                    id: "bits-leaderboard-silver-Star-Copy-3",
                    fill: "url(#bits-leaderboard-silver-linearGradient-3)",
                    opacity: ".6",
                    d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                }), a.createElement("path", {
                    id: "bits-leaderboard-silver-Star-Copy-4-grad",
                    fill: "url(#bits-leaderboard-silver-linearGradient-4)",
                    opacity: ".6",
                    d: "M16 28.9l-2.469 1.895-1.72-2.594-2.95.991-.784-3.012-3.113-.02.237-3.104-2.938-1.03 1.232-2.86L1.05 17.24l2.093-2.304-1.685-2.617 2.728-1.5-.744-3.022 3.066-.533.278-3.1 3.073.492 1.27-2.842 2.747 1.463L16 1l2.123 2.276 2.747-1.463 1.27 2.842 3.073-.492.278 3.1 3.066.533-.744 3.022 2.728 1.5-1.685 2.617 2.093 2.304-2.444 1.928 1.232 2.858-2.938 1.03.237 3.104-3.113.02-.784 3.013-2.95-.991-1.72 2.594z"
                }), a.createElement("g", {
                    id: "bits-leaderboard-silver-Oval-Copy"
                }, a.createElement("use", {
                    fill: "#A3A7AA",
                    xlinkHref: "#bits-leaderboard-silver-path-6"
                }), a.createElement("circle", {
                    stroke: "url(#bits-leaderboard-silver-linearGradient-5)",
                    cx: "16",
                    cy: "16",
                    r: "11.5"
                })))))
            },
            M = n("nrdj"),
            x = n("5Dex"),
            j = n("CFVp"),
            L = (n("mmly"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return a.createElement(b._8, {
                        display: b.R.InlineFlex,
                        alignItems: b.c.Center,
                        flexGrow: 1
                    });
                    var e = this.props.bitsConfig ? this.props.bitsConfig : Object(j.a)(),
                        t = null,
                        n = "";
                    if (this.props.data && this.props.data.user) {
                        n = this.props.data.user.displayName || this.props.data.user.login;
                        var i = a.createElement(b.Q, {
                            ellipsis: !0
                        }, n);
                        this.props.selfId && this.props.selfId === this.props.id && (i = a.createElement(b.Q, {
                            ellipsis: !0,
                            color: b.K.Link,
                            bold: !0
                        }, n)), t = a.createElement(b._8, {
                            ellipsis: !0,
                            className: "bits-leaderboard-expanded-leaderboard-entry__username",
                            margin: {
                                x: 1
                            },
                            display: b.R.InlineBlock
                        }, i)
                    }
                    var r, o = null;
                    o = this.props.selfId && this.props.selfId === this.props.value ? a.createElement(b._12, {
                        label: this.props.rank.toString(),
                        type: b._13.Brand
                    }) : a.createElement(b.Q, {
                        color: b.K.Link,
                        bold: !0
                    }, this.props.rank);
                    var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || s.a.defaultAvatarURL;
                    return r = a.createElement(b._8, {
                        overflow: b._11.Hidden,
                        display: b.R.InlineFlex,
                        flexGrow: 1,
                        fullWidth: !0,
                        alignItems: b.c.Center
                    }, a.createElement(b._8, {
                        className: "bits-leaderboard-expanded-leaderboard-entry__rank",
                        padding: {
                            right: .5
                        }
                    }, o), a.createElement("img", {
                        src: l,
                        className: "bits-leaderboard-expanded-leaderboard-entry__avatar"
                    }), t, a.createElement(b._8, {
                        flexShrink: 0,
                        className: "bits-leaderboard-expanded-leaderboard-entry__score",
                        margin: {
                            left: "auto"
                        },
                        display: b.R.InlineBlock
                    }, a.createElement(M.a, {
                        animated: !1,
                        showImage: !0,
                        showAmount: !0,
                        prefix: "Cheer",
                        bitsConfig: e,
                        size: M.b.ExtremelySmall,
                        display: b.R.InlineFlex,
                        amount: this.props.score,
                        formattedNumber: !0,
                        alignItems: b.c.Center
                    }))), a.createElement(b._8, {
                        className: "bits-leaderboard-expanded-leaderboard-entry",
                        display: b.R.Block,
                        alignItems: b.c.Center
                    }, r)
                }, t
            }(a.Component)),
            A = Object(o.d)(Object(l.a)(x, {
                name: "data",
                skip: function(e) {
                    return !e.id
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.value,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(L),
            F = (n("2ZhA"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return a.createElement(b._8, {
                        display: b.R.InlineFlex,
                        alignItems: b.c.Center,
                        flexGrow: 1
                    });
                    var e = this.props.bitsConfig ? this.props.bitsConfig : Object(j.a)(),
                        t = null,
                        n = "";
                    if (this.props.data && this.props.data.user) {
                        n = this.props.data.user.displayName || this.props.data.user.login;
                        var i = a.createElement(b.Q, {
                            ellipsis: !0,
                            bold: !0
                        }, n);
                        this.props.selfId && this.props.selfId === this.props.value && (i = a.createElement(b.Q, {
                            ellipsis: !0,
                            color: b.K.Link,
                            bold: !0
                        }, n)), t = a.createElement(b._8, {
                            ellipsis: !0,
                            className: "bits-leaderboard-expanded-top-three-entry__username",
                            margin: {
                                x: .5
                            },
                            display: b.R.InlineBlock
                        }, i)
                    }
                    var r, o = null;
                    o = this.props.selfId && this.props.selfId === this.props.value ? a.createElement(b._12, {
                        label: this.props.rank.toString(),
                        type: b._13.Brand
                    }) : a.createElement(b.Q, {
                        color: b.K.Link,
                        bold: !0
                    }, this.props.rank);
                    var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || s.a.defaultAvatarURL;
                    return r = a.createElement(b._8, {
                        overflow: b._11.Hidden,
                        display: b.R.InlineFlex,
                        flexGrow: 1,
                        fullWidth: !0,
                        alignItems: b.c.Center
                    }, a.createElement(b._8, {
                        className: "bits-leaderboard-expanded-top-three-entry__rank"
                    }, o), a.createElement(w, {
                        size: v.Big,
                        medal: this.props.medal,
                        profileImageUrl: l
                    }), t, a.createElement(b._8, {
                        flexShrink: 0,
                        className: "bits-leaderboard-expanded-top-three-entry__score",
                        margin: {
                            left: "auto"
                        },
                        display: b.R.InlineBlock
                    }, a.createElement(M.a, {
                        animated: !1,
                        showImage: !0,
                        showAmount: !0,
                        prefix: "Cheer",
                        bitsConfig: e,
                        size: M.b.ExtremelySmall,
                        display: b.R.InlineFlex,
                        amount: this.props.score,
                        formattedNumber: !0,
                        alignItems: b.c.Center
                    }))), a.createElement(b._8, {
                        className: "bits-leaderboard-expanded-top-three-entry",
                        display: b.R.Block
                    }, r)
                }, t
            }(a.Component)),
            U = Object(o.d)(Object(l.a)(x, {
                name: "data",
                skip: function(e) {
                    return !e.id
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.value,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(F);
        ! function(e) {
            e.Weekly = "WEEK", e.AllTime = "ALLTIME", e.Monthly = "MONTH"
        }(T || (T = {}));
        n("GuSj");
        var B = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.renderExpandArrow = function() {
                    return a.createElement(b._8, {
                        position: b._15.Absolute,
                        attachRight: !0,
                        attachTop: !0,
                        className: "bits-leaderboard-expanded__arrow",
                        display: b.R.Flex,
                        alignItems: b.c.Stretch
                    }, a.createElement(b.v, {
                        size: b.z.Small,
                        fullWidth: !0,
                        type: b.B.Text,
                        onClick: t.props.toggleExpand
                    }, a.createElement(b._24, {
                        asset: b._25.AngleUp,
                        height: 12,
                        width: 12
                    })))
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this.shouldRenderBottomContent(),
                    t = this.renderTopThreeEntries(),
                    n = this.renderTopTenEntries(),
                    i = this.renderExpandArrow(),
                    r = this.renderTopSection(),
                    o = null,
                    s = null;
                e && ((o = this.renderUserPlaceEntry()) || (s = this.renderBottomSection()));
                var l = {
                        "bits-leaderboard-expanded__top-three-break": !!this.props.topEdges && this.props.topEdges.length > 3
                    },
                    d = {
                        "bits-leaderboard-expanded__top-ten-break": !!this.props.topEdges && this.props.topEdges.length > 0
                    };
                return a.createElement(b._35, {
                    background: b.n.Base,
                    padding: {
                        top: 1
                    },
                    position: b._15.Relative
                }, r, a.createElement(N.b, {
                    className: "bits-leaderboard-expanded__scrollable",
                    suppressScrollX: !0
                }, a.createElement(b._8, null, a.createElement("ul", null, t, a.createElement(b._8, {
                    className: E(l)
                }), n, a.createElement(b._8, {
                    className: E(d)
                }), o), s)), i)
            }, t.prototype.renderTopThreeEntries = function() {
                if (!this.props.topEdges) return null;
                var e = [];
                return this.props.topEdges[0] && e.push(this.renderTopThreeEntry(this.props.topEdges[0], f.Gold)), this.props.topEdges[1] && e.push(this.renderTopThreeEntry(this.props.topEdges[1], f.Silver)), this.props.topEdges[2] && e.push(this.renderTopThreeEntry(this.props.topEdges[2], f.Bronze)), e
            }, t.prototype.renderTopSection = function() {
                var e = Object(s.d)("Weekly Top Cheerers", "Bits--PinnedCheerV2"),
                    t = this.props.secondsRemaining ? this.props.secondsRemaining : 0,
                    n = Math.floor(t / 86400),
                    i = a.createElement(b.Q, {
                        type: b._49.Span
                    }, Object(s.d)("Resets in {time} days", {
                        time: n
                    }, "Bits--PinnedCheerV2"));
                return n < 1 && (i = a.createElement(b.Q, {
                    type: b._49.Span
                }, Object(s.d)("Resets in less than a day", "Bits--PinnedCheerV2"))), this.props.leaderboardMode === T.AllTime ? (e = Object(s.d)("All-time Top Cheerers", "Bits--PinnedCheerV2"), i = null) : this.props.leaderboardMode === T.Monthly && (e = Object(s.d)("Monthly Top Cheerers", "Bits--PinnedCheerV2")), a.createElement(b._8, {
                    display: b.R.Flex,
                    alignItems: b.c.Center,
                    flexDirection: b.T.Column
                }, a.createElement(b.Q, {
                    type: b._49.H5,
                    bold: !0
                }, e), i, a.createElement(b._8, {
                    className: "bits-leaderboard-expanded__section-break",
                    margin: {
                        y: 1
                    }
                }))
            }, t.prototype.renderBottomSection = function() {
                var e = !!this.props.topEdges && this.props.topEdges.length > 0;
                return a.createElement(b._8, {
                    padding: {
                        bottom: 1
                    }
                }, a.createElement(b._35, {
                    borderTop: e
                }, a.createElement(b._8, {
                    display: b.R.Flex,
                    flexDirection: b.T.Column,
                    alignItems: b.c.Center,
                    margin: {
                        top: 1
                    }
                }, a.createElement(b._24, {
                    asset: b._25.Bits,
                    type: b._26.Brand
                }), a.createElement(b.Q, {
                    type: b._49.Span,
                    bold: !0
                }, Object(s.d)("Cheer your way to the top!", "Bits--PinnedCheersV2")), a.createElement(b.O, {
                    to: "https://blog.twitch.tv/earn-new-rewards-for-supporting-your-favorite-creators-da6b34a98827",
                    targetBlank: !0,
                    hoverUnderlineNone: !1
                }, a.createElement(b.Q, {
                    bold: !0
                }, Object(s.d)("Learn More", "Bits--PinnedCheersV2"))))))
            }, t.prototype.renderTopThreeEntry = function(e, t) {
                return a.createElement(b._8, {
                    key: e.node.id,
                    padding: {
                        x: 1,
                        top: .5
                    }
                }, a.createElement(U, {
                    id: e.node.id,
                    value: e.node.entryKey,
                    score: e.node.score,
                    bitsConfig: this.props.bitsConfig,
                    medal: t,
                    selfId: this.props.selfId,
                    rank: e.node.rank
                }))
            }, t.prototype.renderTopTenEntries = function() {
                var e = this;
                return this.props.topEdges ? this.props.topEdges.slice(3, 10).map(function(t) {
                    return e.renderTopTenEntry(t.node)
                }) : null
            }, t.prototype.renderTopTenEntry = function(e) {
                return a.createElement(b._8, {
                    key: e.id,
                    padding: {
                        x: 1,
                        top: .5
                    }
                }, a.createElement(A, {
                    id: e.id,
                    value: e.entryKey,
                    score: e.score,
                    bitsConfig: this.props.bitsConfig,
                    selfId: this.props.selfId,
                    rank: e.rank
                }))
            }, t.prototype.shouldRenderBottomContent = function() {
                var e = this;
                if (!this.props.topEdges) return !1;
                var t = !0;
                return this.props.topEdges.forEach(function(n) {
                    n.node.entryKey === e.props.selfId && (t = !1)
                }), t
            }, t.prototype.renderUserPlaceEntry = function() {
                if (!this.props.userPlaceEdge) return null;
                var e = this.renderTopTenEntry(this.props.userPlaceEdge);
                return a.createElement(b._8, {
                    padding: {
                        top: .5
                    }
                }, a.createElement(b._35, {
                    borderTop: !0
                }, a.createElement(b._8, {
                    padding: {
                        y: .5
                    }
                }, e)))
            }, t
        }(a.Component);

        function P(e) {
            switch (e) {
                case 1:
                    return Object(s.d)("Cheer now to be #1!", "Bits--PinnedCheerV2");
                case 2:
                    return Object(s.d)("Cheer to take #2!", "Bits--PinnedCheerV2");
                case 3:
                    return Object(s.d)("Cheer to take #3!", "Bits--PinnedCheerV2");
                default:
                    return Object(s.d)("...", "Bits--PinnedCheerV2")
            }
        }
        n("iqz2");
        var V = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return a.createElement(b._8, {
                        display: b.R.InlineBlock,
                        alignItems: b.c.Center,
                        flexGrow: 1
                    });
                    var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(j.a)(),
                        n = null,
                        i = "";
                    if (this.props.data && this.props.data.user) {
                        i = this.props.data.user.displayName || this.props.data.user.login;
                        var r = a.createElement(b.Q, {
                            ellipsis: !0,
                            bold: !0
                        }, i);
                        this.props.selfId && this.props.selfId === this.props.entryKey && (r = a.createElement(b._12, {
                            label: i,
                            type: b._13.Brand
                        })), n = a.createElement(b._8, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-first-entry__username"
                        }, r)
                    }
                    if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                        var o = P(1);
                        e = a.createElement(b._8, {
                            className: "bits-leaderboard-header-first-entry__container",
                            overflow: b._11.Hidden,
                            display: b.R.InlineFlex,
                            alignItems: b.c.Center,
                            flexGrow: 1
                        }, a.createElement(b._8, {
                            flexShrink: 0
                        }, a.createElement(w, {
                            size: v.Big,
                            medal: f.Default
                        })), a.createElement(b._8, {
                            className: "bits-leaderboard-header-first-entry__text",
                            margin: {
                                left: .5
                            }
                        }, a.createElement(b.Q, {
                            color: b.K.Link,
                            bold: !0
                        }, o)))
                    } else {
                        var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || s.a.defaultAvatarURL;
                        e = a.createElement(b._8, {
                            className: "bits-leaderboard-header-first-entry__container",
                            overflow: b._11.Hidden,
                            display: b.R.InlineFlex,
                            alignItems: b.c.Center,
                            flexGrow: 1
                        }, a.createElement(b._8, {
                            flexShrink: 0
                        }, a.createElement(w, {
                            size: v.Big,
                            medal: f.Gold,
                            profileImageUrl: l
                        })), a.createElement(b._8, {
                            className: "bits-leaderboard-header-first-entry__text",
                            margin: {
                                left: .5
                            }
                        }, n, a.createElement(b._8, {
                            className: "bits-leaderboard-header-first-entry__score"
                        }, a.createElement(M.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: t,
                            size: M.b.ExtremelySmall,
                            display: b.R.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: b.c.Center
                        }))))
                    }
                    this.props.isEmpty || (e = a.createElement(b._52, {
                        label: i,
                        direction: b._54.Bottom
                    }, e));
                    var d = {
                        "bits-leaderboard-header-first-entry": !0,
                        "bits-leaderboard-header-first-entry__empty": this.props.isEmpty
                    };
                    return a.createElement(b._8, {
                        className: E(d),
                        flexShrink: 0
                    }, e)
                }, t
            }(a.Component),
            W = Object(o.d)(Object(l.a)(x, {
                name: "data",
                skip: function(e) {
                    return !e.id || !e.entryKey
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.entryKey,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(V),
            H = (n("x8iQ"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.data && (this.props.data.loading || this.props.data.error)) return a.createElement(b._8, {
                        display: b.R.InlineFlex,
                        alignItems: b.c.Center,
                        flexGrow: 1
                    });
                    var e, t = this.props.bitsConfig ? this.props.bitsConfig : Object(j.a)(),
                        n = null,
                        i = "";
                    if (this.props.data && this.props.data.user) {
                        i = this.props.data.user.displayName || this.props.data.user.login;
                        var r = a.createElement(b.Q, {
                            ellipsis: !0,
                            bold: !0
                        }, i);
                        this.props.selfId && this.props.selfId === this.props.entryKey && (r = a.createElement(b._12, {
                            label: i,
                            type: b._13.Brand
                        })), n = a.createElement(b._8, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-runner-up-entry__username",
                            flexShrink: 1,
                            margin: {
                                x: .5
                            }
                        }, r)
                    }
                    if (this.props.isEmpty || this.props.data && !this.props.data.user) {
                        var o = P(this.props.rank ? this.props.rank : 0);
                        e = a.createElement(b._8, {
                            overflow: b._11.Hidden,
                            display: b.R.Flex,
                            alignItems: b.c.Center,
                            flexGrow: 0,
                            fullWidth: !0
                        }, a.createElement(b._8, {
                            flexShrink: 0
                        }, a.createElement(w, {
                            size: v.Small,
                            medal: f.Default
                        })), a.createElement(b._8, {
                            ellipsis: !0,
                            className: "bits-leaderboard-header-runner-up-entry__username",
                            flexShrink: 1,
                            margin: {
                                x: .5
                            }
                        }, a.createElement(b.Q, {
                            color: b.K.Link,
                            bold: !0
                        }, o)))
                    } else {
                        var l = this.props.data && this.props.data.user && this.props.data.user.profileImageURL || s.a.defaultAvatarURL;
                        e = a.createElement(b._8, {
                            overflow: b._11.Hidden,
                            display: b.R.Flex,
                            alignItems: b.c.Center,
                            flexGrow: 0,
                            fullWidth: !0
                        }, a.createElement(b._8, {
                            flexShrink: 0
                        }, a.createElement(w, {
                            size: v.Small,
                            medal: this.props.medal,
                            profileImageUrl: l
                        })), n, a.createElement(b._8, {
                            flexShrink: 0,
                            className: "bits-leaderboard-header-runner-up-entry__score",
                            margin: {
                                left: "auto"
                            }
                        }, a.createElement(M.a, {
                            animated: !1,
                            showImage: !0,
                            showAmount: !0,
                            prefix: "Cheer",
                            bitsConfig: t,
                            size: M.b.ExtremelySmall,
                            display: b.R.InlineFlex,
                            amount: this.props.score,
                            formattedNumber: !0,
                            alignItems: b.c.Center
                        })))
                    }
                    return this.props.isEmpty || (e = a.createElement(b._52, {
                        label: i,
                        direction: b._54.Bottom
                    }, e)), a.createElement(b._8, {
                        className: "bits-leaderboard-header-runner-up-entry",
                        display: b.R.Flex,
                        alignItems: b.c.Center
                    }, e)
                }, t
            }(a.Component)),
            G = Object(o.d)(Object(l.a)(x, {
                name: "data",
                skip: function(e) {
                    return !e.id || !e.entryKey
                },
                options: function(e) {
                    return {
                        variables: {
                            userID: e.entryKey,
                            profileImageWidth: 50
                        }
                    }
                }
            }))(H),
            z = (n("LM6T"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.renderFirstPlaceEntry = function() {
                        var e, n = null;
                        return t.props.topEdges && t.props.topEdges[0] && (n = t.props.topEdges[0]), e = n ? a.createElement(W, {
                            selfId: t.props.selfId,
                            id: n.node.id,
                            entryKey: n.node.entryKey,
                            score: n.node.score,
                            bitsConfig: t.props.bitsConfig
                        }) : a.createElement(W, {
                            isEmpty: !0
                        }), a.createElement(b._2, {
                            key: 1
                        }, e)
                    }, t.renderExpandArrow = function() {
                        return a.createElement(b._8, {
                            className: "pinned-cheer-v2-header--arrow",
                            alignItems: b.c.Stretch,
                            fullHeight: !0,
                            display: b.R.InlineFlex,
                            attachTop: !0,
                            position: b._15.Absolute
                        }, a.createElement(b.v, {
                            size: b.z.Small,
                            fullWidth: !0,
                            type: b.B.Text,
                            onClick: t.props.toggleExpand
                        }, a.createElement(b._24, {
                            asset: b._25.AngleDown,
                            height: 12,
                            width: 12
                        })))
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.renderFirstPlaceEntry(),
                        t = null,
                        n = null,
                        i = this.renderExpandArrow();
                    if (this.props.topEdges && this.props.topEdges[0]) {
                        t = this.renderRunnerUpEntry(2, f.Silver);
                        var r = this.props.topEdges[1] ? 3 : 0;
                        n = this.renderRunnerUpEntry(r, f.Bronze)
                    }
                    return a.createElement(b._35, {
                        className: "pinned-cheer-v2-header",
                        background: b.n.Base,
                        position: b._15.Relative
                    }, a.createElement(b._8, {
                        className: "pinned-cheer-v2-header__users",
                        display: b.R.InlineFlex,
                        flexWrap: b.U.NoWrap,
                        justifyContent: b._7.Between,
                        fullHeight: !0
                    }, e, a.createElement(b._8, {
                        className: "pinned-cheer-v2-header__runner-up-entries",
                        display: b.R.Flex,
                        flexShrink: 1,
                        flexWrap: b.U.NoWrap,
                        justifyContent: b._7.Between,
                        flexDirection: b.T.Column
                    }, t, n)), i)
                }, t.prototype.renderRunnerUpEntry = function(e, t) {
                    var n, i = null;
                    return e > 0 && this.props.topEdges && this.props.topEdges[e - 1] && (i = this.props.topEdges[e - 1]), n = i ? a.createElement(G, {
                        selfId: this.props.selfId,
                        id: i.node.id,
                        entryKey: i.node.entryKey,
                        score: i.node.score,
                        medal: t,
                        bitsConfig: this.props.bitsConfig
                    }) : a.createElement(G, {
                        isEmpty: !0,
                        medal: f.Default,
                        rank: e
                    }), a.createElement(b._2, {
                        key: e
                    }, n)
                }, t
            }(a.Component)),
            q = n("4Q5V"),
            Q = n("mwvJ"),
            K = (n("1vwK"), "pinned-cheer--collapse"),
            $ = /(\d+)$/,
            Y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1
                    }, t.collapseCheer = !0, t.root = null, t.renderedMessage = null, t.saveRenderedMessageRef = function(e) {
                        t.renderedMessage = e
                    }, t.saveRootRef = function(e) {
                        t.root = e
                    }, t.handleHeadlineClick = function() {
                        t.collapseCheer = !t.collapseCheer, t.root && t.root.classList.toggle(K, t.collapseCheer)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidUpdate = function() {
                    if (this.renderedMessage) {
                        var e = this.renderedMessage.getElementsByClassName("pinned-cheer__rendered-message-inner");
                        if (e.length) {
                            var t = e[0].getBoundingClientRect().height > 42;
                            this.state.cheerIsTall !== t && this.setState({
                                cheerIsTall: t
                            })
                        }
                    }
                }, t.prototype.render = function() {
                    if (!this.props.recentCheer) return null;
                    for (var e = "", t = 0, n = this.props.recentCheer.messageParts; t < n.length; t++) {
                        var i = n[t];
                        if (i.type === Q.a.Emote && i.content.cheerAmount && i.content.alt) {
                            var r = i.content.alt.replace($, "").toLowerCase();
                            e ? e !== r && (e = "cheer") : e = r
                        }
                    }
                    var o, l, d = this.state.cheerIsTall,
                        c = a.createElement("div", {
                            ref: this.saveRenderedMessageRef,
                            className: E({
                                "pinned-cheer__rendered-message": !0,
                                "pinned-cheer__rendered-message--recent": !0
                            })
                        }, a.createElement(b._35, {
                            margin: {
                                x: 2
                            },
                            borderTop: !0
                        }), a.createElement(b._8, {
                            padding: {
                                y: .5
                            },
                            className: "pinned-cheer__rendered-message-inner"
                        }, a.createElement(q.a, {
                            channelID: this.props.channelID,
                            badgeSets: this.props.badgeData,
                            showAutoModActions: !1,
                            showModerationActions: !1,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            isCurrentUserModerator: !1,
                            isCurrentUserStaff: !1,
                            message: this.props.recentCheer,
                            showModerationIcons: !1,
                            showTimestamps: !1
                        }))),
                        u = a.createElement(b.Q, {
                            type: b._49.Strong
                        }, Object(s.d)("Recent Cheer", "Bits--PinnedCheers")),
                        m = ((l = {
                            "pinned-cheer__bounding-box": !0
                        })[K] = this.collapseCheer, l),
                        p = {
                            "pinned-cheer__headline": !0,
                            "pinned-cheer__headline--clickable": d
                        },
                        h = this.props.recentCheerMsRemaining ? this.props.recentCheerMsRemaining : 0;
                    return o = a.createElement(b._8, {
                        className: "pinned-cheer__progress-bar-placeholder"
                    }, a.createElement(b._8, {
                        className: "pinned-cheer__progress-bar",
                        display: b.R.Flex,
                        flexDirection: b.T.Column,
                        justifyContent: b._7.End
                    }, a.createElement(b._18, {
                        key: this.props.recentCheer.id,
                        animationDirection: b._19.Down,
                        animationDuration: h / 1e3,
                        size: b._20.ExtraSmall
                    }))), a.createElement(b._8, {
                        className: "pinned-cheer",
                        flexGrow: 0,
                        flexShrink: 0,
                        zIndex: b._62.Default
                    }, a.createElement("div", {
                        className: E(m),
                        ref: this.saveRootRef
                    }, a.createElement(b._2, {
                        padding: {
                            x: 2,
                            y: 1
                        },
                        display: b.R.Flex,
                        flexDirection: b.T.Row,
                        flexWrap: b.U.NoWrap
                    }, a.createElement("div", {
                        className: E(p),
                        onClick: d ? this.handleHeadlineClick : void 0
                    }, a.createElement(b._8, {
                        flexGrow: 1,
                        flexShrink: 1,
                        display: b.R.Flex,
                        alignItems: b.c.Center,
                        flexWrap: b.U.Wrap
                    }, a.createElement(b._24, {
                        asset: b._25.HourGlass,
                        height: 18,
                        width: 18
                    }), a.createElement(b._8, {
                        margin: {
                            left: .5
                        },
                        display: b.R.Inline
                    }, u), null), a.createElement(b._8, {
                        className: "pinned-cheer__expand-caret",
                        flexShrink: 0,
                        flexGrow: 0,
                        display: b.R.Flex,
                        justifyContent: b._7.Between,
                        alignItems: b.c.Center
                    }, d ? a.createElement(b._24, {
                        asset: b._25.AngleLeft
                    }) : null))), c, o))
                }, t
            }(a.Component),
            J = n("XYVN"),
            Z = n("/LBW"),
            X = n("dQj3"),
            ee = n("eMi+"),
            te = (n("zbFZ"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isExpanded: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null
                    }, t.recentCheerTimeout = 0, t.toggleIsExpanded = function() {
                        t.setState(function(e) {
                            return {
                                isExpanded: !e.isExpanded
                            }
                        }, function() {
                            t.state.isExpanded && t.onExpandClick()
                        })
                    }, t.onExpandClick = function() {
                        var e = t.props,
                            n = e.channelID,
                            i = e.userID,
                            a = e.data.user;
                        if (a && a.cheer && a.cheer.leaderboard && a.cheer.settings && a.cheer.settings.leaderboard && a.cheer.settings.leaderboard.isEnabled) {
                            var r = a.cheer.settings.leaderboard.timePeriodType,
                                o = a.cheer.leaderboard.items.edges.slice(0, 10),
                                s = !1;
                            i && (s = o.findIndex(function(e) {
                                return e.node.entryKey === i
                            }) >= 0), Object(Z.i)({
                                leaderboardSize: o.length,
                                leaderboardMode: r || T.AllTime,
                                userPresentInLeaderboard: s,
                                userID: i,
                                channelID: n
                            })
                        }
                    }, t.handleProgressExpired = function() {
                        C.k.debug("setTimeout expired, forcing re-render"), t.forceUpdate()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillMount = function() {
                    this.calcRecentCheerExpiry(this.props)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.calcRecentCheerExpiry(e)
                }, t.prototype.componentWillUnmount = function() {
                    clearTimeout(this.recentCheerTimeout)
                }, t.prototype.shouldComponentUpdate = function(e, t) {
                    var n = this.getRecentCheerInfo(this.props, this.state),
                        i = this.getRecentCheerInfo(e, t);
                    if (!n.shouldRender && !n.recentCheer) return !0;
                    var a = n.recentCheer ? n.recentCheer.id : 0,
                        r = i.recentCheer ? i.recentCheer.id : 0;
                    return n.shouldRender !== i.shouldRender || n.recentCheer !== i.recentCheer || a !== r
                }, t.prototype.componentDidUpdate = function() {
                    var e = this.getRecentCheerInfo(this.props, this.state),
                        t = 0;
                    this.state.recentCheerExpireTime && (t = Math.max(0, this.state.recentCheerExpireTime - Date.now())), e.shouldRender && (clearTimeout(this.recentCheerTimeout), this.recentCheerTimeout = setTimeout(this.handleProgressExpired, t + 100))
                }, t.prototype.render = function() {
                    var e = null,
                        t = this.renderRecentCheer();
                    return null === t && (e = this.renderLeaderboard()), a.createElement(b._8, {
                        zIndex: b._62.Default
                    }, e, t)
                }, t.prototype.renderLeaderboard = function() {
                    if (this.props.data.error || !(this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.leaderboard)) return null;
                    if (!this.props.data.user.cheer.settings || !this.props.data.user.cheer.settings.leaderboard || !this.props.data.user.cheer.settings.leaderboard.isEnabled) return null;
                    var e = this.props.data.user.cheer.leaderboard.items.edges.slice(0, 10),
                        t = null,
                        n = this.props.data.user.cheer.settings.leaderboard.timePeriodType || T.AllTime;
                    this.props.data.user.self && this.props.data.user.self.bitsLeaderboardItem && (t = this.props.data.user.self.bitsLeaderboardItem);
                    var i = null;
                    this.state.isExpanded && (i = a.createElement(B, {
                        topEdges: e,
                        userPlaceEdge: t,
                        toggleExpand: this.toggleIsExpanded,
                        selfId: this.props.userID,
                        bitsConfig: this.props.bitsConfig,
                        leaderboardMode: n,
                        secondsRemaining: this.props.data.user.cheer.leaderboard.secondsRemaining
                    }));
                    var r = null;
                    return this.state.isExpanded || (r = a.createElement(z, {
                        topEdges: e,
                        toggleExpand: this.toggleIsExpanded,
                        selfId: this.props.userID,
                        bitsConfig: this.props.bitsConfig
                    })), a.createElement(b._8, {
                        className: "pinned-cheer-v2",
                        zIndex: b._62.Default
                    }, a.createElement(b._35, {
                        borderBottom: !0
                    }, r, i))
                }, t.prototype.getRecentCheerInfo = function(e, t) {
                    var n = !1,
                        i = void 0;
                    this.state.isExpanded || !e.data.error && e.data.user && e.data.user.cheer && e.data.user.cheer.recent && e.data.user.cheer.settings.isRecentEnabled && t.recentCheerExpireTime && 0 !== Math.max(0, t.recentCheerExpireTime - Date.now()) && (n = !0, i = Object(X.a)(e.data.user.cheer.recent, this.props.bitsConfig, this.props.blockLinks) || void 0);
                    return {
                        shouldRender: n,
                        recentCheer: i
                    }
                }, t.prototype.renderRecentCheer = function() {
                    if (this.props.data.error || !(this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.recent)) return null;
                    var e = this.getRecentCheerInfo(this.props, this.state);
                    return e.shouldRender ? a.createElement(Y, {
                        badgeData: this.props.badgeData,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        channelID: this.props.channelID,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        recentCheer: e.recentCheer,
                        recentCheerMsRemaining: this.props.data.user.cheer.settings.recentTimeoutMs
                    }) : null
                }, t.prototype.calcRecentCheerExpiry = function(e) {
                    if (e.data.user && e.data.user.cheer && e.data.user.cheer.recentTimeoutMs && e.data.user.cheer.recent) {
                        var t = Object(X.a)(e.data.user.cheer.recent, this.props.bitsConfig, this.props.blockLinks),
                            n = t ? t.id : null;
                        this.state.recentCheerID !== n && this.setState({
                            recentCheerID: n,
                            recentCheerExpireTime: n ? Date.now() + e.data.user.cheer.recentTimeoutMs : null
                        })
                    }
                }, t
            }(a.Component)),
            ne = Object(o.d)(Object(l.a)(ee, {
                name: "data",
                options: function(e) {
                    return {
                        variables: {
                            channelID: e.channelID
                        }
                    }
                }
            }), Object(d.a)(function(e) {
                return {
                    query: S,
                    variables: {
                        channelID: e.channelID
                    },
                    topic: Object(m.b)(e.channelID),
                    type: c.PubsubMessageType.BitsPinEvent,
                    mutator: function(t, n) {
                        if (n && n.user && n.user.cheer) {
                            var i = JSON.parse(t.msg);
                            if (i.channel_id === e.channelID) return C.k.debug("Received pubsub update", {
                                hasRecentCheer: !!i.recent && i.recent.has_recent_event,
                                hasNewRecentCheer: !n.user.cheer.recent || null !== i.recent.tags && n.user.cheer.recent.id !== i.recent.tags.msg_id
                            }), i.recent && (i.recent.has_recent_event || "dismiss" === i.action) ? (!n.user.cheer.recent || null !== i.recent.tags && n.user.cheer.recent.id !== i.recent.tags.msg_id || "dismiss" === i.action) && (n.user.cheer.recent = Object(X.c)(i.recent), n.user.cheer.recentTimeoutMs = n.user.cheer.settings.recentTimeoutMs) : n.user.cheer.recent = null, n
                        }
                    }
                }
            }), Object(d.a)(function(e) {
                return Object(J.a)(ee, e.channelID, e.data.user && e.data.user.cheer && e.data.user.cheer.leaderboard, e.userID)
            }))(te),
            ie = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        cheerIsTall: !1,
                        recentCheerID: null,
                        recentCheerExpireTime: null,
                        pcheersV2Enabled: !1
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement(ne, {
                        channelID: this.props.channelID,
                        userID: this.props.userID,
                        badgeData: this.props.badgeData,
                        bitsConfig: this.props.bitsConfig,
                        blockLinks: this.props.blockLinks,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin
                    })
                }, t
            }(a.Component),
            ae = n("RH2O"),
            re = n("Aj/L");
        var oe, se = Object(ae.b)(function(e) {
                var t = Object(re.c)(e);
                return {
                    isStaff: t && t.roles && t.roles.isStaff
                }
            })(ie),
            le = n("D6l4"),
            de = n("3zLD"),
            ce = n("6BvN"),
            ue = n("+xm8"),
            me = n("HM6l"),
            pe = n("f2i/"),
            he = n("ZVME"),
            ge = n("c3pS"),
            fe = (n("Lzcc"), function() {
                return a.createElement(b._35, {
                    className: "bits-card-error",
                    display: b.R.Flex,
                    flexDirection: b.T.Column,
                    alignItems: b.c.Center,
                    justifyContent: b._7.Center,
                    textAlign: b._45.Center,
                    padding: 1,
                    border: !0,
                    background: b.n.Base,
                    elevation: 3,
                    fullWidth: !0,
                    position: b._15.Absolute
                }, a.createElement(b.Q, {
                    italic: !0
                }, Object(s.d)("Have no fear, your Bits inventory is safe! The ability to Cheer will return shortly.", "BitsCard")))
            }),
            ve = n("iMOk"),
            be = (n("56e8"), function(e) {
                var t = void 0 !== e.progress,
                    n = a.createElement("img", {
                        className: "cheer-badge__image",
                        src: e.badge.image1x,
                        alt: e.badge.title,
                        srcSet: e.badge.image1x + " 1x, " + e.badge.image2x + " 2x, " + e.badge.image4x + " 4x"
                    });
                if (!t) return n;
                var i = e.progress ? Math.max(Math.round(18 * (1 - e.progress)), 1) : 18;
                return a.createElement("div", {
                    className: "cheer-badge__progress-container"
                }, n, a.createElement("div", {
                    className: "cheer-badge__progress-overlay",
                    style: {
                        width: i + "px"
                    },
                    "data-test-selector": "cheer-progress"
                }))
            }),
            ke = n("3iBR"),
            ye = function(e) {
                var t;
                e.selfBitsBadge && (e.selfBitsBadge.current || e.selfBitsBadge.next) && (t = a.createElement(b._8, {
                    padding: {
                        bottom: .5
                    }
                }, e.selfBitsBadge.current && a.createElement(b._8, {
                    display: b.R.Inline,
                    margin: {
                        right: .5
                    }
                }, a.createElement(be, {
                    badge: e.selfBitsBadge.current
                })), e.selfBitsBadge.next && a.createElement(be, {
                    badge: e.selfBitsBadge.next,
                    progress: e.selfBitsBadge.progress
                }), e.selfBitsBadge.nextBits && Object(s.d)("Next badge unlocks in {bitsToNextBadge} Bits!", {
                    bitsToNextBadge: e.selfBitsBadge.nextBits - e.selfBitsBadge.totalBits
                }, "Bits--BalanceFooter")));
                var n = Object(s.d)("{bitsGem} Log in to see your Bits balance", {
                    bitsGem: a.createElement(ve.a, {
                        count: 100,
                        withImage: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: u.a.Dark
                    })
                }, "Bits--BalanceFooter");
                return void 0 !== e.balance && null !== e.balance && (n = Object(s.d)("You have {currentBits}", {
                    currentBits: a.createElement(ve.a, {
                        count: e.balance,
                        withImage: !0,
                        withText: !0,
                        bitsConfig: e.bitsConfig,
                        themeOverride: u.a.Dark
                    })
                }, "Bits--BalanceFooter")), a.createElement(b._8, {
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-balance-footer"
                }, t, a.createElement(b._8, {
                    display: b.R.Flex,
                    flexGrow: 1,
                    alignItems: b.c.Center,
                    justifyContent: b._7.Between
                }, a.createElement("div", null, n), a.createElement(b.v, {
                    disabled: void 0 === e.balance || void 0 !== e.balance && e.balance > ke.i,
                    onClick: e.onClickGetBits,
                    "data-test-selector": "get-bits-button",
                    "data-a-target": "get-bits-button"
                }, Object(s.d)("Get Bits", "Bits--BalanceFooter"))))
            },
            _e = function(e) {
                return a.createElement(b._8, {
                    flexGrow: 1
                }, a.createElement(b._8, {
                    className: "undo-prompt__footer",
                    padding: 1,
                    display: b.R.Flex,
                    justifyContent: b._7.Between
                }, a.createElement(b.v, {
                    onClick: e.onCancel || void 0,
                    type: b.B.Hollow,
                    overlay: !0,
                    "data-test-selector": "cancel-button"
                }, Object(s.d)("Cancel", "Bits--UndoPrompt")), a.createElement(b.v, {
                    onClick: e.onConfirm || void 0,
                    "data-test-selector": "confirm-button"
                }, Object(s.d)("Send", "Bits--UndoPrompt"))), a.createElement(b._18, {
                    animationDirection: b._19.Down,
                    size: b._20.ExtraSmall,
                    animationDuration: ke.m.UNDO_PROMPT_DURATION / 1e3
                }))
            },
            Ce = function(e) {
                return e.event, a.createElement(ye, {
                    bitsConfig: e.bitsConfig,
                    onClickGetBits: e.onClickGetBits,
                    balance: e.balance,
                    selfBitsBadge: e.selfBitsBadge
                })
            },
            Se = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.isSending ? this.props.totalBits >= ke.l ? a.createElement(_e, {
                        onCancel: this.props.onCancelSend,
                        onConfirm: this.props.onConfirmSend
                    }) : null : this.props.event ? a.createElement(Ce, {
                        event: this.props.event,
                        selfBitsBadge: this.props.userSelfBitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.props.handleClickBuy,
                        balance: this.props.bitsBalance
                    }) : a.createElement(ye, {
                        selfBitsBadge: this.props.userSelfBitsBadge,
                        bitsConfig: this.props.bitsConfig,
                        onClickGetBits: this.props.handleClickBuy,
                        balance: this.props.bitsBalance
                    })
                }, t
            }(a.PureComponent),
            Ee = (n("Uvj5"), function() {
                var e = {
                    border: !0,
                    background: b.n.Base,
                    elevation: 3,
                    fullWidth: !0
                };
                return a.createElement(b._35, i.__assign({
                    className: "bits-card-loading",
                    display: b.R.Flex,
                    flexDirection: b.T.Column,
                    alignItems: b.c.Center,
                    justifyContent: b._7.Center,
                    position: b._15.Absolute
                }, e), a.createElement(b._10, {
                    delay: 0
                }), a.createElement(b._8, {
                    padding: {
                        top: 2
                    }
                }, a.createElement(b.Q, {
                    italic: !0
                }, Object(s.d)("Fetching Bits", "BitsCard"))))
            }),
            Ne = n("QRuM"),
            Te = n("jUhM"),
            we = function(e) {
                return a.createElement(b._8, {
                    display: b.R.Flex,
                    flexGrow: 1,
                    flexDirection: b.T.Column,
                    justifyContent: b._7.Center,
                    alignItems: b.c.Center,
                    padding: 1
                }, a.createElement(b._8, {
                    padding: {
                        top: 2,
                        bottom: 2
                    }
                }, a.createElement(b.Q, {
                    type: b._49.H5,
                    color: b.K.Link,
                    bold: !0
                }, Object(s.d)("Cheering Supports Your Streamer!", "Bits--CheermoteIntro"))), a.createElement(b.Q, null, Object(s.d)("Select a Cheermote to start your Cheer", "Bits--CheermoteIntro")), a.createElement(b._8, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, a.createElement("a", {
                    href: "#",
                    onClick: e.onClickHelp,
                    "data-test-selector": "help-link"
                }, Object(s.d)("How do I cheer?", "Bits--CheermoteIntro"))))
            },
            De = function(e) {
                var t = e.headline || e.prefix + (e.tier || "");
                if (e.tournament && e.tier <= 0) {
                    var n = e.tournament.teams.find(function(t) {
                        return t.id === e.prefix
                    });
                    n && (t = n.name + " - " + e.prefix)
                }
                return a.createElement(b._8, {
                    display: b.R.Flex,
                    flexDirection: b.T.Column,
                    alignItems: b.c.Center,
                    padding: 1
                }, a.createElement(b.Q, {
                    type: b._49.H4,
                    bold: !0
                }, t), a.createElement(M.a, {
                    prefix: e.prefix,
                    amount: e.tier,
                    bitsConfig: e.bitsConfig,
                    showImage: !0,
                    showAmount: e.tier > 0
                }))
            },
            Re = (n("Z1Q9"), function(e) {
                var t = null;
                e.minToCheer > 1 && (t = a.createElement(b.Q, {
                    "data-test-selector": "min-to-cheer-selector",
                    color: b.K.Alt2,
                    italic: !0
                }, Object(s.d)("This channel has a Cheer minimum of {minToCheer} Bits", {
                    minToCheer: e.minToCheer
                }, "Bits--CheermoteTierIntro")));
                var n = null;
                return e.minToPin > 0 && (n = a.createElement(b.Q, {
                    "data-test-selector": "min-to-pin-selector",
                    color: b.K.Alt2,
                    italic: !0
                }, Object(s.d)("Pinning your Cheer is a minimum of {minToPin} Bits", {
                    minToPin: e.minToPin
                }, "Bits--CheermoteTierIntro"))), a.createElement(b._8, {
                    display: b.R.Flex,
                    flexGrow: 1,
                    flexDirection: b.T.Column,
                    alignItems: b.c.Center,
                    justifyContent: b._7.Center,
                    padding: 1,
                    className: "cheermote-tier-intro"
                }, a.createElement(b._8, {
                    padding: {
                        x: 4
                    },
                    margin: {
                        bottom: 1
                    }
                }, a.createElement(b.Q, {
                    color: b.K.Alt2
                }, Object(s.d)("Cheermotes have multiple tiers, rollover below to see each one!", "Bits--CheermoteTierIntro"))), t, n)
            }),
            Oe = n("N221"),
            Ie = (n("dtvS"), function(e) {
                var t = e.prefixes.map(function(t, n) {
                    if (t.alt && t.cheerAmount) return a.createElement(b._2, {
                        className: "pending-cheer-list__list-item",
                        key: n,
                        padding: {
                            x: 1
                        }
                    }, a.createElement("li", null, a.createElement(M.a, {
                        prefix: t.alt,
                        amount: t.cheerAmount > ke.k ? ke.k : t.cheerAmount,
                        bitsConfig: e.bitsConfig,
                        size: M.b.Small,
                        showAmount: !0,
                        showImage: !0
                    })))
                });
                return a.createElement(b._8, {
                    display: b.R.Flex,
                    flexDirection: b.T.Row,
                    alignItems: b.c.End,
                    justifyContent: b._7.Center,
                    flexWrap: b.U.Wrap,
                    margin: {
                        top: 1
                    },
                    className: "pending-cheer-list"
                }, t)
            }),
            Me = n("cv4W"),
            xe = n.n(Me),
            je = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = "";
                    if (this.props.amount < 250) {
                        var t = 250 - this.props.amount;
                        e = Object(s.d)("{bitsToGo, plural, one {Cheer # more Bit to share gifts with chat!} other {Cheer # more Bits to share gifts with chat!}}", {
                            bitsToGo: t
                        }, "Crates")
                    } else e = Object(s.d)("Your Cheer will share gifts with chat!", "Crates");
                    return a.createElement(b._35, {
                        className: "crate-christmas-2017-reminder",
                        background: b.n.Alt,
                        borderTop: !0,
                        padding: 1
                    }, a.createElement(b._8, {
                        display: b.R.Inline,
                        margin: {
                            right: .5
                        }
                    }, a.createElement("img", {
                        src: xe.a,
                        height: "22",
                        width: "22"
                    })), a.createElement(b.Q, {
                        type: b._49.Strong
                    }, e))
                }, t
            }(a.Component);
        ! function(e) {
            e.CratesChristmas = "CratesChristmas", e.OWL2018 = "owl2018"
        }(oe || (oe = {}));
        var Le = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    switch (this.props.event) {
                        case oe.CratesChristmas:
                            return a.createElement(je, {
                                amount: this.props.amount
                            });
                        default:
                            return null
                    }
                }, t
            }(a.Component),
            Ae = (n("Jc+w"), function(e) {
                var t;
                if (e.prefixes && 1 === e.prefixes.length) {
                    var n = e.prefixes[0].alt;
                    n && (t = a.createElement(b._8, {
                        padding: {
                            top: 2
                        }
                    }, a.createElement(M.a, {
                        prefix: n,
                        amount: e.amount > ke.k ? ke.k : e.amount,
                        bitsConfig: e.bitsConfig,
                        showImage: !0,
                        showAmount: !0
                    })))
                } else if (e.prefixes) t = a.createElement(b._8, {
                    margin: {
                        top: 1
                    }
                }, a.createElement(Oe.b, {
                    className: "pending-cheer__scroll-container"
                }, a.createElement(Ie, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = Object(s.d)("You are using a total of {totalBits} Bits to cheer in {channelName}!", {
                        totalBits: a.createElement("strong", null, e.amount),
                        channelName: e.channelDisplayName
                    }, "Bits--PendingCheer");
                    t = a.createElement(b._8, {
                        "data-test-selector": "default-pending-cheer-message-selector",
                        padding: {
                            top: 2,
                            x: 5
                        }
                    }, a.createElement(b.Q, {
                        color: b.K.Alt2,
                        "data-a-target": "total-bits-message"
                    }, i))
                }
                var r = null;
                e.purchaseMore && e.purchaseMore > 0 && (r = a.createElement(b.Q, {
                    "data-test-selector": "purchase-more-selector",
                    "data-a-target": "need-more-bits-error"
                }, Object(s.d)("Please purchase {neededBits} more Bits to Cheer", {
                    neededBits: e.purchaseMore
                }, "Bits--PendingCheer")));
                var o = null;
                if (e.largestCheermote > ke.k) {
                    var l = Object(s.d)("{maximumCheerSize} is the largest Cheer emote, add another emote to Cheer louder!", {
                        maximumCheerSize: ke.k
                    }, "Bits--PendingCheer");
                    r = a.createElement(b.Q, {
                        "data-test-selector": "largest-cheermote-selector",
                        color: b.K.Error,
                        "data-a-target": "max-cheer-bits-error"
                    }, l)
                }
                if (e.amount < e.minToCheer) {
                    var d = Object(s.d)("Add {moreBitsAmount} Bits to reach this channel's minimum Cheer.", {
                        moreBitsAmount: e.minToCheer - e.amount
                    }, "Bits--PendingCheer");
                    r = a.createElement(b.Q, {
                        "data-test-selector": "minimum-cheer-selector",
                        color: b.K.Error,
                        "data-a-target": "min-cheer-bits-error"
                    }, d)
                }
                if (e.smallestCheermote < e.minPerEmote) {
                    var c = Object(s.d)("This channel has set a minimum of {minPerEmote} Bits to use a Cheer emote in chat.", {
                        minPerEmote: e.minPerEmote
                    }, "Bits--PendingCheer");
                    o = a.createElement(b.Q, {
                        "data-test-selector": "minimum-cheermote-selector",
                        color: b.K.Error,
                        italic: !0,
                        "data-a-target": "min-emote-bits-error"
                    }, c)
                }
                var u = a.createElement(M.a, {
                    amount: e.amount,
                    prefix: ke.g,
                    bitsConfig: e.bitsConfig,
                    display: b.R.Inline,
                    showImage: !1,
                    showAmount: !0,
                    size: M.b.Medium
                });
                return a.createElement(b._8, null, a.createElement(b._8, {
                    display: b.R.Flex,
                    flexDirection: b.T.Column,
                    alignItems: b.c.Center,
                    padding: 1,
                    className: "pending-cheer"
                }, a.createElement(b.Q, {
                    fontSize: b.V.Size4,
                    bold: !0
                }, Object(s.d)("Cheering {totalBits} Bits", {
                    totalBits: u
                }, "Bits--PendingCheer")), !o && t, !o && r && a.createElement(b._8, {
                    padding: {
                        top: 1
                    }
                }, r), o && a.createElement(b._8, {
                    padding: {
                        top: 3,
                        x: 3
                    }
                }, o)), !o && !r && a.createElement(Le, {
                    event: e.event,
                    amount: e.amount
                }))
            }),
            Fe = n("qe65"),
            Ue = (n("RwqP"), {
                themed: !0,
                dark: {
                    "1x": ke.b + "/dark/animated/promo/intro.gif"
                },
                light: {
                    "1x": ke.b + "/light/animated/promo/intro.gif"
                }
            }),
            Be = function() {
                return a.createElement(b._8, {
                    display: b.R.Flex,
                    flexDirection: b.T.Column,
                    alignItems: b.c.Center,
                    justifyContent: b._7.Center,
                    flexGrow: 1,
                    className: "bits-sending"
                }, a.createElement(b._8, {
                    padding: {
                        bottom: 1
                    }
                }, a.createElement(Fe.a, {
                    sources: Ue
                })), a.createElement(b.Q, {
                    italic: !0
                }, Object(s.d)("Your Cheer is currently processing.", "Bits--SendingBits")))
            },
            Pe = (n("4VHW"), function(e) {
                var t = Object(s.d)("You are using {totalBits} Bits to cheer in {channelName}'s chat.", {
                        totalBits: e.totalBits,
                        channelName: e.channelDisplayName
                    }, "Bits--UndoPrompt"),
                    n = null;
                if (e.prefixes && e.prefixes.length > 1) n = a.createElement(Oe.b, {
                    className: "bits-undo-prompt__scroll-container"
                }, a.createElement(b._8, {
                    margin: {
                        top: 1
                    }
                }, a.createElement(Ie, {
                    prefixes: e.prefixes,
                    bitsConfig: e.bitsConfig
                })));
                else {
                    var i = e.prefixes[0].alt;
                    i && (n = a.createElement(b._8, {
                        padding: {
                            bottom: 1
                        }
                    }, a.createElement(M.a, {
                        prefix: i,
                        amount: e.totalBits,
                        bitsConfig: e.bitsConfig,
                        showAmount: !0,
                        showImage: !0
                    })))
                }
                return a.createElement(b._8, {
                    display: b.R.Flex,
                    flexDirection: b.T.Column,
                    alignItems: b.c.Center,
                    justifyContent: b._7.Center,
                    flexGrow: 1,
                    padding: 1,
                    className: "bits-undo-prompt"
                }, n, a.createElement(b.Q, null, t))
            }),
            Ve = n("1bR2"),
            We = n.n(Ve),
            He = n("vDGQ"),
            Ge = (n("CGWe"), function(e) {
                return Object(He.d)({
                    action: He.a.View,
                    type: He.c.BitsIntro,
                    channelId: e.channelID
                }), a.createElement(b._8, {
                    "data-test-selector": "crate-intro"
                }, a.createElement(b._8, {
                    padding: {
                        x: 1,
                        top: 2,
                        bottom: 1
                    }
                }, a.createElement(b.Q, {
                    fontSize: b.V.Size4,
                    bold: !0
                }, Object(s.d)("Share the Holiday Cheer!", "Crates"))), a.createElement(b._35, {
                    className: "crates-holiday-background",
                    background: b.n.Alt,
                    padding: 1,
                    margin: {
                        y: 1
                    },
                    display: b.R.Flex,
                    justifyContent: b._7.Around,
                    alignItems: b.c.End,
                    borderTop: !0,
                    borderBottom: !0
                }, a.createElement(b.e, {
                    type: b.j.BounceIn,
                    delay: b.f.Long,
                    enabled: !0
                }, a.createElement(b._52, {
                    label: "XmasRaid"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633161/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633161/3.0 3.0x",
                    alt: "XmasRaid"
                }))), a.createElement(b.e, {
                    type: b.j.BounceIn,
                    delay: b.f.Medium,
                    enabled: !0
                }, a.createElement(b._52, {
                    label: "MerryPurple"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633177/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633177/3.0 3.0x",
                    alt: "MerryPurple"
                }))), a.createElement(b.e, {
                    type: b.j.BounceIn,
                    delay: b.f.Short,
                    enabled: !0
                }, a.createElement(b._52, {
                    label: "GiftRage"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/634141/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/634141/3.0 3.0x",
                    alt: "GiftRage"
                }))), a.createElement("img", {
                    src: We.a,
                    height: "50",
                    width: "50"
                }), a.createElement(b.e, {
                    type: b.j.BounceIn,
                    delay: b.f.Short,
                    enabled: !0
                }, a.createElement(b._52, {
                    label: "RudolphWhoa"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633166/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633166/3.0 3.0x",
                    alt: "RudolphWhoa"
                }))), a.createElement(b.e, {
                    type: b.j.BounceIn,
                    delay: b.f.Medium,
                    enabled: !0
                }, a.createElement(b._52, {
                    label: "FeelsGingerMan"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633171/1.0 1x,https://static-cdn.jtvnw.net/emoticons/v1/633171/2.0 2x,https://static-cdn.jtvnw.net/emoticons/v1/633171/3.0 4x",
                    alt: "FeelsGingerMan"
                }))), a.createElement(b.e, {
                    type: b.j.BounceIn,
                    delay: b.f.Long,
                    enabled: !0
                }, a.createElement(b._52, {
                    label: "OrnaMental"
                }, a.createElement("img", {
                    height: "28",
                    width: "28",
                    srcSet: "https://static-cdn.jtvnw.net/emoticons/v1/633170/1.0 1.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/2.0 2.0x, https://static-cdn.jtvnw.net/emoticons/v1/633170/3.0 3.0x",
                    alt: "OrnaMental"
                })))), a.createElement(b._8, {
                    padding: 1
                }, a.createElement(b.Q, {
                    type: b._49.P
                }, Object(s.d)("Cheer any amount to support your streamer, and get a holiday gift! Cheer {minBits, number} Bits or more, and others in chat can get a gift too!", {
                    minBits: 250
                }, "Crates")), a.createElement(b.Q, {
                    type: b._49.Strong
                }, a.createElement("a", {
                    href: "http://link.twitch.tv/holiday-emotes",
                    target: "_blank",
                    rel: "noreferrer noopener"
                }, Object(s.d)("Details", "Crates")))))
            }),
            ze = (n("kjfG"), function() {
                return a.createElement(b._8, {
                    className: "owl-2018-introduction"
                }, a.createElement(b._8, {
                    padding: {
                        top: 2,
                        bottom: 1
                    }
                }, a.createElement(b.Q, {
                    fontSize: b.V.Size5,
                    bold: !0
                }, Object(s.d)("Cheer with Bits and unlock loot!", "OWL2018Introduction"))), a.createElement(b._8, {
                    className: "owl-2018-introduction__banner-background",
                    padding: {
                        top: 1
                    }
                }, a.createElement("img", {
                    className: "owl-2018-introduction__banner-image",
                    src: ke.c + "/owl-2017/overwatch-wide.png"
                })), a.createElement(b._8, {
                    padding: {
                        x: 2,
                        top: 1,
                        bottom: .5
                    }
                }, a.createElement(b.Q, null, Object(s.d)("Cheer 150 Bits or more to hype your team and get a team emote! Cheer along with your fellow fans to unlock in-game skins based on everyone’s Cheers!", "OWL2018Introduction"))), a.createElement(b._8, {
                    padding: {
                        bottom: 1
                    }
                }, a.createElement(b.O, {
                    to: "http://link.twitch.tv/owl-drops-onsite-bitscard-blogus",
                    targetBlank: !0,
                    hoverUnderlineNone: !1
                }, Object(s.d)("Details", "OWL2018Introduction"))))
            }),
            qe = function(e) {
                switch (e.event) {
                    case oe.OWL2018:
                        return a.createElement(ze, null);
                    case oe.CratesChristmas:
                        return a.createElement(Ge, {
                            onClickHelp: e.onClickHelp,
                            channelID: e.channelID
                        });
                    default:
                        return a.createElement(we, {
                            onClickHelp: e.onClickHelp
                        })
                }
            },
            Qe = function(e) {
                var t = s.b.get("crate_snowman_launch", Ne.a.Off),
                    n = t === Ne.a.On || t === Ne.a.StaffOnly && e.isStaff ? oe.CratesChristmas : null,
                    i = e.event || n;
                if (e.isSending) return e.totalBits < ke.l ? a.createElement(Be, null) : a.createElement(Pe, {
                    bitsConfig: e.bitsConfig,
                    channelDisplayName: e.displayName,
                    prefixes: e.currentCheers,
                    totalBits: e.totalBits
                });
                if (e.hoveredCheermote) return a.createElement(De, {
                    event: e.event,
                    tournament: e.tournament,
                    bitsConfig: e.bitsConfig,
                    prefix: e.hoveredCheermote,
                    tier: e.hoveredTier
                });
                if (e.totalBits) return a.createElement(Ae, {
                    bitsConfig: e.bitsConfig,
                    prefixes: e.currentCheers,
                    amount: e.totalBits,
                    channelDisplayName: e.displayName,
                    purchaseMore: e.bitsBalance && e.totalBits - e.bitsBalance,
                    largestCheermote: e.largestCheermote,
                    smallestCheermote: e.smallestCheermote,
                    minPerEmote: e.emoteMinimumBits,
                    minToCheer: e.cheerMinimumBits,
                    event: i
                });
                if (e.helpRequested) return a.createElement(Te.a, null);
                if (e.chosenCheermote) {
                    var r = e.recentMinimumBits,
                        o = e.cheerMinimumBits;
                    return a.createElement(Re, {
                        minToPin: r,
                        minToCheer: o
                    })
                }
                return i ? a.createElement(qe, {
                    event: i,
                    onClickHelp: e.showHelp,
                    channelID: e.channelID
                }) : a.createElement(we, {
                    onClickHelp: e.showHelp
                })
            },
            Ke = n("0nzt"),
            $e = (n("nQZu"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleCheermoteHover = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onHover(n)
                    }, t.handleCheermoteUnhover = function() {
                        t.props.onHoverLeave()
                    }, t.handleCheermoteClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onClick(n)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props.bitsConfig.orderedActions.filter(function(e) {
                            return e.type !== ke.e
                        }).map(function(e) {
                            var t = e.indexedTiers.get(ke.h);
                            return t ? {
                                imgSrc: t.indexedImages.LIGHT.static.get(2),
                                imgSrcDark: t.indexedImages.DARK.static.get(2),
                                key: e.prefix
                            } : null
                        }).map(function(t, n) {
                            return t && t.key ? a.createElement(b._2, {
                                key: t.key,
                                margin: {
                                    bottom: 1
                                }
                            }, a.createElement("li", {
                                className: "cheermote-prefix-selector__cheermote"
                            }, a.createElement("button", {
                                className: "cheermote-prefix-selector__item-button",
                                "data-key": t.key,
                                onMouseEnter: e.handleCheermoteHover,
                                onMouseLeave: e.handleCheermoteUnhover,
                                onClick: e.handleCheermoteClick,
                                "data-a-target": "cheermote-" + t.key.replace(":", "")
                            }, a.createElement("img", {
                                alt: t.key,
                                src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                            })))) : a.createElement("li", {
                                key: "null-cheermote-" + n
                            }, a.createElement("button", {
                                className: "cheermote-prefix-selector__item-button",
                                disabled: !0
                            }, a.createElement("div", {
                                className: "cheermote-prefix-selector__placeholder"
                            })))
                        }),
                        n = a.createElement(b._2, {
                            className: "cheermote-prefix-selector__cheermotes",
                            display: b.R.Flex,
                            flexWrap: b.U.Wrap,
                            flexDirection: b.T.Row,
                            justifyContent: b._7.Start,
                            alignItems: b.c.End,
                            padding: {
                                bottom: 1
                            }
                        }, a.createElement("ul", null, t));
                    return a.createElement(b._8, {
                        flexGrow: 1,
                        overflow: b._11.Hidden,
                        className: "cheermote-prefix-selector"
                    }, a.createElement(N.b, null, n))
                }, t
            }(a.PureComponent));
        var Ye = Object(ae.b)(function(e) {
                return {
                    darkModeEnabled: Object(Ke.a)(e) === u.a.Dark
                }
            })($e),
            Je = (n("9Xbf"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleCheermoteHover = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onHover(n)
                    }, t.handleCheermoteUnhover = function() {
                        t.props.onHoverLeave()
                    }, t.handleCheermoteClick = function(e) {
                        var n = e.currentTarget.getAttribute("data-key");
                        n && t.props.onClick(n)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props.bitsConfig.indexedActions[this.props.chosenCheermote.toLowerCase()],
                        n = t.orderedTiers.filter(function(e) {
                            return e.canCheer
                        }).map(function(e) {
                            return {
                                imgSrc: e.indexedImages.LIGHT.static.get(2),
                                imgSrcDark: e.indexedImages.DARK.static.get(2),
                                key: t.prefix + ":" + e.bits
                            }
                        }).reverse().map(function(t, n) {
                            return t && t.key ? a.createElement("li", {
                                key: t.key,
                                className: "cheermote-tier-selector__cheermote"
                            }, a.createElement("button", {
                                className: "cheermote-tier-selector__item-button",
                                "data-key": t.key,
                                onMouseEnter: e.handleCheermoteHover,
                                onMouseLeave: e.handleCheermoteUnhover,
                                onClick: e.handleCheermoteClick,
                                "data-a-target": "cheermote-" + t.key.replace(":", "")
                            }, a.createElement("img", {
                                alt: t.key,
                                src: e.props.darkModeEnabled ? t.imgSrcDark : t.imgSrc
                            })), a.createElement(M.a, {
                                bitsConfig: e.props.bitsConfig,
                                prefix: "",
                                amount: +t.key.split(":")[1],
                                showImage: !1,
                                showAmount: !0,
                                size: M.b.Small
                            })) : a.createElement("li", {
                                key: "null-cheermote-" + n
                            }, a.createElement("button", {
                                className: "cheermote-tier-selector__item-button",
                                disabled: !0
                            }, a.createElement("div", {
                                className: "cheermote-tier-selector__placeholder"
                            })))
                        }),
                        i = a.createElement(b._8, {
                            padding: {
                                right: 2
                            },
                            fullWidth: !0,
                            className: "cheermote-tier-selector__back-button"
                        }, a.createElement(b.v, {
                            "data-a-target": "bits-card-back-button",
                            type: b.B.Text,
                            fullWidth: !0,
                            onClick: this.props.onClose
                        }, Object(s.d)("Show All Cheermotes", "CheermoteCarousel"))),
                        r = a.createElement(b._2, {
                            className: "cheermote-tier-selector__cheermotes",
                            display: b.R.Flex,
                            flexWrap: b.U.Wrap,
                            flexDirection: b.T.Row,
                            justifyContent: b._7.Between,
                            alignItems: b.c.End,
                            padding: {
                                bottom: 1
                            }
                        }, a.createElement("ul", null, n, i));
                    return a.createElement(b._8, {
                        flexGrow: 1,
                        overflow: b._11.Hidden,
                        className: "cheermote-tier-selector"
                    }, r)
                }, t
            }(a.PureComponent));
        var Ze = Object(ae.b)(function(e) {
                return {
                    darkModeEnabled: Object(Ke.a)(e) === u.a.Dark
                }
            })(Je),
            Xe = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.props.helpRequested && !this.props.currentCheers.length ? null : this.props.chosenCheermote ? a.createElement(Ze, {
                        bitsConfig: this.props.bitsConfig,
                        chosenCheermote: this.props.chosenCheermote,
                        onHover: this.props.handleTierHover,
                        onHoverLeave: this.props.handleUnhover,
                        onClick: this.props.handleTierClick,
                        onClose: this.props.clearChosenCheermote
                    }) : a.createElement(Ye, {
                        bitsConfig: this.props.bitsConfig,
                        onHover: this.props.handleCheermoteHover,
                        onHoverLeave: this.props.handleUnhover,
                        onClick: this.props.handleCheermoteClick
                    })
                }, t
            }(a.PureComponent),
            et = (n("d/6e"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = {
                        border: !0,
                        background: b.n.Base,
                        elevation: 3,
                        fullWidth: !0
                    };
                    return a.createElement(b._35, i.__assign({
                        className: "bits-self-cheer-warning",
                        display: b.R.Flex,
                        flexDirection: b.T.Column,
                        alignItems: b.c.Center,
                        justifyContent: b._7.Center,
                        textAlign: b._45.Center,
                        padding: {
                            top: 2,
                            x: 1,
                            bottom: 1
                        },
                        position: b._15.Absolute
                    }, e), a.createElement(b._8, {
                        padding: {
                            top: .5,
                            right: .5
                        },
                        attachTop: !0,
                        attachRight: !0,
                        position: b._15.Absolute
                    }, a.createElement(b.w, {
                        ariaLabel: Object(s.d)("close bits card", "BitsCardSelfCheerWarning"),
                        "data-a-target": "bits-card-close-button",
                        onClick: this.props.onUserClose,
                        icon: b._25.Close,
                        type: b.y.Secondary,
                        size: b.x.Small
                    })), a.createElement(b.Q, {
                        color: b.K.Error,
                        italic: !0
                    }, Object(s.d)("You cannot Cheer in your own channel.", "BitsCard")))
                }, t
            }(a.PureComponent)),
            tt = n("WVx7"),
            nt = n("ZJYd"),
            it = n("iWdz"),
            at = (n("2B/Z"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        chosenCheermote: null,
                        hoveredCheermote: null,
                        hoveredTier: 0,
                        helpRequested: !1,
                        totalBits: 0,
                        largestCheermote: 0,
                        smallestCheermote: 0,
                        buyingBits: !1
                    }, t.unhoverTimeout = 0, t.lastRefetchTime = 0, t.handleTierHover = function(e) {
                        clearTimeout(t.unhoverTimeout);
                        var n = e.split(":");
                        n.length < 2 || (t.setState({
                            hoveredTier: +n[1],
                            hoveredCheermote: n[0]
                        }), t.props.trackBitsCardInteraction(Z.a.PreviewEmote, {
                            emoteType: n[0],
                            emoteLevel: +n[1]
                        }))
                    }, t.handleUnhover = function() {
                        t.unhoverTimeout = setTimeout(t.clearHovered, 500)
                    }, t.clearHovered = function() {
                        t.setState({
                            hoveredTier: 0,
                            hoveredCheermote: null
                        })
                    }, t.handleTierClick = function(e) {
                        t.props.onClickCheermote(e.split(":").join(""))
                    }, t.handleCheermoteHover = function(e) {
                        clearTimeout(t.unhoverTimeout), t.setState({
                            hoveredCheermote: e,
                            hoveredTier: 0
                        }), t.props.trackBitsCardInteraction(Z.a.PreviewEmote, {
                            emoteType: e,
                            emoteLevel: 100
                        })
                    }, t.handleCheermoteClick = function(e) {
                        t.setState({
                            chosenCheermote: e,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.clearChosenCheermote = function() {
                        t.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0
                        })
                    }, t.showHelp = function(e) {
                        e.preventDefault(), t.setState({
                            helpRequested: !0
                        })
                    }, t.closeHelp = function() {
                        return t.setState({
                            helpRequested: !1
                        })
                    }, t.handleClickBuy = function() {
                        t.setState({
                            buyingBits: !0
                        }), t.props.trackBitsCardInteraction(Z.a.BuyMain)
                    }, t.handleCloseBuy = function() {
                        return t.setState({
                            buyingBits: !1
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t = this.props.visible || !!this.props.currentCheers.length,
                        n = e.visible || !!e.currentCheers.length;
                    if (!t && n) {
                        var i = Date.now();
                        i - this.lastRefetchTime > 1e3 && this.props.data && e.data && !e.data.loading && (this.lastRefetchTime = i, e.data.refetch())
                    }
                    if (t && !n && this.setState({
                            chosenCheermote: null,
                            hoveredCheermote: null,
                            hoveredTier: 0,
                            buyingBits: !1
                        }), this.props.currentCheers !== e.currentCheers) {
                        var a = Object(nt.a)(e.currentCheers),
                            r = a.total,
                            o = a.largestCheermote,
                            s = a.smallestCheermote;
                        this.setState({
                            totalBits: r,
                            largestCheermote: o,
                            smallestCheermote: s
                        })
                    }
                }, t.prototype.render = function() {
                    if (!this.props.visible && !this.props.currentCheers.length) return null;
                    var e, t = {
                        border: !0,
                        background: b.n.Base,
                        elevation: 3,
                        fullWidth: !0
                    };
                    if (this.props.currentCheers.length || (e = a.createElement(b._8, {
                            position: b._15.Absolute,
                            attachTop: !0,
                            attachRight: !0,
                            padding: {
                                top: .5,
                                right: .5
                            }
                        }, a.createElement(b.w, {
                            ariaLabel: Object(s.d)("close bits card", "BitsCard"),
                            "data-a-target": "bits-card-close-button",
                            onClick: this.props.onUserClose,
                            icon: b._25.Close,
                            type: b.y.Secondary,
                            size: b.x.Small
                        }))), !this.props.data || this.props.data.loading) return a.createElement(Ee, null);
                    if (this.props.data.error || !this.props.bitsConfig) return a.createElement(fe, null);
                    if (this.props.data.currentUser && this.props.data.currentUser.login === this.props.channelLogin) return a.createElement(et, {
                        onUserClose: this.props.onUserClose
                    });
                    if (this.state.buyingBits) return a.createElement(tt.a, {
                        bitsConfig: this.props.bitsConfig,
                        channelLogin: this.props.channelLogin,
                        closeAllBits: this.props.onUserClose,
                        onClose: this.handleCloseBuy,
                        trackBitsCardInteraction: this.props.trackBitsCardInteraction,
                        location: Z.b.ChatTooltip
                    });
                    var n, r = this.state.helpRequested && !this.props.currentCheers.length,
                        o = null;
                    return this.props.data.user.cheer.settings.event && (o = this.props.data.user.cheer.settings.event.toLowerCase().replace("_", "-")), r && (n = a.createElement(b._8, {
                        position: b._15.Absolute,
                        padding: {
                            left: .5,
                            top: .5
                        },
                        attachLeft: !0,
                        attachTop: !0
                    }, a.createElement(b.v, {
                        onClick: this.closeHelp,
                        "data-a-target": "bits-card-back-button",
                        icon: b._25.ChatSettingsBack,
                        type: b.B.Text,
                        size: b.z.Small
                    }, Object(s.d)("Back", "BitsCard")))), a.createElement(b._8, {
                        className: "t-bits-card",
                        position: b._15.Absolute,
                        fullWidth: !0
                    }, a.createElement(b._35, i.__assign({
                        position: b._15.Relative,
                        display: b.R.Flex,
                        flexDirection: b.T.Column,
                        "data-a-target": "bits-card"
                    }, t), !this.props.isSending && n, e, a.createElement(b._35, {
                        className: "t-bits-card__contents",
                        display: b.R.Flex,
                        flexGrow: 0,
                        flexDirection: b.T.Column,
                        alignContent: b.b.Stretch,
                        textAlign: b._45.Center,
                        borderBottom: !this.props.isSending
                    }, a.createElement(Qe, {
                        bitsBalance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        bitsConfig: this.props.bitsConfig,
                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                        chosenCheermote: this.state.chosenCheermote,
                        currentCheers: this.props.currentCheers,
                        displayName: this.props.data.user.displayName,
                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                        event: o,
                        helpRequested: this.state.helpRequested,
                        hoveredCheermote: this.state.hoveredCheermote,
                        hoveredTier: this.state.hoveredTier,
                        isSending: this.props.isSending,
                        largestCheermote: this.state.largestCheermote,
                        recentMinimumBits: this.props.data.user.cheer.settings.recentMinimumBits,
                        smallestCheermote: this.state.smallestCheermote,
                        totalBits: this.state.totalBits,
                        tournament: this.props.data.user.tournament,
                        channelID: this.props.channelID,
                        showHelp: this.showHelp,
                        isStaff: this.props.isStaff
                    })), !this.props.isSending && a.createElement(Xe, {
                        bitsConfig: this.props.bitsConfig,
                        chosenCheermote: this.state.chosenCheermote,
                        currentCheers: this.props.currentCheers,
                        eventString: o,
                        helpRequested: this.state.helpRequested,
                        handleCheermoteClick: this.handleCheermoteClick,
                        handleCheermoteHover: this.handleCheermoteHover,
                        handleTierClick: this.handleTierClick,
                        handleTierHover: this.handleTierHover,
                        handleUnhover: this.handleUnhover,
                        clearChosenCheermote: this.clearChosenCheermote
                    }), a.createElement(b._8, {
                        className: "t-bits-card__footer",
                        fullWidth: !0,
                        display: b.R.Flex
                    }, a.createElement(Se, {
                        bitsBalance: this.props.data.currentUser && this.props.data.currentUser.bitsBalance,
                        bitsConfig: this.props.bitsConfig,
                        event: o,
                        isSending: this.props.isSending,
                        totalBits: this.state.totalBits,
                        userSelfBitsBadge: this.props.data.user.self && this.props.data.user.self.bitsBadge,
                        handleClickBuy: this.handleClickBuy,
                        onCancelSend: this.props.onCancelSend,
                        onConfirmSend: this.props.onConfirmSend
                    }))))
                }, t
            }(a.Component)),
            rt = Object(de.compose)(Object(l.a)(it, {
                name: "data",
                skip: function(e) {
                    return !e.channelID
                },
                options: function(e) {
                    return {
                        variables: {
                            name: e.channelID
                        },
                        fetchPolicy: "cache-and-network"
                    }
                }
            }))(at);
        var ot, st = Object(ae.b)(function(e) {
                return {
                    user: Object(re.c)(e)
                }
            })(rt),
            lt = n("KSGD"),
            dt = n("2emZ"),
            ct = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = dt.a.Hashtag, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        return e.startsWith("#") && null !== t.props.hashTags.edges ? t.props.hashTags.edges.filter(function(t) {
                            return t.node.id.includes(e)
                        }).map(function(n) {
                            return {
                                current: e,
                                replacement: n.node.id,
                                element: t.genearateHashtagDisplay(n.node.id)
                            }
                        }) : null
                    }, t.genearateHashtagDisplay = function(e) {
                        return a.createElement(b._8, {
                            padding: {
                                right: .5
                            },
                            key: "hashtag:" + e
                        }, a.createElement(b.Q, null, e))
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: lt.func
                }, t
            }(a.Component),
            ut = n("iydZ"),
            mt = n("Lx+S"),
            pt = n("vh75"),
            ht = n("SZoP"),
            gt = n("Bir6"),
            ft = 5,
            vt = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.autocompleteType = dt.a.Mention, n.canBeTriggeredByTab = !0, n.getMatches = function(e, t) {
                        return t || e.startsWith("@") ? n.getMentions(e, t) : null
                    }, n.getMentions = function(e, t) {
                        var i = t ? e : e.substring(1),
                            a = new RegExp("^" + Object(gt.a)(i), "i");
                        return n.state.sortedChatMembers.filter(function(e) {
                            return a.test(e.login) || e.displayName && a.test(e.displayName)
                        }).slice(0, ft).map(function(i) {
                            return {
                                current: e,
                                replacement: (t ? "" : "@") + (i.displayName || i.login),
                                element: n.renderMention(i)
                            }
                        })
                    }, n.renderMention = function(e) {
                        return a.createElement("span", null, Object(ht.a)(e.login, e.displayName || null))
                    }, n.sortChatMembers = function(e) {
                        var t = [{
                                login: e.channelLogin,
                                displayName: e.channelDisplayName
                            }],
                            n = e.chatMembers;
                        return n.sort(function(e, t) {
                            return e.login < t.login ? -1 : e.login > t.login ? 1 : 0
                        }), t.concat(n)
                    }, n.state = {
                        sortedChatMembers: n.sortChatMembers(t)
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.chatMembers === e.chatMembers && this.props.channelDisplayName === e.channelDisplayName && this.props.channelLogin === e.channelLogin || this.setState({
                        sortedChatMembers: this.sortChatMembers(e)
                    })
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: lt.func
                }, t
            }(a.Component),
            bt = function() {
                return a.createElement(b.q, {
                    direction: b.r.TopLeft,
                    offsetY: "11px",
                    show: !0
                }, a.createElement(b._8, {
                    padding: 1,
                    "data-test-selector": "manage-moderation-settings-tooltip"
                }, Object(s.d)("Mods can now update AutoMod levels as well as Blocked and Permitted Terms.", "ManageModerationSettingsChat")))
            },
            kt = function() {
                return a.createElement(b.q, {
                    direction: b.r.TopLeft,
                    offsetY: "11px",
                    show: !0
                }, a.createElement(b._8, {
                    padding: 1,
                    "data-test-selector": "raids-settings-tooltip"
                }, Object(s.d)("If a raid is offensive, moderate in chat settings.", "RaidReportingChat")))
            },
            yt = n("QCOJ"),
            _t = n("O0Qc"),
            Ct = n("l21v"),
            St = n("hcyD"),
            Et = n("VB5+"),
            Nt = n("Umoc"),
            Tt = n("YDbY"),
            wt = n("ieBa"),
            Dt = n("CSlQ"),
            Rt = n("ACWz"),
            Ot = n("2I50"),
            It = /\S/,
            Mt = 3;
        ! function(e) {
            e[e.Bits = 0] = "Bits", e[e.Emotes = 1] = "Emotes", e[e.None = 2] = "None"
        }(ot || (ot = {}));
        var xt = function(e) {
            function t(t) {
                var n = e.call(this, t) || this;
                return n.cancelDelayedSend = null, n.confirmDelayedSend = null, n.hasConfirmedInEmbed = !1, n.hasSeenConfirmationPrompt = !1, n.syncMembers = function() {
                    n.props.activeChatters.isDirty && n.setState({
                        chatMembers: n.props.activeChatters.getActiveChatters()
                    })
                }, n.incrementAndHideAutomodTooltipCounter = function() {
                    var e = s.l.get("automodChatCogTooltipSeenNumTimes", 0) + 1;
                    s.l.set("automodChatCogTooltipSeenNumTimes", e), n.setState({
                        showAutomodSettingsTooltip: !1
                    })
                }, n.setChatInputRef = function(e) {
                    return n.chatInputRef = e
                }, n.setAutocompleteInputRef = function(e) {
                    return n.autocompleteInputRef = e
                }, n.onChatSettingsToggle = function(e) {
                    n.handleRaidReportingToggle(e), n.handleModerationSettingsToggle(e), e || Object(Nt.b)({
                        channelLogin: n.props.channelLogin,
                        isHostMode: n.props.isHostMode
                    })
                }, n.handleModerationSettingsToggle = function(e) {
                    if (!e && Object(Tt.a)()) {
                        var t = s.l.get("autoModToolTipSeen", 0) + 1;
                        n.setState({
                            showAutomodSettingsTooltip: !1
                        }), s.l.set("autoModToolTipSeen", t)
                    }
                }, n.handleRaidReportingToggle = function(e) {
                    n.props.raidReceived && (n.state.showRaidsSettingsTooltip && (n.setState({
                        showRaidsSettingsTooltip: !1
                    }), s.l.set("raidsModerationTooltipsSeenNumTimes", Mt)), e && n.setState({
                        showRaidsFollowerOnlyTooltip: !1
                    }))
                }, n.onKeyDown = function(e) {
                    var t = e.charCode || e.keyCode;
                    switch (n.props.onKeyDown && t !== ce.a.Enter && n.props.onKeyDown(e), t) {
                        case ce.a.Enter:
                            return void(e.shiftKey || (e.preventDefault(), n.onMessageSend()));
                        case ce.a.Esc:
                            return void(n.state.showCard === ot.Bits && n.setState({
                                showCard: ot.None
                            }));
                        default:
                            return
                    }
                }, n.onMessageValueUpdate = function(e) {
                    n.setState({
                        value: e
                    })
                }, n.onInputFocus = function() {
                    n.props.onInputFocus && n.props.onInputFocus(), n.state.hasInteractedOrPageload || n.setState({
                        hasInteractedOrPageload: !0
                    })
                }, n.onMouseEnterInput = function() {
                    n.state.hasInteractedOrPageload || n.setState({
                        hasInteractedOrPageload: !0
                    })
                }, n.onChatCommand = function(e) {
                    n.props.onChatCommand(e), n.trackChatEvent()
                }, n.confirmEmbedAction = function(e, t, i) {
                    var a = n,
                        r = a.hasConfirmedInEmbed;
                    if (a.hasSeenConfirmationPrompt) return r;
                    var o = window.confirm(n.confirmationMessage(e, t, i));
                    return n.hasSeenConfirmationPrompt = !0, n.hasConfirmedInEmbed = o, n.setState({
                        hasSeenAndRejectedEmbedPrompt: !o
                    }), o
                }, n.confirmationMessage = function(e, t, n) {
                    return Object(s.d)('Hi {displayName}. You are attempting to send "{message}" in {channelLogin}\'s chat via an embedded version of Twitch Chat. Are you sure you want to do this? This setting will persist until you refresh the page', {
                        displayName: e,
                        message: t,
                        channelLogin: n
                    }, "ChatInput")
                }, n.onMessageSend = function() {
                    return i.__awaiter(n, void 0, void 0, function() {
                        var e, t, n, a, r = this;
                        return i.__generator(this, function(i) {
                            switch (i.label) {
                                case 0:
                                    return this.props.authToken ? this.props.channelID ? (e = It.test(this.state.value)) ? this.state.isSendingBits ? (s.j.debug("[ChatInput] Supressing chat message send. Bits spending is still in progress."), [2]) : this.props.isEmbedded && (this.props.isCurrentUserModerator || this.props.data && this.props.data.currentUser && this.props.data.currentUser.isPartner) && this.props.sessionUser && !this.confirmEmbedAction(this.props.sessionUser.displayName, this.state.value || "", this.props.channelLogin) ? (s.j.debug("[ChatInput] Embed Confirmation check failed. Not sending message"), [2]) : (this.resetAndUpdateRenderSentChatMessageEvent(), this.props.data && this.props.data.currentUser ? 0 === (t = Object(nt.a)(this.state.messageCheers)).total ? (this.sendRegularMessage(), [2]) : this.props.data.user ? this.props.data.user.cheer ? this.props.data.user.cheer.settings ? (n = Object(nt.f)({
                                        messageBits: t,
                                        balance: this.props.data.currentUser.bitsBalance,
                                        cheerMinimumBits: this.props.data.user.cheer.settings.cheerMinimumBits,
                                        emoteMinimumBits: this.props.data.user.cheer.settings.emoteMinimumBits,
                                        inputValue: this.state.value
                                    })).canSpend ? this.props.sendCheer ? (this.setState({
                                        isSendingBits: !0
                                    }), t.total >= ke.l ? [4, new Promise(function(e) {
                                        var t = setTimeout(e, ke.m.UNDO_PROMPT_DURATION),
                                            n = function(n) {
                                                void 0 === n && (n = !1), clearTimeout(t), r.cancelDelayedSend = null, r.confirmDelayedSend = null, e(n)
                                            };
                                        r.cancelDelayedSend = function() {
                                            return n(!0)
                                        }, r.confirmDelayedSend = function() {
                                            return n(!1)
                                        }
                                    })] : [3, 2]) : (s.j.warn("[Chat Input] No GraphQL mutation for sending cheers attached."), [2]) : (s.j.warn("[Chat Input] Spending bits forbidden.", n), [2]) : (s.j.warn("[Chat Input] Cheer Settings are undefined."), [2]) : (s.j.warn("[Chat Input] Cheer is null."), [2]) : (s.j.warn("[Chat Input] User is null."), [2]) : (this.sendRegularMessage(), [2])) : (s.j.debug("[ChatInput] Supressing chat message send. Input failed to pass validation.", {
                                        hasSendableInput: e,
                                        value: this.state.value
                                    }), [2]) : (s.j.warn("[ChatInput] Attempt to send a message before channel ID"), [2]) : (this.props.login(), [2]);
                                case 1:
                                    if (i.sent()) return this.setState({
                                        isSendingBits: !1
                                    }), this.chatInputRef.focus(), [2];
                                    i.label = 2;
                                case 2:
                                    a = Object(me.a)(), i.label = 3;
                                case 3:
                                    return i.trys.push([3, 5, , 6]), [4, this.props.sendCheer({
                                        variables: {
                                            input: {
                                                id: a,
                                                targetID: this.props.channelID,
                                                bits: t.total,
                                                content: this.state.value
                                            }
                                        }
                                    })];
                                case 4:
                                    return i.sent(), [3, 6];
                                case 5:
                                    return i.sent(), this.setState({
                                        isSendingBits: !1
                                    }), this.chatInputRef.focus(), [2];
                                case 6:
                                    return this.setState({
                                        isSendingBits: !1,
                                        showCard: ot.None,
                                        value: ""
                                    }), this.chatInputRef.focus(), this.autocompleteInputRef.setValue(""), [2]
                            }
                        })
                    })
                }, n.onEmotePickerToggle = function() {
                    n.setState(function(e) {
                        return e.messageCheers.length ? e : {
                            showCard: e.showCard === ot.Emotes ? ot.None : ot.Emotes
                        }
                    })
                }, n.onBitsIconClick = function() {
                    n.state.showCard === ot.Bits ? n.trackBitsCardInteraction(Z.a.CloseCard) : n.trackBitsCardInteraction(Z.a.OpenCard), n.setState({
                        showCard: n.state.showCard === ot.Bits ? ot.None : ot.Bits
                    })
                }, n.onShowViewersList = function() {
                    n.state.showCard !== ot.None && n.setState({
                        showCard: ot.None
                    }), n.props.showViewersList()
                }, n.onBitsClose = function() {
                    n.state.showCard === ot.Bits && n.setState({
                        showCard: ot.None
                    }), n.trackBitsCardInteraction(Z.a.CloseCard)
                }, n.onClickEmote = function(e) {
                    var t = n.state.value;
                    n.state.value && n.state.value.length > 0 && !n.state.value.endsWith(" ") && (t += " "), t += e + " ", n.autocompleteInputRef.setValue(t)
                }, n.onEmotePickerDataLoaded = function(e) {
                    e && n.setState({
                        showEmotePickerButton: !0
                    })
                }, n.trackBitsCardInteraction = function(e, t) {
                    var i = {
                        actionName: e,
                        emoteType: t && t.emoteType,
                        emoteLevel: t && t.emoteLevel,
                        location: t && t.location,
                        displayedBalance: n.props.data && n.props.data.currentUser && n.props.data.currentUser.bitsBalance || 0
                    };
                    Object(Z.h)(i)
                }, n.resetAndUpdateRenderSentChatMessageEvent = function() {
                    n.props.latencyTracking.resetCustomEvents(he.a.Chat);
                    var e = n.props.latencyTracking.registerCustomEvent({
                        benchmark: 400,
                        group: he.a.Chat,
                        key: he.b.ChatRenderSent,
                        label: he.c.RenderSent,
                        start: he.d.Registration
                    });
                    n.props.updateRenderSentChatMessageEvent(e)
                }, n.state = {
                    chatMembers: t.activeChatters.getActiveChatters(),
                    hasInteractedOrPageload: t.firstPageLoaded,
                    hasSeenAndRejectedEmbedPrompt: !1,
                    isSendingBits: !1,
                    messageCheers: [],
                    showBuyBits: !1,
                    showCard: ot.None,
                    showEmotePickerButton: !!t.authToken,
                    showRaidsSettingsTooltip: !1,
                    showRaidsFollowerOnlyTooltip: !1,
                    showAutomodSettingsTooltip: !1,
                    value: ""
                }, n
            }
            return i.__extends(t, e), t.prototype.componentWillMount = function() {
                this.syncMembersHandle = setInterval(this.syncMembers, 250)
            }, t.prototype.componentWillUpdate = function(e, t) {
                if (t.value !== this.state.value && this.props.bitsConfig) {
                    var n = [];
                    Object(ut.c)(t.value, this.props.bitsConfig).forEach(function(e) {
                        e.type === Q.a.Emote && n.push(e.content)
                    }), n.length && t.showCard === ot.Emotes && this.setState({
                        showCard: ot.None
                    }), this.setState({
                        messageCheers: n
                    })
                }
            }, t.prototype.componentWillReceiveProps = function(e) {
                var t = this;
                !this.props.firstPageLoaded && e.firstPageLoaded && (this.setState({
                    hasInteractedOrPageload: !0
                }), this.props.isCurrentUserModerator && Object(Tt.a)() && s.l.get("automodChatCogTooltipSeenNumTimes", 0) < 3 && this.setState({
                    showAutomodSettingsTooltip: !0
                }, function() {
                    setTimeout(t.incrementAndHideAutomodTooltipCounter, 15e3)
                })), this.props.isCurrentUserModerator && !this.props.raidReceived && e.raidReceived && s.l.get("raidsModerationTooltipsSeenNumTimes", 0) < Mt && this.setState({
                    showRaidsSettingsTooltip: !0,
                    showRaidsFollowerOnlyTooltip: !0
                }, function() {
                    setTimeout(function() {
                        var e = s.l.get("raidsModerationTooltipsSeenNumTimes", 0) + 1;
                        s.l.set("raidsModerationTooltipsSeenNumTimes", e), t.setState({
                            showRaidsSettingsTooltip: !1
                        })
                    }, 2e4)
                })
            }, t.prototype.componentWillUnmount = function() {
                this.syncMembersHandle && (clearInterval(this.syncMembersHandle), this.syncMembersHandle = 0)
            }, t.prototype.render = function() {
                if (this.props.hidden) return null;
                if (this.state.hasSeenAndRejectedEmbedPrompt) return a.createElement(b._8, {
                    className: "chat-input",
                    padding: {
                        x: 2,
                        bottom: 2
                    }
                }, a.createElement(b.Q, {
                    "data-test-selector": "chat-embed-denied-text"
                }, Object(s.d)("You rejected the prompt to send messages in this embedded version of Twitch Chat. If this was done in error, please refresh the page.", "ChatInput")), this.renderButtonContainer(!0));
                var e = [];
                this.props.bitsConfig && e.push(a.createElement(b.w, {
                    key: "bits",
                    icon: b._25.Bits,
                    ariaLabel: Object(s.d)("Bits", "ChatInput"),
                    type: b.y.Secondary,
                    onClick: this.onBitsIconClick,
                    "data-a-target": "bits-button"
                })), this.state.showEmotePickerButton && e.push(a.createElement(wt.b, {
                    key: "emote-picker",
                    onClick: this.onEmotePickerToggle
                }));
                var t = null;
                this.state.hasInteractedOrPageload && (t = a.createElement(wt.c, {
                    channelOwnerID: this.props.channelID,
                    onClickEmote: this.onClickEmote,
                    onLoad: this.onEmotePickerDataLoaded,
                    toggleVisibility: this.onEmotePickerToggle,
                    visible: this.state.showCard === ot.Emotes
                }));
                var n = null;
                this.state.hasInteractedOrPageload && this.props.bitsConfig && (n = a.createElement(st, {
                    bitsConfig: this.props.bitsConfig,
                    channelID: this.props.channelID,
                    channelLogin: this.props.channelLogin,
                    currentCheers: this.state.messageCheers,
                    isSending: this.state.isSendingBits,
                    isStaff: this.props.isStaff,
                    onCancelSend: this.cancelDelayedSend,
                    onClickCheermote: this.onClickEmote,
                    onConfirmSend: this.confirmDelayedSend,
                    onUserClose: this.onBitsClose,
                    trackBitsCardInteraction: this.trackBitsCardInteraction,
                    visible: this.state.showCard === ot.Bits
                }));
                var i = null;
                return this.props.data.user && this.props.data.user.cheer && this.props.data.user.cheer.hashtags && this.state.messageCheers.length > 0 && (i = a.createElement(ct, {
                    hashTags: this.props.data.user.cheer.hashtags
                })), a.createElement(b._8, {
                    className: "chat-input",
                    padding: {
                        x: 2,
                        bottom: 2
                    }
                }, a.createElement(b._2, {
                    position: b._15.Relative,
                    zIndex: b._62.Default
                }, a.createElement("div", {
                    onMouseEnter: this.onMouseEnterInput
                }, t, n, a.createElement(ge.b, {
                    componentType: ge.a.TextArea,
                    suggestionSource: ge.c.Chat,
                    onValueUpdate: this.onMessageValueUpdate,
                    onFocus: this.onInputFocus,
                    onKeyDown: this.onKeyDown,
                    componentRefDelegate: this.setChatInputRef,
                    refDelegate: this.setAutocompleteInputRef,
                    paddingRight: 30 * e.length,
                    placeholder: Object(s.d)("Send a message", "ChatInput"),
                    noResize: !0,
                    "data-a-target": "chat-input",
                    "data-test-selector": "chat-input",
                    disabled: this.state.isSendingBits,
                    containerElement: this.props.containerElement
                }, a.createElement(ge.d, {
                    emotes: this.props.emotes
                }), a.createElement(vt, {
                    channelDisplayName: this.props.channelDisplayName,
                    channelLogin: this.props.channelLogin,
                    chatMembers: this.state.chatMembers
                }), i), a.createElement(b._8, {
                    position: b._15.Absolute,
                    attachRight: !0,
                    attachTop: !0
                }, e))), this.renderButtonContainer(!1))
            }, t.prototype.renderButtonContainer = function(e) {
                return void 0 === e && (e = !1), a.createElement(b._8, {
                    className: "chat-input__buttons-container",
                    display: b.R.Flex,
                    justifyContent: b._7.Between,
                    margin: {
                        top: 1
                    }
                }, a.createElement(b._8, {
                    display: b.R.Flex,
                    flexDirection: b.T.Row
                }, a.createElement(b._8, {
                    position: b._15.Relative
                }, a.createElement(mt.a, {
                    onToggle: this.onChatSettingsToggle,
                    channelLogin: this.props.channelLogin,
                    isHostMode: this.props.isHostMode,
                    authToken: this.props.authToken,
                    isCurrentUserModerator: this.props.isCurrentUserModerator,
                    onChatCommand: this.onChatCommand,
                    isPopout: this.props.isPopout,
                    isEmbedded: this.props.isEmbedded,
                    channelID: this.props.channelID,
                    sawFirstRaidPrompt: this.state.showRaidsFollowerOnlyTooltip,
                    containerElement: this.props.containerElement
                }), this.renderChatCogTooltips()), a.createElement(b.w, {
                    ariaLabel: Object(s.d)("Viewer list", "ChatInput"),
                    "data-a-target": "chat-viewer-list",
                    "data-test-selector": "chat-viewer-list",
                    icon: b._25.ViewerList,
                    onClick: this.onShowViewersList
                })), this.renderSendButton(e))
            }, t.prototype.renderSendButton = function(e) {
                var t;
                return void 0 === e && (e = !1), t = this.state.value && null !== Object(_t.q)(this.state.value) ? Object(s.d)("Whisper", "ChatInput") : Object(s.d)("Chat", "ChatInput"), a.createElement(b.v, {
                    onClick: this.onMessageSend,
                    "data-a-target": "chat-send-button",
                    "data-test-selector": "chat-send-button",
                    disabled: this.state.isSendingBits || e
                }, t)
            }, t.prototype.renderChatCogTooltips = function() {
                return this.state.showRaidsSettingsTooltip ? a.createElement(kt, null) : this.state.showAutomodSettingsTooltip && Object(Tt.a)() ? a.createElement(bt, null) : null
            }, t.prototype.sendRegularMessage = function() {
                this.props.onSendMessage && this.props.onSendMessage(this.state.value) && (this.trackChatEvent(), this.trackMentions(), this.autocompleteInputRef.setValue(""), this.setState({
                    showCard: ot.None
                }))
            }, t.prototype.trackChatEvent = function() {
                Object(St.a)({
                    channelID: this.props.channelID,
                    channelLogin: this.props.channelLogin,
                    isHostMode: this.props.isHostMode,
                    player: this.props.isPopout ? yt.a.Embed : yt.a.Web,
                    subOnlyMode: this.props.isSubsOnlyModeEnabled
                })
            }, t.prototype.trackMentions = function() {
                if (this.state.value && this.props.sessionUser)
                    for (var e = 0, t = Object(Ct.c)(this.state.value, this.props.sessionUser.displayName, !1); e < t.length; e++) {
                        var n = t[e];
                        n.type === Q.a.Mention && n.content.recipient !== n.content.sender && Object(Et.a)({
                            channelLogin: this.props.channelLogin,
                            isHostMode: this.props.isHostMode,
                            mentionedUserDisplayName: n.content.recipient,
                            userLogin: this.props.sessionUser.login
                        })
                    } else s.j.warn("[ChatInput] trackMentions was called in a nonsensical state.")
            }, t
        }(a.Component);
        var jt = Object(de.compose)(Object(l.a)(Ot, {
                name: "sendCheer"
            }), Object(l.a)(Rt), Object(Dt.d)("ChatInput", {
                autoReportInteractive: !0
            }), Object(ae.b)(function(e) {
                return {
                    isSubsOnlyModeEnabled: e.chat.subsOnlyMode,
                    sessionUser: Object(re.c)(e)
                }
            }, function(e) {
                return Object(o.b)({
                    login: function() {
                        return Object(pe.f)(ue.a.Chat)
                    },
                    updateRenderSentChatMessageEvent: pt.U
                }, e)
            }))(xt),
            Lt = n("kpSd"),
            At = (n("HuX0"), function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onClickConfirm = function() {
                        n.markRoomSeen(), n.setState({
                            showRules: !1
                        })
                    };
                    var i = n.getRoomsSeen();
                    return n.state = {
                        showRules: n.props.chatRules && n.props.chatRules.length > 0 && !i[n.props.channelLogin]
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return this.state.showRules ? a.createElement(b._8, {
                        className: "chat-rules",
                        position: b._15.Relative
                    }, a.createElement(b._35, {
                        border: !0,
                        background: b.n.Base,
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(b._8, {
                        padding: 1
                    }, a.createElement(b._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(b.Q, {
                        type: b._49.H6
                    }, Object(s.d)("Chat Rules:", "ChatRules"))), a.createElement(b._8, null, a.createElement("ul", null, this.props.chatRules.map(function(e, t) {
                        return a.createElement("li", {
                            key: t
                        }, e)
                    }))), a.createElement(b._8, {
                        margin: {
                            top: 1
                        },
                        display: b.R.Flex,
                        justifyContent: b._7.Center
                    }, a.createElement(b.v, {
                        size: b.z.Small,
                        onClick: this.onClickConfirm
                    }, Object(s.d)("Ok, got it!", "ChatRules")))))) : null
                }, t.prototype.getRoomsSeen = function() {
                    return s.l.get("chat_rules_shown", {})
                }, t.prototype.markRoomSeen = function() {
                    var e = this.getRoomsSeen();
                    e[this.props.channelLogin] = !0, s.l.set("chat_rules_shown", e)
                }, t
            }(a.Component)),
            Ft = n("ass3"),
            Ut = 3;
        var Bt = n("O9wU"),
            Pt = (n("Bsuy"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.usernameClickHandler = function(e) {
                        var n = e.currentTarget.getAttribute("data-username");
                        n && t.props.onUsernameClick(n, Bt.a.viewer_list, "", e.currentTarget.getBoundingClientRect().bottom)
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.props,
                        n = t.viewers,
                        i = t.header,
                        r = n.map(function(t, n) {
                            return a.createElement("div", {
                                key: "chat-viewers-list-item-" + t,
                                role: "listitem",
                                "aria-setsize": -1,
                                "aria-posinset": n + 1
                            }, a.createElement("button", {
                                className: "chat-viewers-list__button",
                                "data-username": t,
                                onClick: e.usernameClickHandler
                            }, a.createElement(b.Q, {
                                transform: b._48.Capitalize
                            }, t)))
                        }),
                        o = "chat-viewers-list-header-" + i;
                    return a.createElement(b._8, {
                        className: "chat-viewers-list",
                        padding: {
                            bottom: 2
                        }
                    }, a.createElement("div", {
                        id: o
                    }, a.createElement(b.Q, {
                        transform: b._48.Uppercase
                    }, i)), a.createElement("div", {
                        role: "list",
                        "aria-labelledby": o
                    }, r))
                }, t
            }(a.Component)),
            Vt = (n("gwjw"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        filter: "",
                        inputValue: "",
                        filteredViewers: {},
                        viewersPage: 0,
                        renderedViewers: [],
                        isLoading: !1
                    }, t.filterTimeout = 0, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.loadMore = function() {
                        return i.__awaiter(t, void 0, void 0, function() {
                            var e = this;
                            return i.__generator(this, function(t) {
                                switch (t.label) {
                                    case 0:
                                        return [4, new Promise(function(t) {
                                            e.setState(function(t) {
                                                return {
                                                    renderedViewers: e.getRenderedViewers(t.filteredViewers.viewers, t.viewersPage + 1),
                                                    viewersPage: t.viewersPage + 1
                                                }
                                            }, function() {
                                                t()
                                            })
                                        })];
                                    case 1:
                                        return t.sent(), [2]
                                }
                            })
                        })
                    }, t.getRenderedViewers = function(e, t) {
                        return e ? e.slice(0, 100 * (t || 1)) : []
                    }, t.handleFilter = function(e, n) {
                        var i = function(e, t) {
                                if (!t) return e;
                                var n = Object.assign({}, e);
                                return Object.keys(n).forEach(function(e) {
                                    var i = n[e];
                                    Array.isArray(i) && (n[e] = i.filter(function(e) {
                                        return -1 !== e.toLowerCase().indexOf(t)
                                    }))
                                }), n
                            }(n, e),
                            a = t.getRenderedViewers(i.viewers, 1);
                        t.scroll && t.scroll.scrollToTop(), t.setState({
                            filteredViewers: i,
                            isLoading: !1,
                            renderedViewers: a,
                            viewersPage: 1
                        })
                    }, t.handleFilterChange = function(e) {
                        var n = e.target.value,
                            i = n.toLowerCase().trim();
                        t.setState({
                            filter: i,
                            inputValue: n,
                            isLoading: !0
                        }), clearTimeout(t.filterTimeout), t.filterTimeout = setTimeout(function() {
                            t.handleFilter(i, t.props.viewers)
                        }, 350)
                    }, t.onKeyDown = function(e) {
                        e.keyCode === ce.a.Esc && t.props.closeViewersList()
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.handleFilter(this.state.filter, e.viewers)
                }, t.prototype.render = function() {
                    var e = [],
                        t = this.state.filteredViewers;
                    t.staff && t.staff.length > 0 && e.push(a.createElement(Pt, {
                        key: "chat-viewers-list-staff",
                        header: Object(s.d)("Staff", "ChatViewers"),
                        viewers: t.staff,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.admins && t.admins.length > 0 && e.push(a.createElement(Pt, {
                        key: "chat-viewers-list-admins",
                        header: Object(s.d)("Admins", "ChatViewers"),
                        viewers: t.admins,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.global_mods && t.global_mods.length > 0 && e.push(a.createElement(Pt, {
                        key: "chat-viewers-list-global-mods",
                        header: Object(s.d)("Global Moderators", "ChatViewers"),
                        viewers: t.global_mods,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.moderators && t.moderators.length > 0 && e.push(a.createElement(Pt, {
                        key: "chat-viewers-list-moderators",
                        header: Object(s.d)("Moderators", "ChatViewers"),
                        viewers: t.moderators,
                        onUsernameClick: this.props.onShowViewerCard
                    })), t.viewers && t.viewers.length > 0 && e.push(a.createElement(Pt, {
                        key: "chat-viewers-list-viewers",
                        "data-test-selector": "chat-viewers-list-viewers",
                        header: Object(s.d)("Viewers", "ChatViewers"),
                        viewers: this.state.renderedViewers,
                        onUsernameClick: this.props.onShowViewerCard
                    }));
                    var n = this.props.isLoading || this.state.isLoading,
                        i = n && a.createElement(b._8, {
                            className: "chat-viewers__loading",
                            display: b.R.Flex,
                            alignItems: b.c.Center,
                            justifyContent: b._7.Center,
                            zIndex: b._62.Above,
                            position: b._15.Absolute,
                            attachTop: !0,
                            attachBottom: !0,
                            attachLeft: !0,
                            attachRight: !0
                        }, a.createElement(b._10, null));
                    return a.createElement(b._2, {
                        className: "chat-viewers__container",
                        fullWidth: !0,
                        fullHeight: !0,
                        flexShrink: 0,
                        zIndex: b._62.Default
                    }, a.createElement("section", {
                        "aria-labelledby": "chat-viewers__header"
                    }, a.createElement(b._8, {
                        className: "chat-viewers__pane",
                        display: b.R.Flex,
                        flexDirection: b.T.Column,
                        flexWrap: b.U.NoWrap,
                        position: b._15.Absolute,
                        attachBottom: !0,
                        attachLeft: !0,
                        attachRight: !0
                    }, a.createElement(b._8, {
                        className: "chat-viewers__header",
                        display: b.R.Flex,
                        justifyContent: b._7.Center,
                        alignItems: b.c.Center,
                        padding: {
                            y: 1
                        },
                        flexShrink: 0
                    }, a.createElement(b._8, {
                        position: b._15.Absolute,
                        attachLeft: !0,
                        margin: {
                            left: 1
                        }
                    }, a.createElement(b.w, {
                        icon: b._25.Close,
                        ariaLabel: Object(s.d)("Close", "ChatViewers"),
                        "data-a-target": "chat-viewer-list",
                        onClick: this.props.closeViewersList
                    })), a.createElement("p", {
                        "data-a-target": "chat-viewers_header-channel-name",
                        id: "chat-viewers__header"
                    }, Object(s.d)("Viewer List", "ChatViewers"))), a.createElement(b._8, {
                        display: b.R.Flex,
                        flexDirection: b.T.Column,
                        flexWrap: b.U.NoWrap,
                        fullHeight: !0
                    }, a.createElement(b._8, {
                        className: "chat-viewers__filter",
                        margin: {
                            x: 2,
                            y: 1
                        }
                    }, a.createElement(b._4, {
                        type: b._5.Search,
                        name: "viewers-filter",
                        placeholder: Object(s.d)("Filter Viewers", "ChatViewers"),
                        readOnly: this.props.isLoading,
                        onChange: this.handleFilterChange,
                        value: this.state.inputValue,
                        autoFocus: !0,
                        onKeyDown: this.onKeyDown
                    })), a.createElement(N.b, {
                        className: "chat-viewers__list",
                        scrollRef: this.saveScrollRef,
                        suppressScrollX: !0,
                        scrollContentClassName: "chat-viewers__scroll-container"
                    }, a.createElement(b._8, {
                        padding: {
                            x: 2
                        }
                    }, e, a.createElement(N.a, {
                        key: this.state.filter,
                        enabled: !n,
                        loadMore: this.loadMore
                    }))), i))))
                }, t
            }(a.Component)),
            Wt = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.state = {
                        viewers: {},
                        viewerCount: 0,
                        isLoading: !1
                    }, n.logger = s.j.withCategory("chat-viewers"), n
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    this.props.channelLogin !== e.channelLogin && this.updateViewers(e.channelLogin)
                }, t.prototype.componentDidMount = function() {
                    return i.__awaiter(this, void 0, void 0, function() {
                        return i.__generator(this, function(e) {
                            return this.updateViewers(this.props.channelLogin), [2]
                        })
                    })
                }, t.prototype.render = function() {
                    return a.createElement(Vt, {
                        channelLogin: this.props.channelLogin,
                        closeViewersList: this.props.closeViewersList,
                        viewers: this.state.viewers,
                        viewerCount: this.state.viewerCount,
                        isLoading: this.state.isLoading,
                        onShowViewerCard: this.props.onShowViewerCard
                    })
                }, t.prototype.updateViewers = function(e) {
                    return i.__awaiter(this, void 0, void 0, function() {
                        var t, n, a, r;
                        return i.__generator(this, function(o) {
                            switch (o.label) {
                                case 0:
                                    return this.props.latencyTracking.resetCustomEvents(he.a.ViewersList), t = this.props.latencyTracking.registerCustomEvent({
                                        benchmark: 3e3,
                                        group: he.a.ViewersList,
                                        key: he.b.ViewersListUpdated,
                                        label: he.c.Updated,
                                        start: he.d.Registration
                                    }), this.setState({
                                        isLoading: !0
                                    }), [4, function(e) {
                                        return i.__awaiter(this, void 0, void 0, function() {
                                            var t, n, a, r;
                                            return i.__generator(this, function(i) {
                                                switch (i.label) {
                                                    case 0:
                                                        t = "https://tmi.twitch.tv/group/user/" + e.toLowerCase() + "/chatters", n = 1, i.label = 1;
                                                    case 1:
                                                        if (!(n <= Ut)) return [3, 7];
                                                        i.label = 2;
                                                    case 2:
                                                        return i.trys.push([2, 5, , 6]), [4, fetch(t, {
                                                            method: "GET",
                                                            headers: {
                                                                Accept: "application/json; charset=UTF-8",
                                                                "content-type": "application/json; charset=UTF-8"
                                                            }
                                                        })];
                                                    case 3:
                                                        return [4, i.sent().json()];
                                                    case 4:
                                                        return a = i.sent(), s.j.debug("[update] getViewers done."), [2, a];
                                                    case 5:
                                                        if (r = i.sent(), n === Ut) throw r;
                                                        return [3, 6];
                                                    case 6:
                                                        return ++n, [3, 1];
                                                    case 7:
                                                        return [2]
                                                }
                                            })
                                        })
                                    }(e)];
                                case 1:
                                    return n = o.sent(), a = n ? n.chatters : {}, r = n ? n.chatter_count : 0, this.logger.debug("Updated viewers list with " + r + " viewers"), this.setState({
                                        viewers: a,
                                        viewerCount: r,
                                        isLoading: !1
                                    }), this.props.latencyTracking.reportCustomEvent(t), [2]
                            }
                        })
                    })
                }, t = i.__decorate([Object(Dt.d)("ViewersList", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component);
        var Ht = Object(ae.b)(null, function(e) {
                return Object(o.b)({
                    onShowViewerCard: Ft.d
                }, e)
            })(Wt),
            Gt = n("tjbt"),
            zt = n("ZiSq"),
            qt = (n("jIAO"), n("vLl9"));
        n("dVd7");
        n.d(t, "a", function() {
            return Qt
        }), n.d(t, "b", function() {
            return Yt
        });
        var Qt = "chat-room-header-label",
            Kt = s.j.withCategory("chat-room"),
            $t = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.closeViewersList = function() {
                        n.setState({
                            showViewersList: !1
                        })
                    }, n.showViewersList = function() {
                        n.props.closeRoomPicker && n.props.closeRoomPicker(), n.setState({
                            showViewersList: !0
                        })
                    }, n.onChatInputFocus = function() {
                        n.props.authToken && !n.state.showChatRules && n.setState({
                            showChatRules: !0
                        })
                    }, n.setChatListElement = function(e) {
                        n.setState({
                            chatListElement: e
                        })
                    }, n.shouldHideChatInput = function() {
                        return n.state.showViewersList
                    };
                    var i = new _.c([], [], n.props.channelLogin);
                    return n.state = {
                        showChatRules: !1,
                        showViewersList: !1,
                        badgeSets: i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.props.isBackground) return null;
                    if (this.props.isHidden && !this.props.isPopout) return a.createElement(b._35, {
                        alignItems: b.c.Center,
                        background: b.n.Alt2,
                        borderLeft: !0,
                        display: b.R.Flex,
                        flexDirection: b.T.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        justifyContent: b._7.Center,
                        color: b.K.Base,
                        position: b._15.Relative
                    }, a.createElement(b._8, {
                        margin: {
                            bottom: 1
                        }
                    }, a.createElement(b.Q, {
                        fontSize: b.V.Size5
                    }, Object(s.d)("Chat is hidden.", "ChatRoom"))), a.createElement(b.v, {
                        onClick: this.props.onChatUnhide,
                        "data-a-target": "show-chat-button"
                    }, Object(s.d)("Show Chat", "ChatRoom")));
                    var e = this.props.bitsConfig && this.props.firstPageLoaded && a.createElement(se, {
                            badgeData: this.state.badgeSets,
                            bitsConfig: this.props.bitsConfig,
                            blockLinks: this.props.blockLinks,
                            channelID: this.props.channelID,
                            currentUserDisplayName: this.props.currentUserDisplayName,
                            currentUserLogin: this.props.currentUserLogin,
                            userID: this.props.userID
                        }),
                        t = this.state.showViewersList && a.createElement(Ht, {
                            channelLogin: this.props.channelLogin,
                            closeViewersList: this.closeViewersList
                        }),
                        n = !!this.props.authToken && !this.props.isEmbedded,
                        i = null;
                    return this.state.showChatRules && (i = a.createElement(b._8, {
                        padding: {
                            x: 2
                        }
                    }, a.createElement(At, {
                        chatRules: this.props.chatRules,
                        channelLogin: this.props.channelLogin
                    }))), a.createElement(b._2, {
                        "data-test-selector": "chat-room-component-layout",
                        "data-a-target": this.props.theme === u.a.Dark ? "chat-theme-dark" : "chat-theme-light",
                        flexShrink: 1,
                        flexGrow: 1,
                        display: b.R.Flex,
                        flexDirection: b.T.Column,
                        overflow: b._11.Hidden,
                        fullWidth: !0,
                        fullHeight: !0
                    }, a.createElement("section", {
                        role: "complementary",
                        "aria-labelledby": Qt
                    }, a.createElement(b._35, {
                        background: b.n.Alt2,
                        borderLeft: !this.props.isEmbedded,
                        display: b.R.Flex,
                        flexDirection: b.T.Column,
                        flexWrap: b.U.NoWrap,
                        position: b._15.Relative,
                        flexGrow: 1,
                        fullHeight: !0,
                        overflow: b._11.Hidden,
                        color: b.K.Base,
                        className: "chat-room__content"
                    }, this.props.chatRoomHeader, e, a.createElement(Lt.a, {
                        badgeSets: this.state.badgeSets,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        currentUserLogin: this.props.currentUserLogin,
                        isEmbedded: this.props.isEmbedded,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isCurrentUserStaff: this.props.isStaff,
                        onPushMessage: this.props.onPushMessage,
                        containerRef: this.setChatListElement
                    }), a.createElement(b._8, {
                        className: "chat-room__notifications",
                        position: b._15.Absolute,
                        zIndex: b._62.Default,
                        fullWidth: !0
                    }, this.props.children), i, this.props.isOwnChannel && !this.props.isEmbedded && a.createElement(y, {
                        hostedChannelLogin: this.props.hostedChannelLogin
                    }), t, a.createElement(Gt.a, {
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        onPushMessage: this.props.onPushMessage,
                        onSendMessage: this.props.onSendMessage
                    }), a.createElement(jt, {
                        activeChatters: this.props.activeChatters,
                        authToken: this.props.authToken,
                        bitsConfig: n ? this.props.bitsConfig : void 0,
                        channelDisplayName: this.props.channelDisplayName,
                        channelID: this.props.channelID,
                        channelLogin: this.props.channelLogin,
                        emotes: this.props.emotes,
                        firstPageLoaded: this.props.firstPageLoaded,
                        hidden: this.shouldHideChatInput(),
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isEmbedded: this.props.isEmbedded,
                        isHostMode: this.props.isHostMode,
                        isPopout: this.props.isPopout,
                        isStaff: this.props.isStaff,
                        onChatCommand: this.props.onSendMessage,
                        badgeSets: this.state.badgeSets,
                        userBadges: this.props.userBadges,
                        showViewersList: this.showViewersList,
                        raidReceived: this.props.raidReceived,
                        onSendMessage: this.props.onSendMessage,
                        onInputFocus: this.onChatInputFocus,
                        containerElement: this.state.chatListElement
                    }), a.createElement(b._8, {
                        className: "chat-room__viewer-card",
                        fullHeight: !0,
                        fullWidth: !0,
                        position: b._15.Absolute,
                        "data-a-target": "chat-user-card"
                    }, a.createElement(zt.a, {
                        isPopout: this.props.isPopout,
                        isEmbedded: this.props.isEmbedded,
                        onSendMessage: this.props.onSendMessage,
                        channelID: this.props.channelID
                    })))))
                }, t.prototype.componentWillReceiveProps = function(e) {
                    if (e.data && e.data.badges && e.data.user && e.data.user.broadcastBadges && this.setState({
                            badgeSets: new _.c(e.data.badges, e.data.user.broadcastBadges, e.channelLogin)
                        }), e.data && e.data.user && e.data.user.self && e.data.user.self.displayBadges) {
                        var t = {};
                        e.data.user.self.displayBadges.forEach(function(e) {
                            t[e.setID] = e.version
                        }), s.o.tmi.client.updateChannelBadges(e.channelLogin, t)
                    }
                }, t
            }(a.Component),
            Yt = Object(o.d)(Object(l.a)(qt, {
                options: function(e) {
                    return {
                        name: "data",
                        variables: {
                            channelLogin: e.channelLogin
                        }
                    }
                }
            }), Object(d.a)(function(e) {
                return {
                    query: qt,
                    variables: {
                        channelLogin: e.channelLogin
                    },
                    topic: Object(m.t)(e.userID),
                    type: c.PubsubMessageType.UserBitsBadgeUpdate,
                    skip: !e.userID,
                    mutator: function(t, n) {
                        if (Kt.debug("Received bits-user-update-v1 pubsub update", {
                                data: n,
                                event: t
                            }), !n.badges || t.message_type === le.b.Balance || null === t.data.newest_version || t.data.channel_id !== e.channelID) return n;
                        var i = n.badges.find(function(e) {
                            return e.setID === t.data.set_id && e.version === t.data.newest_version
                        });
                        return void 0 !== i && n.user.self.displayBadges && (n.user.self.displayBadges = n.user.self.displayBadges.map(function(e) {
                            return e.setID === i.setID && e.version !== i.version ? i : e
                        }), (!n.user.self.selectedBadge || i.setID === le.a.Bits && n.user.self.selectedBadge.setID === le.a.Bits) && (n.user.self.selectedBadge = i), n.user.self.selectedBadge && (i.setID !== le.a.Leaderboard || n.user.self.selectedBadge.setID !== le.a.Bits && n.user.self.selectedBadge.setID !== le.a.Leaderboard) || (n.user.self.selectedBadge = i)), n
                    }
                }
            }), r.f)($t)
    },
    ZJYd: function(e, t, n) {
        "use strict";
        t.c = function(e) {
            if (e.type === r.a) return !1;
            return l(e) && null !== e.promotion && e.promotion.type === r.e
        }, t.e = function(e) {
            if (e.type === r.a) return !1;
            return l(e) && null !== e.promotion && (e.promotion.type === r.g || e.promotion.type === r.f)
        }, t.d = l, t.a = function(e) {
            var t = 0,
                n = 0,
                i = 0;
            return e.forEach(function(e) {
                e.cheerAmount && (t = Math.max(t, e.cheerAmount), n = n ? Math.min(n, e.cheerAmount) : e.cheerAmount, i += e.cheerAmount)
            }), {
                total: i,
                smallestCheermote: n,
                largestCheermote: t
            }
        }, t.f = function(e) {
            var t = e.messageBits,
                n = t.total,
                a = t.largestCheermote,
                r = t.smallestCheermote;
            if (n) {
                var s = {
                        cheerAboveMaxBitsPerEmote: a > o.k,
                        totalAboveBalance: n > e.balance,
                        totalBelowCheerMinimum: n < e.cheerMinimumBits,
                        totalBelowEmoteMinimum: r < e.emoteMinimumBits,
                        inputLongerThanMaxBitsMessage: e.inputValue.length > o.j,
                        inputStartsWithCommand: e.inputValue.startsWith("/")
                    },
                    l = Object.keys(s).some(function(e) {
                        return s[e]
                    });
                if (l) return i.__assign({
                    canSpend: !1
                }, s)
            }
            return {
                canSpend: !0
            }
        }, t.b = function(e) {
            var t = e.purchaseUrl;
            if (!t) return;
            e.trackBitsCardInteraction(Object(s.d)(e.bitsAmount), {
                location: e.location
            });
            var n = t.replace("{channelID}", e.channelID),
                i = window.open(n, "Twitch", "width=1024,height=600,scrollbars=yes");
            if (!i || Object(a.a)()) return e.closeAllBits && e.closeAllBits(), void e.trackBitsCardInteraction(s.a.CloseCard, {
                location: e.location
            });
            return i.focus(), i
        };
        var i = n("TToO"),
            a = n("Ouuk"),
            r = n("jxGs"),
            o = n("3iBR"),
            s = n("/LBW");

        function l(e) {
            return e.type === r.b && null !== e.promotion && !!e.promotion
        }
    },
    ZiSq: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("2KeS"),
            r = n("ass3"),
            o = n("TToO"),
            s = n("HW6M"),
            l = n("GiK3"),
            d = n("cvQl"),
            c = n("+xm8"),
            u = n("V5M+"),
            m = n("f2i/"),
            p = n("Aj/L"),
            h = n("oSFp"),
            g = n("6sO2"),
            f = n("E9Qg"),
            v = n("+Znq"),
            b = n("5s0/"),
            k = n("7vx8"),
            y = n("TeXj"),
            _ = n("Odds");
        n("fbnZ");

        function C(e) {
            e.stopPropagation()
        }
        var S, E = function(e) {
                return l.createElement(_._2, {
                    display: _.R.InlineBlock
                }, l.createElement("div", {
                    className: "viewer-card-drag-cancel",
                    onMouseDown: C
                }, e.children))
            },
            N = n("O0Qc"),
            T = n("CSlQ"),
            w = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isIgnored: !1
                    }, t.ignoreUser = function() {
                        t.props.sendMessageToTMI(Object(N.h)(t.props.targetLogin)), t.setState({
                            isIgnored: !0
                        })
                    }, t.unignoreUser = function() {
                        t.props.sendMessageToTMI(Object(N.j)(t.props.targetLogin)), t.setState({
                            isIgnored: !1
                        })
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isIgnored) {
                        var e = Object(g.d)("Unblock User", "ViewerCardIgnoreAction");
                        return l.createElement(_._52, {
                            key: "Ignore",
                            label: e,
                            direction: _._54.Top,
                            align: _._53.Right,
                            offsetX: "15%"
                        }, l.createElement(_.w, {
                            icon: _._25.Unignore,
                            ariaLabel: Object(g.d)("Unblock {displayName}", {
                                displayName: this.props.targetDisplayName
                            }, "ViewerCardIgnoreAction"),
                            onClick: this.unignoreUser,
                            overlay: !0
                        }))
                    }
                    var t = Object(g.d)("Block User", "ViewerCardIgnoreAction");
                    return l.createElement(_._52, {
                        key: "Ignore",
                        label: t,
                        direction: _._54.Top,
                        align: _._53.Right,
                        offsetX: "15%"
                    }, l.createElement(_.w, {
                        icon: _._25.Ignore,
                        ariaLabel: Object(g.d)("Block {displayName}", {
                            displayName: this.props.targetDisplayName
                        }, "ViewerCardIgnoreAction"),
                        onClick: this.ignoreUser,
                        overlay: !0
                    }))
                }, t = o.__decorate([Object(T.d)("ViewerCardIgnoreAction")], t)
            }(l.Component),
            D = n("oIkB"),
            R = n("Dc1A"),
            O = n("1Eny"),
            I = n("zVM8"),
            M = "10 minutes",
            x = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onBanClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(D.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t.onTimeoutClick = function() {
                        var e = t.props,
                            n = e.banUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(D.a)({
                            channelID: i,
                            bannedUserLogin: a,
                            expiresIn: M
                        }))
                    }, t.onUnbanClick = function() {
                        var e = t.props,
                            n = e.unbanUser,
                            i = e.channelID,
                            a = e.userLogin;
                        n(Object(D.a)({
                            channelID: i,
                            bannedUserLogin: a
                        }))
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    return l.createElement(_._8, {
                        display: _.R.InlineFlex
                    }, this.getContent())
                }, t.prototype.getContent = function() {
                    return this.props.data.loading || this.props.data.error ? [this.renderBanAction(!0), this.renderTimeoutAction(!0)] : this.props.data.chatRoomBanStatus ? this.props.data.chatRoomBanStatus.isPermanent ? [this.renderUnbanAction(), this.renderTimeoutAction(!0)] : [this.renderBanAction(), this.renderUntimeoutAction()] : [this.renderBanAction(), this.renderTimeoutAction()]
                }, t.prototype.renderTimeoutAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(g.d)("Timeout User", "ViewerCardModActions");
                    return l.createElement(_._8, {
                        key: "Timeout",
                        padding: {
                            right: 1
                        }
                    }, l.createElement(_._52, {
                        label: t,
                        direction: _._54.Top,
                        align: _._53.Left,
                        offsetX: "20%"
                    }, l.createElement(_.w, {
                        icon: _._25.Timeout,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onTimeoutClick
                    })))
                }, t.prototype.renderUntimeoutAction = function() {
                    var e = Object(g.d)("Untimeout User", "ViewerCardModActions");
                    return l.createElement(_._8, {
                        key: "Untimeout",
                        padding: {
                            right: 1
                        }
                    }, l.createElement(_._52, {
                        label: e,
                        direction: _._54.Top,
                        align: _._53.Left,
                        offsetX: "20%"
                    }, l.createElement(_.w, {
                        icon: _._25.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t.prototype.renderBanAction = function(e) {
                    void 0 === e && (e = !1);
                    var t = Object(g.d)("Ban User", "ViewerCardModActions");
                    return l.createElement(_._8, {
                        key: "Ban",
                        padding: {
                            right: 1
                        }
                    }, l.createElement(_._52, {
                        label: t,
                        direction: _._54.Top,
                        align: _._53.Left,
                        offsetX: "20%"
                    }, l.createElement(_.w, {
                        icon: _._25.Ban,
                        disabled: e,
                        ariaLabel: t,
                        onClick: this.onBanClick
                    })))
                }, t.prototype.renderUnbanAction = function() {
                    var e = Object(g.d)("Unban User", "ViewerCardModActions");
                    return l.createElement(_._8, {
                        key: "Unban",
                        padding: {
                            right: 1
                        }
                    }, l.createElement(_._52, {
                        label: e,
                        direction: _._54.Top,
                        align: _._53.Left,
                        offsetX: "20%"
                    }, l.createElement(_.w, {
                        icon: _._25.FollowCheck,
                        ariaLabel: e,
                        onClick: this.onUnbanClick
                    })))
                }, t = o.__decorate([Object(T.d)("ViewerCardModActions"), Object(k.a)(I, {
                    options: function(e) {
                        return {
                            variables: {
                                targetUserID: e.userID,
                                channelID: e.channelID
                            },
                            fetchPolicy: "cache-and-network"
                        }
                    }
                }), Object(k.a)(R, {
                    name: "banUser",
                    options: function(e) {
                        return {
                            update: function(t, n) {
                                ! function(e, t, n) {
                                    var i = e.readQuery({
                                        query: I,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        }
                                    });
                                    i && (t && t.data && (i.chatRoomBanStatus = {
                                        isPermanent: !0,
                                        __typename: "ChatRoomBanStatus"
                                    }), e.writeQuery({
                                        query: I,
                                        variables: {
                                            targetUserID: n.userID,
                                            channelID: n.channelID
                                        },
                                        data: i
                                    }))
                                }(t, n, e)
                            }
                        }
                    }
                }), Object(k.a)(O, {
                    name: "unbanUser",
                    options: function(e) {
                        return {
                            update: function(t) {
                                ! function(e, t) {
                                    var n = e.readQuery({
                                        query: I,
                                        variables: {
                                            targetUserID: t.userID,
                                            channelID: t.channelID
                                        }
                                    });
                                    if (n) {
                                        var i = o.__assign({}, n, {
                                            chatRoomBanStatus: null
                                        });
                                        e.writeQuery({
                                            query: I,
                                            variables: {
                                                targetUserID: t.userID,
                                                channelID: t.channelID
                                            },
                                            data: i
                                        })
                                    }
                                }(t, e)
                            }
                        }
                    }
                })], t)
            }(l.Component),
            j = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.modUser = function() {
                        n.props.sendMessageToTMI(Object(N.i)(n.props.targetLogin)), n.setState({
                            isModerator: !0
                        })
                    }, n.unmodUser = function() {
                        n.props.sendMessageToTMI(Object(N.k)(n.props.targetLogin)), n.setState({
                            isModerator: !1
                        })
                    }, n.state = {
                        isModerator: !1
                    }, n
                }
                return o.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (this.state.isModerator) {
                        var e = Object(g.d)("Unmod User", "ViewerCardOwnerActions");
                        return l.createElement(_._8, {
                            key: "OP",
                            display: _.R.InlineFlex,
                            padding: {
                                right: 1
                            }
                        }, l.createElement(_._52, {
                            label: e,
                            direction: _._54.Top,
                            align: _._53.Center
                        }, l.createElement(_.w, {
                            icon: _._25.FollowCheck,
                            ariaLabel: e,
                            onClick: this.unmodUser
                        })))
                    }
                    e = Object(g.d)("Mod User", "ViewerCardOwnerActions");
                    return l.createElement(_._8, {
                        key: "OP",
                        display: _.R.InlineFlex,
                        padding: {
                            right: 1
                        }
                    }, l.createElement(_._52, {
                        label: e,
                        direction: _._54.Top,
                        align: _._53.Center
                    }, l.createElement(_.w, {
                        icon: _._25.OP,
                        ariaLabel: e,
                        onClick: this.modUser
                    })))
                }, t = o.__decorate([Object(T.d)("ViewerCardOwnerActions")], t)
            }(l.Component),
            L = n("O9wU"),
            A = n("phns"),
            F = n("mw/a"),
            U = n("daN3"),
            B = n("37Pp"),
            P = n("CwIZ"),
            V = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getSubscribeButton = function() {
                        var e = t.props.subscriptionProducts[0],
                            n = Object(g.d)("Gift All-Access Pass", "EsportsGiftDescription");
                        return l.createElement(U.a, {
                            subProductId: e.id,
                            giftRecipient: t.props.giftRecipient,
                            checkoutURL: e.url,
                            buttonMessage: n,
                            purchase: e.price,
                            onClick: t.reportGiftCheckoutAction
                        })
                    }, t.reportGiftCheckoutAction = function() {
                        t.reportSubMenuAction({
                            action: P.a.BuyGiftSub,
                            checkoutButtonTier: t.props.subscriptionProducts[0].price,
                            giftRecipient: t.props.giftRecipient ? t.props.giftRecipient : null
                        })
                    }, t.reportSubMenuAction = function(e) {
                        t.props.reportSubMenuAction && t.props.reportSubMenuAction(e)
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return l.createElement(_._8, null, l.createElement(_._8, {
                        display: _.R.Flex,
                        justifyContent: _._7.Between,
                        alignItems: _.c.Center,
                        fullWidth: !0
                    }, l.createElement(_.Q, {
                        bold: !0,
                        type: _._49.H5
                    }, Object(g.d)("Gift the Overwatch League All-Access Pass", "EsportsGiftDescription")), l.createElement(_.v, {
                        type: _.B.Text,
                        icon: _._25.AngleLeft,
                        onClick: this.props.onBack,
                        "data-test-selector": "sub-gift-select-back-button"
                    }, l.createElement(_._8, {
                        alignItems: _.c.Center,
                        display: _.R.InlineFlex
                    }, l.createElement(_.Q, null, Object(g.d)("Back", "EsportsGiftDescription"))))), l.createElement(_._8, {
                        className: "channel-header__subscription-balloon-options"
                    }, l.createElement(_._8, null, l.createElement(_._8, {
                        margin: {
                            bottom: 1
                        }
                    }, l.createElement(_.Q, null, Object(g.d)("Exclusive Command Center stream access plus Passholder-only chat, Post-match Q&A and match-analysis videos by players, and 23 Twitch emotes, 2 Twitch badges and more!", "EsportsGiftDescription"))), l.createElement(B.a, {
                        subscriptionProduct: this.props.subscriptionProducts[0],
                        isGift: !0,
                        isOneTime: !0
                    }), l.createElement(_._8, {
                        margin: {
                            top: 1,
                            right: 1
                        }
                    }, this.getSubscribeButton()))))
                }, t
            }(l.Component),
            W = n("YH6m"),
            H = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.onGiftSelect = function() {
                        t.props.onGiftSelect && t.props.onGiftSelect()
                    }, t.onSelectTierTab = function(e) {
                        t.props.onSelectTierTab && t.props.onSelectTierTab(e)
                    }, t.reportSubMenuAction = function(e) {
                        t.props.reportSubMenuAction && t.props.reportSubMenuAction(e)
                    }, t
                }
                return o.__extends(t, e), t.prototype.render = function() {
                    return this.props.isEsportGiftingApproved ? l.createElement(V, {
                        onBack: this.props.onBack,
                        subscriptionProducts: this.props.subscriptionProducts,
                        giftRecipient: this.props.giftRecipient,
                        reportSubMenuAction: this.props.reportSubMenuAction
                    }) : l.createElement(_._8, null, l.createElement(_._8, {
                        display: _.R.Flex,
                        justifyContent: _._7.Between,
                        alignItems: _.c.Center,
                        fullWidth: !0
                    }, l.createElement(_.Q, {
                        bold: !0,
                        type: _._49.H5
                    }, Object(g.d)("Choose A Gift Subscription", "GiftTierTabs")), l.createElement(_.v, {
                        type: _.B.Text,
                        icon: _._25.AngleLeft,
                        onClick: this.props.onBack,
                        "data-test-selector": "sub-gift-select-back-button"
                    }, l.createElement(_._8, {
                        alignItems: _.c.Center,
                        display: _.R.InlineFlex
                    }, l.createElement(_.Q, null, Object(g.d)("Back", "GiftTierTabs"))))), l.createElement(W.a, {
                        canPrimeSubscribe: !1,
                        channelDisplayName: this.props.channelDisplayName,
                        giftRecipient: this.props.giftRecipient,
                        isGift: !0,
                        isSubscribed: !1,
                        onGiftSelect: this.onGiftSelect,
                        onSelectTierTab: this.onSelectTierTab,
                        reportSubMenuAction: this.reportSubMenuAction,
                        subscriptionProducts: this.props.subscriptionProducts,
                        userHasPrime: !1
                    }))
                }, t
            }(l.Component),
            G = n("pQNb"),
            z = n("m4HT"),
            q = (n("VSa1"), n("BBNG"));
        ! function(e) {
            e[e.ActionsPage = 0] = "ActionsPage", e[e.SubGiftSelectPage = 1] = "SubGiftSelectPage"
        }(S || (S = {}));
        var Q = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    currentPage: S.ActionsPage
                }, t.getContent = function() {
                    if (t.props.data.loading || t.props.data.error) return t.renderHideButton();
                    var e = {
                            backgroundImage: "url(" + (t.props.data.targetUser.bannerImageURL || f) + ")"
                        },
                        n = t.state.currentPage === S.ActionsPage ? t.renderActions() : t.renderSubGiftSelect();
                    return l.createElement(_._35, {
                        border: !0,
                        className: "viewer-card",
                        elevation: 1,
                        "data-a-target": "viewer-card"
                    }, l.createElement(_._3, {
                        background: _.n.AccentAlt2
                    }, l.createElement("div", {
                        className: "viewer-card__background",
                        style: e
                    }, l.createElement(_._8, {
                        display: _.R.Flex,
                        flexDirection: _.T.Column,
                        fullHeight: !0,
                        fullWidth: !0,
                        className: "viewer-card__overlay"
                    }, l.createElement(_._35, {
                        alignItems: _.c.Start,
                        background: _.n.Overlay,
                        className: "viewer-card__banner",
                        display: _.R.Flex,
                        flexDirection: _.T.Row,
                        flexGrow: 1,
                        fullWidth: !0,
                        justifyContent: _._7.Start,
                        padding: 1,
                        position: _._15.Relative,
                        textAlign: _._45.Center
                    }, l.createElement(E, null, l.createElement(_.m, {
                        src: t.props.data.targetUser.profileImageURL,
                        size: 50,
                        alt: t.props.data.targetUser.displayName
                    })), l.createElement(E, null, l.createElement(_._8, {
                        alignItems: _.c.Center,
                        margin: 1,
                        className: "viewer-card__display-name",
                        ellipsis: !0
                    }, l.createElement(_.Q, {
                        color: _.K.Overlay,
                        type: _._49.H4
                    }, l.createElement(_.O, {
                        hoverUnderlineNone: !0,
                        targetBlank: !0,
                        to: "/" + t.props.targetLogin,
                        type: _.P.Inherit
                    }, t.props.data.targetUser.displayName)))), l.createElement(E, null, t.renderHideButton()), l.createElement(E, null, t.renderIgnoreButton()))))), n)
                }, t.toggleGiftPage = function() {
                    var e = t.state.currentPage === S.ActionsPage ? S.SubGiftSelectPage : S.ActionsPage;
                    e === S.SubGiftSelectPage && t.trackGiftEvent(), t.setState({
                        currentPage: e
                    })
                }, t.onWhisperButtonClick = function() {
                    t.props.hideViewerCard()
                }, t.handleReportUserClick = function() {
                    if (!t.props.isLoggedIn) return t.props.login();
                    t.props.showReportUserModal({
                        reportContext: {
                            contentType: t.reportContentTypeFromSourceType(t.props.sourceType),
                            targetUserID: t.props.data.targetUser.id,
                            contentID: t.props.sourceID,
                            extra: JSON.stringify({
                                channel_id: t.props.channelID.toString()
                            }),
                            additionalTrackingID: t.props.channelID
                        },
                        title: Object(g.d)("Report {channelDisplayName}", {
                            channelDisplayName: t.props.data.targetUser.displayName
                        }, "ReportUserModalTitle")
                    })
                }, t.trackBuyGiftSubEvent = function(e) {
                    Object(P.b)(o.__assign({}, e, {
                        action: P.a.BuyGiftSub,
                        channelID: t.props.channelID || "",
                        channelLogin: t.props.data.channelUser.login || "",
                        isMenuOpen: null,
                        hasSubCredit: null,
                        sub_location: "viewer_card",
                        modal: !1,
                        showPrimeContent: !0,
                        giftRecipient: t.props.data.targetUser.login
                    }))
                }, t.trackGiftEvent = function() {
                    Object(P.b)({
                        action: P.a.GiftASub,
                        channelID: t.props.channelID || "",
                        channelLogin: t.props.data.channelUser.login || "",
                        isMenuOpen: null,
                        hasSubCredit: null,
                        sub_location: "viewer_card",
                        modal: !1,
                        showPrimeContent: !0,
                        giftRecipient: t.props.data.targetUser.login
                    })
                }, t
            }
            return o.__extends(t, e), t.prototype.componentDidMount = function() {
                this.props.latencyTracking.reportInteractive()
            }, t.prototype.render = function() {
                return this.props.data.error ? null : this.getContent()
            }, t.prototype.renderIgnoreButton = function() {
                var e = this.props.data.currentUser;
                return !this.props.isEmbedded && e && this.props.data.targetUser && e.login !== this.props.targetLogin ? l.createElement(_._8, {
                    key: "Ignore",
                    position: _._15.Absolute,
                    attachRight: !0,
                    attachBottom: !0,
                    margin: {
                        bottom: .5,
                        right: .5
                    }
                }, l.createElement(w, {
                    targetDisplayName: this.props.data.targetUser.displayName,
                    targetLogin: this.props.targetLogin,
                    sendMessageToTMI: this.props.sendMessageToTMI
                })) : null
            }, t.prototype.renderHideButton = function() {
                return l.createElement(_._8, {
                    className: "viewer-card__hide",
                    position: _._15.Absolute,
                    attachRight: !0,
                    attachTop: !0,
                    margin: {
                        top: .5,
                        right: .5
                    },
                    "data-a-target": "viewer-card-close-button"
                }, l.createElement(_.w, {
                    icon: _._25.Close,
                    onClick: this.props.hideViewerCard,
                    ariaLabel: Object(g.d)("Hide", "ViewerCard"),
                    overlay: !0
                }))
            }, t.prototype.renderActions = function() {
                var e = this.props.data.currentUser;
                return this.props.isEmbedded || e && e.login === this.props.targetLogin ? null : l.createElement(_._35, {
                    className: "viewer-card__actions",
                    "data-test-selector": "viewer-card-actions",
                    attachBottom: !0
                }, this.renderSocialActions(), this.renderChatActions())
            }, t.prototype.renderSocialActions = function() {
                return l.createElement(_._35, {
                    display: _.R.Flex,
                    background: _.n.Base,
                    flexDirection: _.T.Row,
                    fullWidth: !0,
                    padding: {
                        y: 1,
                        left: 1,
                        right: .5
                    }
                }, l.createElement(_._8, {
                    margin: {
                        right: .5
                    }
                }, l.createElement(E, null, l.createElement(A.a, {
                    friendData: {
                        user: this.props.data.targetUser
                    },
                    targetID: this.props.data.targetUser.id
                }))), l.createElement(_._8, {
                    margin: {
                        right: .5
                    }
                }, l.createElement(E, null, this.renderWhisperButton())), l.createElement(_._8, {
                    margin: {
                        right: .5
                    }
                }, l.createElement(E, null, this.renderGiftSubscriptionButton())), l.createElement(_._8, {
                    flexGrow: 1,
                    textAlign: _._45.Right
                }, l.createElement(E, null, l.createElement(v.a, {
                    key: "MoreOptionsButton"
                }, l.createElement(_.w, {
                    ariaLabel: Object(g.d)("More options", "ViewerCard"),
                    icon: _._25.More,
                    "data-a-target": "viewer-card-more-button"
                }), l.createElement(_.q, {
                    direction: _.r.BottomRight,
                    "data-a-target": "viewer-card-more-balloon"
                }, l.createElement(_._8, {
                    padding: {
                        y: 1
                    }
                }, l.createElement(_._6, {
                    onClick: this.handleReportUserClick,
                    "data-a-target": "viewer-card-report-button"
                }, l.createElement(_._8, {
                    padding: {
                        x: 1
                    }
                }, Object(g.d)("Report {user}", {
                    user: this.props.targetLogin
                }, "ViewerCard")))))))))
            }, t.prototype.renderWhisperButton = function() {
                if (!this.props.data.currentUser || !this.props.data.targetUser) return null;
                var e = Object(z.a)(this.props.data.currentUser.id, this.props.data.targetUser.id);
                return l.createElement(b.a, {
                    onClick: this.onWhisperButtonClick,
                    isPopout: this.props.isPopout,
                    threadID: e
                })
            }, t.prototype.renderGiftSubscriptionButton = function() {
                return !this.props.data.channelUser || !this.props.data.channelUser.subscriptionProducts || this.props.data.channelUser.subscriptionProducts.length < 1 ? null : l.createElement(U.a, {
                    onClick: this.toggleGiftPage,
                    subProductId: this.props.data.channelUser.subscriptionProducts[0].id,
                    giftRecipient: this.props.targetLogin,
                    isEsportChannel: Object(y.a)(this.props.data.channelUser.id, this.props.sessionUser)
                })
            }, t.prototype.renderSubGiftSelect = function() {
                var e = Object(y.b)(this.props.data.channelUser.id, this.props.sessionUser);
                return l.createElement(_._8, null, l.createElement(G.a, {
                    subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                    isGift: !0
                }), l.createElement(_._35, {
                    background: _.n.Base,
                    attachBottom: !0,
                    display: _.R.Flex,
                    flexDirection: _.T.Row,
                    justifyContent: _._7.Between,
                    fullWidth: !0,
                    flexGrow: 0,
                    padding: 2
                }, l.createElement(H, {
                    onBack: this.toggleGiftPage,
                    channelDisplayName: this.props.data.channelUser.displayName,
                    subscriptionProducts: this.props.data.channelUser.subscriptionProducts,
                    giftRecipient: this.props.data.targetUser.login,
                    reportSubMenuAction: this.trackBuyGiftSubEvent,
                    isEsportGiftingApproved: e
                })))
            }, t.prototype.renderChatActions = function() {
                var e = [];
                return this.isModeratorOrHigher() && e.push(l.createElement(x, {
                    key: "ModActions",
                    channelID: this.props.data.channelUser.id,
                    userID: this.props.data.targetUser.id,
                    userLogin: this.props.targetLogin
                })), this.isOwnerOrHigher() && e.push(l.createElement(j, {
                    key: "OwnerActions",
                    sendMessageToTMI: this.props.sendMessageToTMI,
                    targetLogin: this.props.targetLogin
                })), e.length ? l.createElement(_._35, {
                    display: _.R.Flex,
                    background: _.n.Alt2,
                    fullWidth: !0,
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, l.createElement(E, null, e)) : null
            }, t.prototype.isOwnerOrHigher = function() {
                var e = this.props.data;
                return !(e.loading || e.error || !e.currentUser) && (e.currentUser.roles.isGlobalMod || e.currentUser.roles.isSiteAdmin || e.currentUser.roles.isStaff || this.isOwner())
            }, t.prototype.isModeratorOrHigher = function() {
                return this.isOwnerOrHigher() || this.props.data.channelUser.self && this.props.data.channelUser.self.isModerator
            }, t.prototype.isOwner = function() {
                var e = this.props.data;
                return !(e.loading || e.error || !e.currentUser) && e.currentUser.id === e.channelUser.id
            }, t.prototype.reportContentTypeFromSourceType = function(e) {
                switch (e) {
                    case L.a.chat_message:
                        return F.a.Chat;
                    case L.a.room_message:
                        return F.a.Room;
                    case L.a.recent_raids:
                        return F.a.Raid;
                    case L.a.viewer_list:
                    default:
                        return F.a.User
                }
            }, t = o.__decorate([Object(T.d)("ViewerCard"), Object(k.a)(q, {
                options: function(e) {
                    return {
                        variables: {
                            targetLogin: e.targetLogin,
                            channelID: e.channelID
                        }
                    }
                }
            })], t)
        }(l.Component);
        var K = Object(i.b)(function(e) {
                return {
                    sessionUser: Object(p.c)(e),
                    isLoggedIn: Object(p.d)(e)
                }
            }, function(e) {
                return Object(a.b)({
                    hideViewerCard: r.c,
                    login: function() {
                        return Object(m.f)(c.a.ViewerCard)
                    },
                    showReportUserModal: function(e) {
                        var t = o.__rest(e, []);
                        return Object(u.d)(h.a, t)
                    }
                }, e)
            })(Q),
            $ = (n("PqoY"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        dragging: !1
                    }, t.onDragStart = function(e) {
                        t.cardContainerRef && t.layerRef && e.button === d.a.Left && (t.layerRef.addEventListener("mousemove", t.onDrag), window.addEventListener("mouseup", t.onDragEnd), window.addEventListener("selectstart", t.cancelSelection), t.setState({
                            dragging: !0
                        }), t.initCardX = t.cardContainerRef.offsetLeft, t.initCardY = t.cardContainerRef.offsetTop, t.initMouseX = e.clientX, t.initMouseY = e.clientY)
                    }, t.onDrag = function(e) {
                        t.nextTop = t.initCardY + e.clientY - t.initMouseY, t.nextLeft = t.initCardX + e.clientX - t.initMouseX, t.rafHandle || (t.rafHandle = requestAnimationFrame(function() {
                            t.rafHandle = 0, t.cardContainerRef && (t.cardContainerRef.style.top = t.nextTop + "px", t.cardContainerRef.style.left = t.nextLeft + "px")
                        }))
                    }, t.onDragEnd = function() {
                        t.removeDragListeners(), t.setState({
                            dragging: !1
                        })
                    }, t.removeDragListeners = function() {
                        t.layerRef && t.layerRef.removeEventListener("mousemove", t.onDrag), window.removeEventListener("mouseup", t.onDragEnd), window.removeEventListener("selectstart", t.cancelSelection)
                    }, t.cancelSelection = function(e) {
                        e.preventDefault()
                    }, t
                }
                return o.__extends(t, e), t.prototype.componentWillUnmount = function() {
                    this.props.hideViewerCard(), this.rafHandle && cancelAnimationFrame(this.rafHandle), this.removeDragListeners()
                }, t.prototype.componentWillReceiveProps = function(e) {
                    this.props.viewerCardOptions && e.viewerCardOptions && (e.viewerCardOptions.targetLogin === this.props.viewerCardOptions.targetLogin && e.viewerCardOptions.initialTopOffset === this.props.viewerCardOptions.initialTopOffset || this.cardContainerRef && (this.cardContainerRef.style.left = "0px"))
                }, t.prototype.render = function() {
                    var e = this,
                        t = {
                            "viewer-card-layer": !0,
                            "viewer-card-layer--dragging": this.state.dragging
                        },
                        n = {
                            "viewer-card-layer__draggable": !0,
                            "viewer-card-layer__draggable--dragging": this.state.dragging
                        },
                        i = null;
                    if (this.props.viewerCardOptions) {
                        var a = {};
                        if (this.layerRef) {
                            var r = this.layerRef.getBoundingClientRect();
                            a = {
                                top: Math.max(this.props.viewerCardOptions.initialTopOffset - r.top, 0) + "px"
                            }
                        }
                        i = l.createElement(_._2, {
                            className: s(n),
                            position: _._15.Absolute
                        }, l.createElement("div", {
                            onMouseDown: this.onDragStart,
                            ref: function(t) {
                                e.cardContainerRef = t
                            },
                            style: a,
                            "data-a-target": "viewer-card-positioner"
                        }, l.createElement(K, {
                            channelID: this.props.channelID,
                            isPopout: this.props.isPopout,
                            isEmbedded: this.props.isEmbedded,
                            targetLogin: this.props.viewerCardOptions.targetLogin,
                            sourceType: this.props.viewerCardOptions.sourceType,
                            sourceID: this.props.viewerCardOptions.sourceID,
                            hideViewerCard: this.props.hideViewerCard,
                            sendMessageToTMI: this.props.onSendMessage
                        })))
                    }
                    return l.createElement(_._2, {
                        className: s(t),
                        fullHeight: !0,
                        fullWidth: !0,
                        position: _._15.Relative,
                        zIndex: _._62.Default
                    }, l.createElement("div", {
                        onMouseUp: this.onDragEnd,
                        ref: function(t) {
                            e.layerRef = t
                        }
                    }, i))
                }, t
            }(l.Component));
        var Y = Object(i.b)(function(e) {
            return {
                viewerCardOptions: e.viewerCard.viewerCardOptions
            }
        }, function(e) {
            return Object(a.b)({
                hideViewerCard: r.c
            }, e)
        })($);
        n.d(t, "a", function() {
            return Y
        })
    },
    aMxy: function(e, t, n) {
        "use strict";
        var i = n("arZ9");
        n.n(i);
        n.o(i, "FrienshipChangeType") && n.d(t, "FrienshipChangeType", function() {
            return i.FrienshipChangeType
        }), n.o(i, "ModerationActions") && n.d(t, "ModerationActions", function() {
            return i.ModerationActions
        }), n.o(i, "PubsubMessageType") && n.d(t, "PubsubMessageType", function() {
            return i.PubsubMessageType
        }), n.o(i, "PubsubTopic") && n.d(t, "PubsubTopic", function() {
            return i.PubsubTopic
        }), n.o(i, "TargetedModerationActions") && n.d(t, "TargetedModerationActions", function() {
            return i.TargetedModerationActions
        });
        var a = n("GHQc");
        n.n(a);
        n.o(a, "FrienshipChangeType") && n.d(t, "FrienshipChangeType", function() {
            return a.FrienshipChangeType
        }), n.o(a, "ModerationActions") && n.d(t, "ModerationActions", function() {
            return a.ModerationActions
        }), n.o(a, "PubsubMessageType") && n.d(t, "PubsubMessageType", function() {
            return a.PubsubMessageType
        }), n.o(a, "PubsubTopic") && n.d(t, "PubsubTopic", function() {
            return a.PubsubTopic
        }), n.o(a, "TargetedModerationActions") && n.d(t, "TargetedModerationActions", function() {
            return a.TargetedModerationActions
        });
        var r = n("/3Lr");
        n.d(t, "FrienshipChangeType", function() {
            return r.a
        }), n.d(t, "ModerationActions", function() {
            return r.b
        }), n.d(t, "PubsubMessageType", function() {
            return r.c
        }), n.d(t, "PubsubTopic", function() {
            return r.d
        }), n.d(t, "TargetedModerationActions", function() {
            return r.e
        })
    },
    aSvS: function(e, t, n) {
        "use strict";
        var i, a;
        n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return a
            }),
            function(e) {
                e.DismissToken = "token_dismissed", e.RedeemToken = "token_redeemed", e.RequestEligibility = "eligibility_requested", e.RequestToken = "token_requested"
            }(i || (i = {})),
            function(e) {
                e.Click = "clicked_manage_in_dashboards", e.Dismiss = "dismissed"
            }(a || (a = {}))
    },
    aUOx: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return {
                type: i.b.Info,
                id: Object(a.a)("info"),
                message: e
            }
        };
        var i = n("qkCi"),
            a = n("INp2")
    },
    aqNN: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Bits_BuyCard_Offers"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "withChannel"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "bitsOffers"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "skip"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffersFragment"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "idSHA1"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsOffers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "bitsOffersFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "withChannel"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 440
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/bits/models/bits-offers-fragment.gql"\nquery Bits_BuyCard_Offers($withChannel: Boolean! $isLoggedIn: Boolean! $channelLogin: String!) {\nbitsOffers @skip(if: $isLoggedIn) {\n...bitsOffersFragment\n}\ncurrentUser @include(if: $isLoggedIn) {\nid\nidSHA1\nbitsBalance\nbitsOffers {\n...bitsOffersFragment\n}\n}\nuser(login: $channelLogin) @include(if: $withChannel) {\nid\ndisplayName\ncheer {\nid\nsettings {\ncheerMinimumBits\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("OcEY").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    arZ9: function(e, t) {},
    ass3: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), t.c = function() {
            return {
                type: i
            }
        }, t.d = function(e, t, n, i) {
            void 0 === i && (i = 0);
            return {
                type: a,
                viewerCardOptions: {
                    initialTopOffset: i,
                    sourceID: n,
                    sourceType: t,
                    targetLogin: e
                }
            }
        };
        var i = "viewer-card.VIEWER_CARD_HIDDEN",
            a = "viewer-card.VIEWER_CARD_SHOWN"
    },
    aysN: function(e, t) {},
    bL99: function(e, t) {},
    bQ8d: function(e, t, n) {
        "use strict";

        function i(e, t) {
            if (void 0 === t && (t = 0), t > e) {
                var n = t;
                t = e, e = n
            }
            return t + Math.floor(Math.random() * (e - t + 1))
        }
        t.a = i, t.b = function(e) {
            return e[i(e.length - 1)]
        }, t.c = function(e, t) {
            var n = 0,
                i = [];
            for (; n < e;) i.push(t(n)), n += 1;
            return i
        }
    },
    bgpf: function(e, t, n) {
        "use strict";
        var i, a, r;
        n.d(t, "c", function() {
                return i
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return r
            }),
            function(e) {
                e.NewChatter = "NEW_CHATTER"
            }(i || (i = {})),
            function(e) {
                e.Available = "AVAILABLE", e.Dismissed = "DISMISSED", e.Eligible = "ELIGIBLE", e.Redeemed = "REDEEMED"
            }(a || (a = {})),
            function(e) {
                e.TokenNotAvailable = "TOKEN_NOT_AVAILABLE", e.TokenNotFound = "TOKEN_NOT_FOUND", e.UserBanned = "USER_CHAT_BANNED", e.UserNotFollowing = "FOLLOWER_ONLY_MODE_ENFORCEMENT_FAILED", e.UserNotSubbed = "SUB_ONLY_MODE_ENFORCEMENT_FAILED", e.UserTimedOut = "USER_CHAT_TIMED_OUT"
            }(r || (r = {}))
    },
    bkpq: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            var t = [],
                n = {};
            return e.forEach(function(e) {
                var s, l, d, c = e.tiers.map(function(e) {
                    return o(e)
                });
                "Cheer" === e.prefix && c.push((s = ["DARK", "LIGHT"], l = ["static", "animated"], d = [], [1, 1.5, 2, 3, 4].forEach(function(e) {
                    s.forEach(function(t) {
                        l.forEach(function(n) {
                            d.push({
                                url: r.a + "/cheer/" + t.toLowerCase() + "/" + n + "/100000/" + e + "." + ("static" === n ? "png" : "gif"),
                                isAnimated: "animated" === n,
                                theme: t,
                                dpiScale: e
                            })
                        })
                    })
                }), o({
                    id: "Cheer:100000",
                    bits: 1e5,
                    canCheer: !1,
                    color: r.f[a.a.Yellow],
                    images: d
                }))), c.sort(function(e, t) {
                    return t.bits - e.bits
                });
                var u = i.__assign({}, e, {
                    indexedTiers: new Map(c.map(function(e) {
                        return [e.bits, e]
                    })),
                    orderedTiers: c
                });
                t.push(u), n[u.prefix.toLowerCase()] = u
            }), {
                indexedActions: n,
                orderedActions: t
            }
        }, t.b = function(e, t) {
            return {
                cursor: "" + e.rank,
                node: {
                    id: t + "_" + e.entry_key,
                    entryKey: e.entry_key,
                    rank: e.rank,
                    score: e.score,
                    __typename: "BitsLeaderboardItem"
                },
                __typename: "BitsLeaderboardItemEdge"
            }
        };
        var i = n("TToO"),
            a = n("I89S"),
            r = n("3iBR");

        function o(e) {
            var t = new Map,
                n = new Map,
                a = new Map,
                r = new Map;
            return e.images.forEach(function(e) {
                "LIGHT" === e.theme ? e.isAnimated ? n.set(e.dpiScale, e.url) : t.set(e.dpiScale, e.url) : e.isAnimated ? r.set(e.dpiScale, e.url) : a.set(e.dpiScale, e.url)
            }), i.__assign({
                indexedImages: {
                    LIGHT: {
                        static: t,
                        animated: n
                    },
                    DARK: {
                        static: a,
                        animated: r
                    }
                }
            }, e)
        }
    },
    c3pS: function(e, t, n) {
        "use strict";
        n("67ft");
        var i, a = n("TToO"),
            r = n("KSGD"),
            o = n("GiK3"),
            s = n("6BvN"),
            l = n("HW6M"),
            d = n("6sO2"),
            c = n("rCmJ"),
            u = n("Odds"),
            m = (n("IfJQ"), "autocomplete-balloon-matches"),
            p = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {}, t.resizeAnimationFrame = 0, t.messages = {
                        noMatches: Object(d.d)("No matches.", "AutocompleteBalloon")
                    }, t.logger = d.j.withCategory("AutocompleteBalloon"), t.renderMatches = function() {
                        return t.props.matches.map(function(e, n) {
                            var i = t.state.selectedMatch,
                                a = i && i.replacement === e.replacement,
                                r = l("autocomplete-balloon__item", {
                                    "autocomplete-balloon__item--selected": a
                                });
                            return o.createElement(u._8, {
                                key: "autocomplete-match-" + n,
                                refDelegate: a ? t.focusOnOption : void 0,
                                "data-test-selector": m
                            }, o.createElement(u._2, {
                                display: u.R.Block,
                                fullWidth: !0
                            }, o.createElement("button", {
                                onMouseEnter: t.handleMatchMouseEnter,
                                className: r,
                                "data-a-target": e.replacement,
                                "data-click-index": n,
                                onClick: t.onMatchClick
                            }, o.createElement(u._8, {
                                padding: {
                                    x: .5
                                },
                                display: u.R.Flex,
                                alignItems: u.c.Center
                            }, e.element))))
                        })
                    }, t.handleMatchMouseEnter = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.setState({
                            selectedMatch: n
                        })
                    }, t.onMatchClick = function(e) {
                        var n = t.getMatchFromEvent(e);
                        n && t.props.onMatchSelect(n)
                    }, t.getMatchFromEvent = function(e) {
                        var n = t.props.matches,
                            i = e.currentTarget.getAttribute("data-click-index");
                        return !i || +i >= n.length ? (t.logger.error(new Error, "The index received from the UI element was not found in props.matches."), null) : n[+i]
                    }, t.handleKeydown = function(e) {
                        var n = e.charCode || e.keyCode,
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            };
                        switch (n) {
                            case s.a.Tab:
                            case s.a.Enter:
                                i(), t.props.matches.length && t.state.selectedMatch ? t.props.onMatchSelect(t.state.selectedMatch) : t.props.onDismiss();
                                break;
                            case s.a.Up:
                            case s.a.Down:
                                if (!t.state.selectedMatch || !t.props.matches.length) return;
                                var a = t.props.matches.indexOf(t.state.selectedMatch);
                                if (-1 === a) return void t.logger.error(new Error, "The selected match was not found in props.matches.");
                                i();
                                var r = n === s.a.Up ? -1 : 1,
                                    o = t.getIndexWithinLength(a + r, t.props.matches.length),
                                    l = t.props.matches[o];
                                t.setState({
                                    selectedMatch: l
                                })
                        }
                    }, t.getIndexWithinLength = function(e, t) {
                        var n = e % t;
                        return n < 0 ? n + t : n
                    }, t.onResize = function() {
                        t.resizeAnimationFrame || (t.resizeAnimationFrame = requestAnimationFrame(t.setContainerHeight))
                    }, t.setContainerHeight = function() {
                        var e = t.props.containerElement && t.props.containerElement.clientHeight || 1080;
                        t.setState({
                            containerHeight: e
                        }), t.resizeAnimationFrame = 0
                    }, t.focusOnOption = function(e) {
                        if (e && t.autocompleteBalloonElement) {
                            var n = e.getBoundingClientRect(),
                                i = t.autocompleteBalloonElement.getBoundingClientRect();
                            (n.bottom > i.bottom || n.top < i.top) && e.scrollIntoView()
                        }
                    }, t.setAutocompleteBalloonElement = function(e) {
                        t.autocompleteBalloonElement = e
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    window.addEventListener("keydown", this.handleKeydown, !0), window.addEventListener("resize", this.onResize, !0), this.setContainerHeight(), this.props.matches.length > 0 && this.setState({
                        selectedMatch: this.props.matches[0]
                    })
                }, t.prototype.componentWillUnmount = function() {
                    window.removeEventListener("resize", this.onResize, !0), window.removeEventListener("keydown", this.handleKeydown, !0), this.resizeAnimationFrame && cancelAnimationFrame(this.resizeAnimationFrame)
                }, t.prototype.componentWillReceiveProps = function(e) {
                    var t = this,
                        n = e.matches.reduce(function(e, n, i) {
                            return t.state.selectedMatch ? n.replacement === t.state.selectedMatch.replacement ? i : e : 0
                        }, 0);
                    this.setState({
                        selectedMatch: e.matches[n]
                    })
                }, t.prototype.render = function() {
                    var e;
                    return e = 0 === this.props.matches.length ? o.createElement(u._8, {
                        padding: {
                            x: .5
                        },
                        "data-test-selector": "autocomplete-balloon-no-matches"
                    }, o.createElement(u.Q, {
                        type: u._49.Span,
                        color: u.K.Alt2
                    }, this.messages.noMatches)) : this.renderMatches(), o.createElement(u._8, {
                        position: u._15.Relative
                    }, o.createElement(c.a, {
                        onClickOut: this.props.onDismiss
                    }, o.createElement(u.q, {
                        direction: u.r.TopLeft,
                        "data-a-target": "autocomplete-balloon",
                        "data-test-selector": "autocomplete-balloon",
                        show: !0
                    }, o.createElement(u._8, {
                        refDelegate: this.setAutocompleteBalloonElement,
                        "data-test-selector": "autocomplete-matches-container",
                        className: "autocomplete-balloon",
                        overflow: u._11.Auto,
                        padding: {
                            y: 1
                        }
                    }, o.createElement("div", {
                        style: {
                            maxHeight: this.state.containerHeight
                        }
                    }, e)))))
                }, t
            }(o.Component),
            h = n("2emZ"),
            g = n("vH/s"),
            f = {
                Chat: "chat",
                Feed: "feed",
                Whisper: "whisper"
            },
            v = ":",
            b = "#",
            k = "@",
            y = function(e) {
                switch (e) {
                    case h.a.Emote:
                        return v;
                    case h.a.Hashtag:
                        return b;
                    case h.a.Mention:
                        return k;
                    default:
                        return void d.j.warn("Chat Suggestions tracking was passed an unknown autocomplete type.")
                }
            },
            _ = function(e) {
                var t = y(e.autocompleteType);
                if (t) {
                    var n = {
                        channel: e.channelLogin,
                        completed_text: e.completedText,
                        source: e.source,
                        start_character: t
                    };
                    d.n.track(g.SpadeEventType.ChatSuggestionComplete, n)
                }
            };
        ! function(e) {
            e.Input = "input", e.TextArea = "textarea"
        }(i || (i = {}));
        var C = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        autocompleteType: h.a.None,
                        matchedCursorPosition: 0,
                        matches: null,
                        value: ""
                    }, t.providers = [], t.onChange = function(e) {
                        t.setState({
                            value: e.target.value
                        }, function() {
                            t.getMatches()
                        }), t.props.onChange && t.props.onChange(e)
                    }, t.onKeyDown = function(e) {
                        var n = function() {
                                t.props.onKeyDown && t.props.onKeyDown(e)
                            },
                            i = function() {
                                e.preventDefault(), e.stopPropagation()
                            },
                            a = e.charCode || e.keyCode;
                        if (a !== s.a.Enter) {
                            switch (a) {
                                case s.a.Tab:
                                    if (!t.state.matches) t.getMatches(!0) && i();
                                    break;
                                case s.a.Esc:
                                    t.state.matches && (i(), t.resetDisplayState())
                            }
                            n()
                        } else n()
                    }, t.setComponentRefDelegate = function(e) {
                        t.componentRef = e, t.props.componentRefDelegate && t.props.componentRefDelegate(e)
                    }, t.getMatches = function(e) {
                        var n = t.state.value;
                        if (0 === t.providers.length || 0 === n.length) return t.resetDisplayState(), !1;
                        var i = t.getCurrentCursorPosition();
                        if (i > n.length);
                        else
                            for (; i < n.length && !/\s/.test(n.charAt(i));) i++;
                        var a = n.substring(0, i);
                        if (0 === a.length || /\s/.test(a.substring(a.length - 1))) return t.resetDisplayState(), !1;
                        for (var r = a.split(/\s/), o = r[r.length - 1], s = 0, l = t.providers; s < l.length; s++) {
                            var d = l[s];
                            if (!e || d.canBeTriggeredByTab) {
                                var c = d.getMatches(o, e);
                                if (c) return t.setState({
                                    autocompleteType: d.autocompleteType,
                                    matchedCursorPosition: i,
                                    matches: c
                                }), !0
                            }
                        }
                        return t.resetDisplayState(), !1
                    }, t.resetDisplayState = function(e, n) {
                        var i = a.__assign({}, t.state, {
                            autocompleteType: h.a.None,
                            matches: null
                        }, e || {});
                        t.setState(i, n)
                    }, t.insertReplacement = function(e) {
                        var n = t.state.value,
                            i = t.state.matchedCursorPosition,
                            r = n.substring(0, i),
                            o = r.lastIndexOf(e.current);
                        if (-1 === o) r = r.concat(e.replacement + " "), i = r.length;
                        else {
                            var s = r.substring(0, o),
                                l = n.length > o + e.current.length ? n.substring(o + e.current.length) : "",
                                d = l.startsWith(" ") ? e.replacement : e.replacement + " ";
                            r = "" + s + d + l, i = s.length + d.length
                        }
                        _(a.__assign({}, t.props.trackingParams || {}, {
                            autocompleteType: t.state.autocompleteType,
                            completedText: e.replacement,
                            source: t.props.suggestionSource
                        })), t.resetDisplayState({
                            value: r
                        }, function() {
                            t.setCursorPosition(i)
                        })
                    }, t.getCurrentCursorPosition = function() {
                        return t.componentRef.selectionStart
                    }, t.setCursorPosition = function(e) {
                        t.componentRef && (t.componentRef.setSelectionRange(e, e), t.componentRef.focus())
                    }, t.registerAutocompleteProvider = function(e) {
                        return t.providers.push(e),
                            function() {
                                var n = t.providers.indexOf(e);
                                t.providers.splice(n, 1)
                            }
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.refDelegate && this.props.refDelegate(this)
                }, t.prototype.getChildContext = function() {
                    return {
                        registerAutocompleteProvider: this.registerAutocompleteProvider
                    }
                }, t.prototype.componentWillUpdate = function(e, t) {
                    !this.state.matches && t.matches && function(e) {
                        var t = y(e.autocompleteType);
                        if (t) {
                            var n = {
                                source: e.source,
                                start_character: t
                            };
                            d.n.track(g.SpadeEventType.ChatSuggestion, n)
                        }
                    }({
                        autocompleteType: t.autocompleteType,
                        source: e.suggestionSource
                    })
                }, t.prototype.componentDidUpdate = function(e, t) {
                    t.value !== this.state.value && this.props.onValueUpdate && this.props.onValueUpdate(this.state.value)
                }, t.prototype.render = function() {
                    var e = a.__assign({}, this.props, {
                        onChange: this.onChange,
                        onKeyDown: this.onKeyDown,
                        refDelegate: this.setComponentRefDelegate,
                        value: this.state.value
                    });
                    return o.createElement(u._8, null, this.state.matches && o.createElement(p, {
                        matches: this.state.matches,
                        onMatchSelect: this.insertReplacement,
                        onDismiss: this.resetDisplayState,
                        containerElement: this.props.containerElement
                    }), this.props.componentType === i.Input ? o.createElement(u._4, a.__assign({}, e, {
                        type: e.type || u._5.Text
                    })) : o.createElement(u._46, a.__assign({}, e)), this.props.children)
                }, t.prototype.getValue = function() {
                    return this.state.value
                }, t.prototype.setValue = function(e) {
                    this.resetDisplayState({
                        value: e
                    })
                }, t.childContextTypes = {
                    registerAutocompleteProvider: r.func
                }, t
            }(o.Component),
            S = n("Bir6"),
            E = n("Tzcg"),
            N = (n("D3yV"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.autocompleteType = h.a.Emote, t.canBeTriggeredByTab = !1, t.getMatches = function(e) {
                        return e.startsWith(":") ? e.length < 3 ? null : t.getMatchedEmotes(e) : null
                    }, t.getMatchedEmotes = function(e) {
                        var n = t.state.hydratedEmotes;
                        if (!n || 0 === n.length) return null;
                        var i = e.substring(1),
                            a = n.reduce(function(e, n) {
                                var a = n.emotes.filter(function(e) {
                                    if (e.token) return t.doesEmoteMatchTerm(e, i)
                                });
                                return e.concat([a])
                            }, []).filter(function(e) {
                                return e.length > 0
                            }).reduce(function(e, t) {
                                return e.concat(t)
                            }, []);
                        return a = Object(E.d)(a), (a = Object(E.e)(a, i)).map(function(e) {
                            return {
                                current: ":" + i,
                                replacement: e.token,
                                element: t.renderEmoteSuggestion(e)
                            }
                        })
                    }, t.doesEmoteMatchTerm = function(e, t) {
                        var n = new RegExp("^" + Object(S.a)(t), "i");
                        if (e.token.match(n)) return !0;
                        var i = new RegExp("" + Object(S.a)(t.charAt(0)).toUpperCase()),
                            a = new RegExp("^" + Object(S.a)(t.slice(1)), "i"),
                            r = e.token.match(i);
                        return !!(r && r.index && e.token.slice(r.index + 1).match(a))
                    }, t.renderEmoteSuggestion = function(e) {
                        return [o.createElement(u._8, {
                            padding: {
                                right: .5
                            },
                            key: "emote-img-" + e.id
                        }, o.createElement("img", {
                            className: "emote-autocomplete-provider__image",
                            srcSet: e.srcSet
                        })), o.createElement(u.Q, {
                            type: u._49.Span,
                            key: "emote-text-" + e.id
                        }, e.token)]
                    }, t.hidrateEmotes = function(e) {
                        var n = e.map(function(e) {
                            return {
                                id: e.id,
                                emotes: Object(E.b)(e.emotes)
                            }
                        });
                        t.setState({
                            hydratedEmotes: n
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    e.emotes && this.props.emotes !== e.emotes && this.hidrateEmotes(e.emotes)
                }, t.prototype.componentWillMount = function() {
                    this.hidrateEmotes(this.props.emotes)
                }, t.prototype.componentDidMount = function() {
                    this.unregister = this.context.registerAutocompleteProvider(this)
                }, t.prototype.componentWillUnmount = function() {
                    this.unregister()
                }, t.prototype.render = function() {
                    return null
                }, t.contextTypes = {
                    registerAutocompleteProvider: r.func
                }, t
            }(o.Component));
        n.d(t, !1, function() {}), n.d(t, !1, function() {}), n.d(t, "b", function() {
            return C
        }), n.d(t, "a", function() {
            return i
        }), n.d(t, !1, function() {}), n.d(t, "d", function() {
            return N
        }), n.d(t, "c", function() {
            return f
        })
    },
    cv4W: function(e, t, n) {
        e.exports = n.p + "assets/gift3-03f7dd6edab76b3567ff92bba447d5cb.png"
    },
    cvQl: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.Left = 0] = "Left", e[e.Middle = 1] = "Middle", e[e.Right = 2] = "Right", e[e.Back = 3] = "Back", e[e.Forward = 4] = "Forward"
            }(i || (i = {}))
    },
    cxb0: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "JoinRoomsButton"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 193
            }
        };
        n.loc.source = {
            body: "query JoinRoomsButton($channelID: ID! $userID: ID!) {\nuser(id: $channelID) {\nid\ndisplayName\nself {\nisChannelMember\n}\n}\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    cxe8: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Chat_SharePurchase_ChannelData"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "settings"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isCommerceRevShareEnabled"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "purchaseTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "title"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "asin"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                alias: {
                                                    kind: "Name",
                                                    value: "imageThumbnail"
                                                },
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [{
                                                    kind: "Argument",
                                                    name: {
                                                        kind: "Name",
                                                        value: "width"
                                                    },
                                                    value: {
                                                        kind: "IntValue",
                                                        value: "40"
                                                    }
                                                }],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "imageURL"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteSets"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "emoteSet"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "token"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "badges"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "FragmentSpread",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "badge"
                                                                },
                                                                directives: []
                                                            }]
                                                        }
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "bits"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "quantity"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "inGameContents"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "imageURL"
                                                        },
                                                        arguments: [{
                                                            kind: "Argument",
                                                            name: {
                                                                kind: "Name",
                                                                value: "width"
                                                            },
                                                            value: {
                                                                kind: "IntValue",
                                                                value: "30"
                                                            }
                                                        }],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 433
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery Chat_SharePurchase_ChannelData($channelLogin: String!) {\nuser(login: $channelLogin) {\nid\nsettings {\nisCommerceRevShareEnabled\n}\nself {\npurchaseTokens {\nid\ntitle\nasin\nimageThumbnail: imageURL(width: 40)\nimageURL\nemoteSets {\nid\nemoteSet {\nid\nemotes {\nid\ntoken\n}\n}\n}\nbadges {\nid\nbadge{\n...badge\n}\n}\nbits {\nid\nquantity\n}\ninGameContents {\nid\nimageURL(width: 30)\n}\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    "d/6e": function(e, t) {},
    d7Cs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "LeaveRoomsPrompt"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "query LeaveRoomsPrompt($id: ID!) {\nuser(id: $id) {\nid\ndisplayName\nself {\nisChannelMember\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    dQj3: function(e, t, n) {
        "use strict";
        t.b = l, t.a = function(e, t, n) {
            if (!e.author) return null;
            var d = l(e.body.emotes),
                c = e.badges.reduce(function(e, t) {
                    return e[t.setID] = t.version, e
                }, {});
            return {
                type: r.b.Message,
                messageType: r.c.Post,
                id: e.id,
                badges: c,
                bits: e.bitsUsed,
                timestamp: 0,
                deleted: !1,
                user: i.__assign({
                    userID: e.author.id,
                    userLogin: e.author.login,
                    userType: a.a.User,
                    color: e.authorColor
                }, Object(s.a)(e.authorName, e.author.login)),
                messageParts: Object(o.g)(e.body.content, d, e.bitsUsed, t, n, e.authorName)
            }
        }, t.c = function(e) {
            if (null === e.tags || null === e.message || null === e.bits_used) return null;
            var t = "ChatMessage:" + e.tags.msg_id;
            return {
                __typename: "ChatMessage",
                "Symbol(id)": t,
                id: e.tags.msg_id,
                authorName: e.tags.display_name,
                authorColor: e.tags.color,
                author: {
                    __typename: "User",
                    "Symbol(id)": "User:" + e.user_id,
                    id: e.user_id,
                    login: e.username
                },
                body: {
                    __typename: "MessageBody",
                    "Symbol(id)": "$" + t + ".body",
                    content: e.message,
                    emotes: e.tags.emotes.map(function(e, n) {
                        return {
                            __typename: "EmbeddedEmote",
                            "Symbol(id)": t + ".body.emotes." + n,
                            emoteID: e.id.toString(),
                            from: e.start,
                            to: e.end,
                            setID: e.set
                        }
                    })
                },
                badges: e.tags.badges.map(function(e, n) {
                    return {
                        __typename: "Badge",
                        "Symbol(id)": t + ".badges." + n,
                        setID: e.badge_set_id,
                        version: e.badge_set_version
                    }
                }),
                bitsUsed: e.bits_used
            }
        };
        var i = n("TToO"),
            a = n("6Agf"),
            r = n("qkCi"),
            o = n("l21v"),
            s = n("e1CU");

        function l(e) {
            var t = [];
            return e.forEach(function(e) {
                t[e.from] = {
                    startIndex: e.from,
                    endIndex: e.to + 1,
                    data: {
                        images: {
                            themed: !1,
                            sources: {
                                "1x": Object(o.f)(e.emoteID, 1),
                                "2x": Object(o.f)(e.emoteID, 2),
                                "4x": Object(o.f)(e.emoteID, 4)
                            }
                        }
                    }
                }
            }), t
        }
    },
    dVd7: function(e, t) {},
    daN3: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("yDzg"),
            l = n("CSlQ"),
            d = n("Odds"),
            c = n("lK86"),
            u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.handleClick = function() {
                        return n.openCheckout(), n.props.onClick && n.props.onClick()
                    }, n.openCheckout = function() {
                        n.state.hasPopupExperiment && n.props.checkoutURL && n.props.giftRecipient && window.open(Object(s.a)(n.props.checkoutURL, {
                            recipient: n.props.giftRecipient,
                            ref: "gift-subscribe-button"
                        }), "Twitch", "width=1000, height=1100, menubar, toolbar, location, personalbar, scrollbars")
                    };
                    var i = r.o.experiments.getAssignment("TWILIGHT_SUB_CHECKOUT_POPUP");
                    return n.state = {
                        hasPopupExperiment: "yes" === i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e, t, n = !!(this.props.data && this.props.data.user && this.props.data.user.self) && this.props.data.user.self.canGift;
                    this.props.checkoutURL ? this.props.isEsportChannel ? (e = Object(r.d)("Buy All-Access Pass Gift", "GiftSubscribeButton"), t = "esports-checkout-gift-subscribe-button") : (e = Object(r.d)("Buy Gift Subscription", "GiftSubscribeButton"), t = "checkout-gift-subscribe-button") : this.props.isEsportChannel ? (e = Object(r.d)("Gift All-Access Pass", "GiftSubscribeButton"), t = "esports-gift-subscribe-button") : (e = Object(r.d)("Gift Subscription", "GiftSubscribeButton"), t = "gift-subscribe-button");
                    var i = this.props.checkoutURL && this.props.giftRecipient ? Object(s.a)(this.props.checkoutURL, {
                        recipient: this.props.giftRecipient
                    }) : "";
                    return a.createElement(d.v, {
                        targetBlank: !0,
                        disabled: !n,
                        onClick: this.handleClick,
                        linkTo: this.state.hasPopupExperiment ? void 0 : i,
                        "data-test-selector": t,
                        purchase: this.props.purchase
                    }, this.props.buttonMessage || e)
                }, t = i.__decorate([Object(l.d)("GiftSubscribeButton", {
                    autoReportInteractive: !0
                }), Object(o.a)(c, {
                    options: function(e) {
                        return {
                            variables: {
                                recipientLogin: e.giftRecipient,
                                subProductId: e.subProductId
                            }
                        }
                    },
                    skip: function(e) {
                        return !e.giftRecipient || !e.subProductId
                    }
                })], t)
            }(a.Component);
        n.d(t, !1, function() {
            return "gift-subscribe-button"
        }), n.d(t, !1, function() {
            return "checkout-gift-subscribe-button"
        }), n.d(t, !1, function() {
            return "esports-gift-subscribe-button"
        }), n.d(t, !1, function() {
            return "esports-checkout-gift-subscribe-button"
        }), n.d(t, "a", function() {
            return u
        })
    },
    djIP: function(e, t, n) {
        "use strict";
        var i, a, r;
        n.d(t, "c", function() {
                return i
            }), n.d(t, "b", function() {
                return a
            }), n.d(t, "a", function() {
                return r
            }),
            function(e) {
                e.Spam = "Spam", e.Harassment = "Harassment"
            }(i || (i = {})),
            function(e) {
                e.Spam = "spam", e.Harassment = "harassment", e.Other = "other"
            }(a || (a = {})),
            function(e) {
                e.Whisper = "WHISPER", e.Chat = "CHAT"
            }(r || (r = {}))
    },
    dtvS: function(e, t) {},
    e1CU: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            var n = e,
                i = !1;
            n ? n.split("").map(function(e) {
                return e.charCodeAt(0) > 127
            }).reduce(function(e, t) {
                return e || t
            }) && (i = !0) : n = t;
            return {
                userDisplayName: n,
                isIntl: i
            }
        }
    },
    e9ZN: function(e, t) {},
    eDxU: function(e, t) {},
    "eMi+": function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsPinnedCheerV2_Leaderboards"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "leaderboard"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "first"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "10"
                                            }
                                        }],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "leaderboardItem"
                                                },
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "secondsRemaining"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "leaderboard"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "isEnabled"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "timePeriodType"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isRecentEnabled"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentTimeoutMs"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recent"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "chatMessage"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "recentTimeoutMs"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsLeaderboardItem"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "rank"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "score"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "entryKey"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 490
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/bits/models/bits-leaderboard-item-fragment.gql"\n#import "twilight/features/chat/models/chat-message-fragment.gql"\nquery BitsPinnedCheerV2_Leaderboards($channelID: ID!) {\nuser(id: $channelID) {\nid\ncheer {\nid\nleaderboard (first: 10) {\nid\n...leaderboardItem\nsecondsRemaining\n}\nsettings {\nleaderboard {\nisEnabled\ntimePeriodType\n}\nisRecentEnabled\nrecentTimeoutMs\n}\nrecent {\n...chatMessage\n}\nrecentTimeoutMs\n}\nself {\nbitsLeaderboardItem {\nid\nrank\nscore\nentryKey\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};

        function r(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }
        i.definitions = i.definitions.concat(r(n("+po9").definitions)), i.definitions = i.definitions.concat(r(n("Mful").definitions)), e.exports = i
    },
    emkL: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("l4QG"),
            s = n("Odds"),
            l = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.onHistoryChange = function(e) {
                        n.setState({
                            currentPathname: e.pathname
                        })
                    }, n.shouldShow = function() {
                        return n.props.link && n.state.currentPathname !== n.props.link.pathname
                    };
                    var i = r.o.experiments.getAssignment("TWILIGHT_EXTENDED_PRESENCE");
                    return n.state = {
                        currentPathname: location.pathname,
                        hasExtendedRichPresence: "variant_a" === i
                    }, n
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.historyUnlisten = r.o.history.listen(this.onHistoryChange)
                }, t.prototype.componentWillUnmount = function() {
                    this.historyUnlisten()
                }, t.prototype.render = function() {
                    if (!this.props.link || !this.shouldShow()) return null;
                    var e = Object(r.d)("Join", "JoinButton");
                    return this.props.availability === o.a.Offline && this.state.hasExtendedRichPresence && (e = Object(r.d)("Watch", "JoinButton")), a.createElement(s.v, {
                        linkTo: this.props.link,
                        onClick: this.props.onClick,
                        overlay: this.props.shouldHollowOverlay,
                        size: s.z.Small,
                        tabIndex: -1,
                        type: this.props.shouldHollowOverlay ? s.B.Hollow : s.B.Default
                    }, e)
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return l
        })
    },
    fNhT: function(e, t) {},
    fbnZ: function(e, t) {},
    g7wA: function(e, t, n) {
        "use strict";
        t.e = function(e) {
            var t = null,
                n = e.reduce(function(n, a, o) {
                    switch (a.type) {
                        case p.a.Text:
                            return n.concat(i.createElement("span", {
                                key: "chat-line__message-text-" + o,
                                "data-a-target": "chat-message-text"
                            }, a.content));
                        case p.a.CurrentUserHighlight:
                            return n.concat(i.createElement(c.a, {
                                isAtMention: !1,
                                isCurrentUserRecipient: !0,
                                recipient: a.content,
                                key: o
                            }));
                        case p.a.Mention:
                            return n.concat(i.createElement(c.a, {
                                isAtMention: !0,
                                isCurrentUserRecipient: a.content.isCurrentUserRecipient,
                                recipient: a.content.recipient,
                                key: o
                            }));
                        case p.a.Link:
                            return n = n.concat(h(o, a)), o < e.length - 1 && e[o + 1].type === p.a.Link && n.push(" "), n;
                        case p.a.Emote:
                            return n = n.concat(i.createElement(l.a, {
                                key: o,
                                emote: a.content
                            })), o < e.length - 1 && e[o + 1].type === p.a.Emote && n.push(" "), n;
                        case p.a.ClipLink:
                            return t ? n.concat(h(o, a)) : (t = i.createElement(r.a, {
                                key: o
                            }, i.createElement(d.a, {
                                slug: a.content.slug
                            })), n);
                        case p.a.VideoLink:
                            return t ? n.concat(h(o, a)) : (t = i.createElement(u.a, {
                                key: o,
                                id: a.content.id,
                                url: a.content.url
                            }), n);
                        default:
                            return n.concat(i.createElement("span", {
                                key: o
                            }))
                    }
                }, []);
            t && (n = n.concat(t));
            return n
        }, t.f = function(e) {
            if (e.moderationType === m.e.Ban) return e.reason ? i.createElement("span", {
                className: "chat-line__moderation--ban-with-reason"
            }, Object(a.d)("{userLogin} has been banned. Reason: {reason}", {
                userLogin: e.userLogin,
                reason: e.reason
            }, "ChatLine")) : i.createElement("span", {
                className: "chat-line__moderation--ban"
            }, Object(a.d)("{userLogin} is now banned from this channel.", {
                userLogin: e.userLogin
            }, "ChatLine"));
            if (e.reason && e.duration) {
                var t = Object(a.d)("{userLogin} has been timed out for {duration} seconds. Reason: {reason}", {
                    duration: e.duration,
                    reason: e.reason,
                    userLogin: e.userLogin
                }, "ChatLine");
                return i.createElement("span", {
                    className: "chat-line__moderation--timeout-with-reason"
                }, t)
            }
            if (e.duration) return i.createElement("span", {
                className: "chat-line__moderation--timeout"
            }, Object(a.d)("{userLogin} has been timed out for {duration} seconds.", {
                userLogin: e.userLogin,
                duration: e.duration
            }, "ChatLine"))
        }, t.b = function(e) {
            var t = e.daysLeft;
            0 === t && (t = e.hoursLeft);
            var n = {
                bitsTotal: i.createElement("strong", null, Object(s.e)(e.total, {
                    style: "currency",
                    currency: "USD"
                })),
                charityName: i.createElement("strong", null, e.charityName),
                learnMoreURL: i.createElement("a", {
                    href: e.learnMore,
                    target: "_blank"
                }, e.learnMore),
                hashtag: i.createElement("strong", null, e.hashtag),
                timeRemaining: Object(s.e)(t)
            };
            return i.createElement("span", null, 0 === e.daysLeft ? (r = n, Object(a.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more hours to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                bitsTotal: r.bitsTotal,
                charityName: r.charityName,
                timeRemaining: r.timeRemaining,
                hashtag: r.hashtag,
                learnMoreURL: r.learnMoreURL
            }, "ChatLine")) : function(e) {
                return Object(a.d)("{bitsTotal} total raised so far for {charityName}! {timeRemaining} more days to show support. Cheer and include {hashtag}. Learn More at {learnMoreURL}", {
                    bitsTotal: e.bitsTotal,
                    charityName: e.charityName,
                    timeRemaining: e.timeRemaining,
                    hashtag: e.hashtag,
                    learnMoreURL: e.learnMoreURL
                }, "ChatLine")
            }(n));
            var r
        }, t.h = function(e) {
            var t = e.enabled ? Object(a.d)("This room is now in slow mode. You may send messages every {length} seconds.", {
                length: e.length
            }, "ChatLine") : Object(a.d)("This room is no longer in slow mode.", "ChatLine");
            return i.createElement("span", null, t)
        }, t.g = function(e) {
            var t;
            if (e.length > 0) {
                var n = e.join(", ");
                t = Object(a.d)("The moderators of this channel are: {moderatorList}", {
                    moderatorList: n
                }, "ChatLine")
            } else t = Object(a.d)("There are no moderators of this channel.", "ChatLine");
            return i.createElement("span", null, t)
        }, t.d = function(e) {
            if (e.enabled) {
                var t = 0 === e.length ? Object(a.d)("This room is in followers-only mode.", "ChatLine") : Object(a.d)("This room is now in {length} followers-only mode.", {
                    length: Object(o.b)(60 * e.length)
                }, "ChatLine");
                return i.createElement("span", null, t)
            }
            return i.createElement("span", null, Object(a.d)("This room is no longer in followers-only mode.", "ChatLine"))
        }, t.c = function(e) {
            return e.enabled ? i.createElement("span", null, Object(a.d)("This room is now in emote-only mode.", "ChatLine")) : i.createElement("span", null, Object(a.d)("This room is no longer in emote-only mode.", "ChatLine"))
        }, t.i = function(e) {
            var t = e.enabled ? Object(a.d)("This room is now in subscriber-only mode.", "ChatLine") : Object(a.d)("This room is no longer in subscriber-only mode.", "ChatLine");
            return i.createElement("span", null, t)
        }, t.a = g, t.j = function(e) {
            return i.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, g(new Date(e)))
        }, t.k = function(e) {
            return i.createElement("span", {
                key: "timestamp",
                className: "chat-line__timestamp",
                "data-a-target": "chat-timestamp",
                "data-test-selector": "chat-timestamp"
            }, function(e, t) {
                void 0 === t && (t = {});
                var n = a.o.intl.getLanguageCode() || "en";
                return Intl.DateTimeFormat(n, t).format(e)
            }(new Date(e), {
                hour: "numeric",
                minute: "numeric"
            }))
        };
        var i = n("GiK3"),
            a = (n.n(i), n("6sO2")),
            r = n("o5l+"),
            o = n("FsFC"),
            s = n("J4ib"),
            l = n("hXeO"),
            d = n("5vPJ"),
            c = n("L8zk"),
            u = n("kBA+"),
            m = n("qkCi"),
            p = n("mwvJ");

        function h(e, t) {
            return i.createElement("a", {
                key: e,
                className: "chat-line__message--link",
                href: t.content.url,
                target: "_blank",
                rel: "noreferrer noopener"
            }, t.content.displayText)
        }

        function g(e) {
            var t = e.getHours() % 12;
            0 === t && (t = 12);
            var n = e.getMinutes(),
                i = n.toString();
            return n < 10 && (i = "0" + i), t + ":" + i
        }
    },
    gGMi: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "b", function() {
                return i
            }), n.d(t, "a", function() {
                return r
            }),
            function(e) {
                e.Everyone = "EVERYONE", e.Moderator = "MODERATOR", e.Subscriber = "SUBSCRIBER"
            }(i || (i = {}));
        var a, r = ((a = {})[i.Everyone] = "Everyone", a[i.Moderator] = "Mods", a[i.Subscriber] = "Subs", a)
    },
    go0B: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomSelector"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "channelRooms"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "name"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "topic"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPreviewable"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minimumAllowedRole"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isArchived"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isMuted"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isUnread"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "unreadMentionCount"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hosting"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isChannelMember"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isModerator"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "subscriptionBenefit"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 280
            }
        };
        n.loc.source = {
            body: "query RoomSelector ($login: String!) {\nuser(login: $login) {\nid\nchannelRooms {\nname\nid\ntopic\nisPreviewable\nminimumAllowedRole\nself {\nisArchived\nisMuted\nisUnread\nunreadMentionCount\n}\n}\nhosting {\nid\n}\nself {\nisChannelMember\nisModerator\nsubscriptionBenefit {\nid\n}\n}\nstream {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    gv4B: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomPane"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "badge"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topic"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lastReadAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMentionCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "broadcastBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "cheer"
                                        },
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [{
                                            kind: "Directive",
                                            name: {
                                                kind: "Name",
                                                value: "include"
                                            },
                                            arguments: [{
                                                kind: "Argument",
                                                name: {
                                                    kind: "Name",
                                                    value: "if"
                                                },
                                                value: {
                                                    kind: "Variable",
                                                    name: {
                                                        kind: "Name",
                                                        value: "isLoggedIn"
                                                    }
                                                }
                                            }]
                                        }],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isModerator"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayBadges"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "channelID"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "channelID"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "setID"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "version"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 581
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\n#import "twilight/features/chat/models/cheer-fragment.gql"\nquery RoomPane($roomID: ID! $isLoggedIn: Boolean! $userID: ID $channelID: ID!) {\nbadges {\n...badge\n}\nroom(id: $roomID) {\nid\ntopic\nminimumAllowedRole\nself {\nlastReadAt\nunreadMentionCount\n}\nowner {\nid\ndisplayName\nlogin\nbroadcastBadges {\n...badge\n}\n...cheer\nself @include(if: $isLoggedIn) {\nisModerator\n}\n}\n}\nuser(id: $userID) @include(if: $isLoggedIn) {\nid\nlogin\ndisplayBadges(channelID: $channelID) {\nsetID\nversion\n}\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};

        function r(e) {
            return e.filter(function(e) {
                if ("FragmentDefinition" !== e.kind) return !0;
                var t = e.name.value;
                return !a[t] && (a[t] = !0, !0)
            })
        }
        i.definitions = i.definitions.concat(r(n("QU+n").definitions)), i.definitions = i.definitions.concat(r(n("576g").definitions)), e.exports = i
    },
    gwjw: function(e, t) {},
    h4Qz: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Thread_WhisperThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "cursor"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "Cursor"
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "whisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "userLastMessageRead"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "sentAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "participants"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "chatColor"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "profileImageURL"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "width"
                                            },
                                            value: {
                                                kind: "IntValue",
                                                value: "70"
                                            }
                                        }],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "spamInfo"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "lastMarkedNotSpamAt"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "likelihood"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isMuted"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isArchived"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "messages"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "20"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "after"
                                    },
                                    value: {
                                        kind: "Variable",
                                        name: {
                                            kind: "Name",
                                            value: "cursor"
                                        }
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cursor"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "content"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "content"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }, {
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "emotes"
                                                                },
                                                                arguments: [],
                                                                directives: [],
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [{
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "id"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "emoteID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "setID"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "from"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }, {
                                                                        kind: "Field",
                                                                        name: {
                                                                            kind: "Name",
                                                                            value: "to"
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }]
                                                                }
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "from"
                                                        },
                                                        arguments: [],
                                                        directives: [],
                                                        selectionSet: {
                                                            kind: "SelectionSet",
                                                            selections: [{
                                                                kind: "Field",
                                                                name: {
                                                                    kind: "Name",
                                                                    value: "id"
                                                                },
                                                                arguments: [],
                                                                directives: []
                                                            }]
                                                        }
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "sentAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "editedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "deletedAt"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "unreadMessagesCount"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 449
            }
        };
        n.loc.source = {
            body: "query Whispers_Thread_WhisperThread($id: ID! $cursor: Cursor) {\nwhisperThread(id: $id) {\nid\nuserLastMessageRead {\nid\nsentAt\n}\nparticipants {\nid\nchatColor\ndisplayName\nprofileImageURL(width: 70)\nlogin\n}\nspamInfo {\nlastMarkedNotSpamAt\nlikelihood\n}\nisMuted\nisArchived\nmessages(first: 20 after: $cursor) {\nedges {\ncursor\nnode {\nid\ncontent {\ncontent\nemotes {\nid\nemoteID\nsetID\nfrom\nto\n}\n}\nfrom {\nid\n}\nsentAt\neditedAt\ndeletedAt\n}\n}\n}\nunreadMessagesCount\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    hXeO: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("GiK3"),
            a = (n.n(i), n("8RKZ")),
            r = function(e) {
                var t, n = e.emote,
                    r = n.alt || "";
                return n.cheerAmount && (r += " " + n.cheerAmount.toString(), t = i.createElement("strong", {
                    className: "chat-line__message--cheer-amount",
                    style: {
                        color: n.cheerColor
                    }
                }, n.cheerAmount)), i.createElement(a.a, {
                    alt: r,
                    cheerText: t,
                    className: "chat-line__message--emote",
                    srcKey: "1x",
                    srcSet: n.images
                })
            }
    },
    hcyD: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return d
        });
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("vH/s"),
            o = n("l7/s"),
            s = (n.n(o), n("QFW6")),
            l = this,
            d = function(e) {
                return i.__awaiter(l, void 0, void 0, function() {
                    var t, n, l, d;
                    return i.__generator(this, function(c) {
                        switch (c.label) {
                            case 0:
                                t = null, c.label = 1;
                            case 1:
                                return c.trys.push([1, 3, , 4]), [4, a.o.apollo.client.query({
                                    query: o,
                                    variables: {
                                        id: e.channelID
                                    }
                                })];
                            case 2:
                                return t = c.sent(), [3, 4];
                            case 3:
                                return n = c.sent(), a.j.error(n, "ChatEvent query failed."), [3, 4];
                            case 4:
                                return t && t.data || a.j.warn("ChatEvent query failed; Chat tracking data sent may be incomplete."), l = t && t.data && t.data.user || null, d = i.__assign({}, Object(s.a)(e), {
                                    broadcast_id: a.n.getVideoPlayerTrackingData().broadcastID,
                                    channel_id: e.channelID,
                                    game: l && l.stream && l.stream.game && l.stream.game.name,
                                    live: !!(l && l.stream && l.stream.id.length > 0),
                                    partner: l && l.isPartner || !1,
                                    play_session_id: a.n.getVideoPlayerTrackingData().playSessionID,
                                    player: e.player,
                                    ritual_nca: e.fromNewChatterRitual || !1,
                                    sub_only_mode: e.subOnlyMode
                                }), a.n.track(r.SpadeEventType.Chat, d), [2]
                        }
                    })
                })
            }
    },
    hmtx: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "MuteButton_MuteRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateRoomViewInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateRoomView"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roomView"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 117
            }
        };
        n.loc.source = {
            body: "mutation MuteButton_MuteRoom($input: UpdateRoomViewInput!) {\nupdateRoomView(input: $input) {\nroomView {\nisMuted\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    hvzu: function(e, t, n) {
        "use strict";
        var i, a = n("TToO"),
            r = n("GiK3"),
            o = n("6sO2"),
            s = n("8RKZ"),
            l = n("l21v");
        ! function(e) {
            e[e.Text = 0] = "Text", e[e.Link = 1] = "Link"
        }(i || (i = {}));
        var d = n("Odds");
        t.a = m, n.d(t, "g", function() {
            return p
        }), n.d(t, "f", function() {
            return h
        }), n.d(t, "b", function() {
            return g
        }), n.d(t, "e", function() {
            return f
        }), n.d(t, "d", function() {
            return v
        }), n.d(t, "c", function() {
            return b
        });
        var c = "whisper-message-part";

        function u(e) {
            var t = function(e) {
                var t = e.split(/\s+/),
                    n = [];
                return t.forEach(function(e, a) {
                    var r = /([^\w@#%\-+=:~])?(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,8}(?:\/[\w./@#%&()\-+=:?~]*)?)([^\w./@#%&()\-+=:?~]|\s|$)/g,
                        o = r.exec(e);
                    if (o) {
                        var s = o.index,
                            l = !1,
                            d = !1,
                            c = o[1];
                        c && (s += 1, /\s/.test(c) || (l = !0)), 0 !== s && n.push({
                            type: i.Text,
                            content: (d ? " " : "") + e.slice(0, s) + (l ? " " : "")
                        }), d = !1;
                        var u = r.lastIndex,
                            m = o[3];
                        m && (u -= 1, /\s/.test(m) || (d = !0));
                        var p = e.slice(s, u);
                        if (p.indexOf("@") > -1 && (-1 === p.indexOf("/") || p.indexOf("@") < p.indexOf("/"))) n.push({
                            type: i.Link,
                            content: {
                                displayText: p,
                                url: "mailto:" + p,
                                shouldOpenInNewTab: !1
                            }
                        });
                        else {
                            var h = (o[2] ? "" : "https://") + e.slice(s, u);
                            n.push({
                                type: i.Link,
                                content: {
                                    displayText: e.slice(s, u),
                                    shouldOpenInNewTab: !0,
                                    url: h
                                }
                            })
                        }
                        var g = e.slice(u),
                            f = "";
                        a < t.length - 1 && (f = " "), g && n.push({
                            type: i.Text,
                            content: (d ? " " : "") + g + f
                        })
                    } else {
                        var v = n.length && n[n.length - 1];
                        if (f = "", a < t.length - 1 && (f = " "), v && v.type === i.Text) v.content += e + f;
                        else {
                            var b = "";
                            a && (b = " "), n.push({
                                type: i.Text,
                                content: b + e + f
                            })
                        }
                    }
                }), n
            }(e);
            return t.reduce(function(e, n, a) {
                if (n.type === i.Text) e.push(n.content);
                else if (n.type === i.Link) {
                    t[a - 1] && t[a - 1].type === i.Link && e.push(" "), e.push(r.createElement("a", {
                        key: a,
                        href: n.content.url,
                        target: "__blank"
                    }, n.content.displayText))
                }
                return e
            }, [])
        }

        function m(e, t, n) {
            var i = [],
                a = 0,
                m = Object(l.d)(e);
            if (t.forEach(function(t) {
                    var n = t.from,
                        o = t.to,
                        p = {
                            themed: !1,
                            sources: {
                                "1x": Object(l.f)("" + t.emoteID, 1),
                                "2x": Object(l.f)("" + t.emoteID, 2),
                                "4x": Object(l.f)("" + t.emoteID, 4)
                            }
                        };
                    if (n > a) {
                        var h = m ? m.slice(a, n).join("") : e.slice(a, n);
                        i.push(r.createElement("span", {
                            key: "str-" + a,
                            "data-a-target": c,
                            className: "thread-message__message--part"
                        }, u(h)))
                    }
                    var g = m ? m.slice(n, o + 1).join("") : e.slice(n, o + 1);
                    i.push(r.createElement(s.a, {
                        key: "emote-" + a,
                        tooltipDirection: d._54.Top,
                        className: "thread-message__message--emote",
                        srcSet: p,
                        srcKey: "1x",
                        alt: g
                    })), a = o + 1
                }), a < e.length) {
                var p = m ? m.slice(a, m.length).join("") : e.slice(a, e.length);
                i.push(r.createElement("span", {
                    key: "str-" + a,
                    "data-a-target": c,
                    className: "thread-message__message--part"
                }, u(p)))
            }
            if (n) {
                var h = Object(o.d)("edited", "ThreadMessage"),
                    g = Object(o.d)("{timestamp, date, full} {timestamp, time, long}", {
                        timestamp: new Date(n)
                    }, "ThreadMessage");
                i.push(r.createElement(d._2, {
                    key: "editedAt",
                    margin: {
                        left: 1
                    }
                }, r.createElement(d.Q, {
                    type: d._49.Span,
                    className: "thread-message__message--edited",
                    title: g,
                    color: d.K.Alt2
                }, "(" + h + ")")))
            }
            return i
        }
        var p = function(e) {
                var t = "/me " === e.content.substr(0, 4);
                t && (e.content = e.content.substr(4), e.emotes = e.emotes.map(function(e) {
                    return a.__assign({}, e, {
                        from: e.from - 4,
                        to: e.to - 4
                    })
                }));
                var n = m(e.content, e.emotes, e.editedAt);
                if (n.unshift(r.createElement("span", {
                        key: "str-separator"
                    }, t ? " " : ": ")), e.deletedAt) return null;
                var i = e.from && e.from.chatColor || "",
                    s = e.from && e.from.displayName || r.createElement(d.Q, {
                        type: d._49.Span,
                        italic: !0
                    }, Object(o.d)("Unknown", "ThreadMessage")),
                    l = t ? i : "";
                return r.createElement(d._8, {
                    padding: {
                        x: 1,
                        y: .5
                    }
                }, r.createElement("span", {
                    className: "thread-message__message--user-name",
                    "data-a-target": "whisper-message-name",
                    style: {
                        color: i
                    }
                }, s), r.createElement("span", {
                    style: {
                        color: l
                    }
                }, n))
            },
            h = function() {
                return r.createElement(d._8, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(o.d)("Please don't share passwords or personal information.", "whispers"))
            },
            g = function() {
                return r.createElement(d._8, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, Object(o.d)("This account is no longer active.", "whispers"))
            },
            f = function(e) {
                var t = new Date,
                    n = Object(o.d)("Today, {timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    i = Object(o.d)("{timestamp, time, medium}", {
                        timestamp: e.timestamp
                    }, "ThreadMessage"),
                    a = e.timestamp.toDateString() === t.toDateString() ? n : i;
                return r.createElement(d._8, {
                    padding: {
                        y: 1
                    },
                    textAlign: d._45.Center
                }, "" + a)
            },
            v = function(e) {
                return r.createElement(d._8, {
                    padding: {
                        y: .5,
                        x: 1
                    }
                }, r.createElement(d.Q, {
                    type: d._49.Span,
                    color: d.K.Alt2
                }, e.content))
            },
            b = function() {
                return r.createElement(d._8, {
                    textAlign: d._45.Center,
                    padding: {
                        y: .5
                    }
                }, Object(o.d)("New Whispers", "whispers"))
            }
    },
    iMOk: function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            a = n("6sO2"),
            r = n("NXs7"),
            o = n("3iBR"),
            s = n("iydZ"),
            l = n("CFVp"),
            d = n("qe65");
        n("1pvm");

        function c(e) {
            var t, n = Object(a.d)("{bitsAmount} Bits", {
                bitsAmount: e.count.toString()
            }, "Bits--BitsCount");
            if (e.withImage) {
                var c = e.bitsConfig && e.bitsConfig.indexedActions[o.g];
                c || (c = Object(l.b)());
                var u = c.orderedTiers.find(function(t) {
                    return t.bits <= e.count
                });
                if (u) {
                    var m = Object(s.b)(u, void 0, e.animated);
                    return void 0 !== e.themeOverride && (e.themeOverride === r.a.Light ? m.dark = m.light : m.light = m.dark), t = i.createElement(d.a, {
                        className: "bits-count--img",
                        sources: m
                    }), i.createElement("strong", {
                        className: "bits-count",
                        "data-a-target": "bits-count"
                    }, i.createElement("span", null, t, " ", e.withText ? n : ""))
                }
            }
            return i.createElement("strong", {
                className: "bits-count",
                "data-a-target": "bits-count"
            }, i.createElement("span", null, n))
        }
        n.d(t, "a", function() {
            return c
        })
    },
    iOr9: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    n.logger = r.o.logger.withCategory("component-experiment");
                    var i = r.o.experiments.getAssignment(n.props.name, n.props.channel ? {
                        channel: n.props.channel
                    } : {});
                    return i && n.props.assignments[i] ? n.logger.debug("Displaying component for experiment", {
                        name: n.props.name,
                        assignment: i
                    }) : n.logger.debug("Displaying fallback component for experiment", {
                        name: n.props.name,
                        assignment: i
                    }), n.state = {
                        assignment: i
                    }, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.state.assignment && this.props.assignments[this.state.assignment]) {
                        var e = this.props.assignments[this.state.assignment]();
                        return "string" == typeof e ? (window.location.replace(e), null) : e
                    }
                    return this.props.assignments.fallback()
                }, t
            }(a.Component);
        n.d(t, "a", function() {
            return o
        })
    },
    iWdz: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BitsCard_Bits"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "name"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "bitsBalance"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "cheer"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "settings"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "emoteMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "cheerMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "recentMinimumBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "event"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "bitsBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "totalBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "nextBits"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "progress"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "current"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "next"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "FragmentSpread",
                                                        name: {
                                                            kind: "Name",
                                                            value: "badge"
                                                        },
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "tournament"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "teams"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 381
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery BitsCard_Bits($name: ID!) {\ncurrentUser {\nid\nbitsBalance\nlogin\n}\nuser(id: $name) {\nid\ndisplayName\ncheer {\nid\nsettings {\nemoteMinimumBits\ncheerMinimumBits\nrecentMinimumBits\nevent\n}\n}\nself {\nbitsBadge {\nid\ntotalBits\nnextBits\nprogress\ncurrent {\n...badge\n}\nnext {\n...badge\n}\n}\n}\ntournament {\nid\nteams {\nid\nname\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    ieBa: function(e, t, n) {
        "use strict";
        var i = n("RH2O"),
            a = n("TToO"),
            r = n("GiK3"),
            o = n("rCmJ"),
            s = n("6sO2"),
            l = n("Odds"),
            d = function(e) {
                return r.createElement(l.w, {
                    icon: l._25.Emoticons,
                    ariaLabel: Object(s.d)("Emote picker", "EmotePickerButton"),
                    type: l.y.Secondary,
                    onClick: e.onClick,
                    "data-a-target": "emote-picker-button"
                })
            },
            c = n("P+j/"),
            u = n("CSlQ"),
            m = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        hasInteracted: !1,
                        isEmotePickerMenuVisible: !1,
                        isEmotePickerButtonVisible: !1
                    }, t.onClickOut = function() {
                        t.setState({
                            isEmotePickerMenuVisible: !1
                        })
                    }, t.onClickEmote = function(e, n) {
                        t.props.onClickEmote && t.props.onClickEmote(e, n)
                    }, t.toggleEmotePicker = function() {
                        t.setState(function(e) {
                            return {
                                isEmotePickerMenuVisible: !e.isEmotePickerMenuVisible
                            }
                        })
                    }, t.onEmotePickerDataLoaded = function(e) {
                        e && t.setState({
                            isEmotePickerButtonVisible: !0
                        })
                    }, t.onInteraction = function() {
                        return t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return a.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive(), this.props.inputRef && (this.props.inputRef.addEventListener("mouseenter", this.onInteraction), this.props.inputRef.addEventListener("focus", this.onInteraction))
                }, t.prototype.componentWillUnmount = function() {
                    this.props.inputRef && (this.props.inputRef.removeEventListener("mouseenter", this.onInteraction), this.props.inputRef.removeEventListener("focus", this.onInteraction))
                }, t.prototype.render = function() {
                    var e = null;
                    this.state.isEmotePickerButtonVisible && (e = r.createElement(d, {
                        onClick: this.toggleEmotePicker
                    }));
                    var t = null;
                    this.hasInteractedOrPageload && (t = r.createElement(c.a, {
                        channelOwnerID: this.props.channelOwnerID,
                        onClickEmote: this.onClickEmote,
                        onLoad: this.onEmotePickerDataLoaded,
                        toggleVisibility: this.toggleEmotePicker,
                        visible: this.state.isEmotePickerMenuVisible,
                        direction: this.props.direction
                    }));
                    var n = r.createElement(l._8, a.__assign({
                        className: "emote-picker-and-button"
                    }, this.layoutProps), e, t);
                    return this.props.shouldCloseOnClickOut ? r.createElement(o.a, {
                        onClickOut: this.onClickOut
                    }, n) : n
                }, Object.defineProperty(t.prototype, "hasInteractedOrPageload", {
                    get: function() {
                        return !(!this.props.firstPageLoaded && !this.state.hasInteracted)
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(t.prototype, "layoutProps", {
                    get: function() {
                        var e = {
                            attachTop: !!this.props.attachTop,
                            attachRight: !!this.props.attachRight,
                            attachBottom: !!this.props.attachBottom,
                            attachLeft: !!this.props.attachLeft,
                            padding: this.props.padding
                        };
                        return this.props.position && (e.position = this.props.position), e
                    },
                    enumerable: !0,
                    configurable: !0
                }), t
            }(r.Component),
            p = Object(u.d)("EmotePicker")(m);
        var h = Object(i.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded
                }
            })(p),
            g = n("nEoF");
        n.d(t, "a", function() {
            return h
        }), n.d(t, "c", function() {
            return c.a
        }), n.d(t, !1, function() {
            return g.c
        }), n.d(t, !1, function() {
            return g.b
        }), n.d(t, !1, function() {
            return g.a
        }), n.d(t, "b", function() {
            return d
        })
    },
    ilhN: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_CreateFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "createFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "friendButtonFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nmutation FriendButton_CreateFriendRequest($input: CreateFriendRequestInput!) {\ncreateFriendRequest(input: $input) {\nuser {\nid\n...friendButtonFragment\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    imaO: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RedeemNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "redeemRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 182
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RedeemNewChatterToken($input: RedeemRitualTokenInput!) {\nredeemRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    iqz2: function(e, t) {},
    iydZ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return o
        }), t.c = function(e, t) {
            var n = [],
                o = t.indexedActions,
                l = new RegExp("^(" + Object.keys(o).join("|") + ")(\\d+)$", "i"),
                d = e.split(/\s+/);
            return d.forEach(function(e, t) {
                var c = l.exec(e);
                if (c) {
                    var u = c[1].toLowerCase(),
                        m = +c[2],
                        p = o[u];
                    if (p || u !== i.g || (p = Object(a.b)()), p) {
                        var h = p.orderedTiers.find(function(e) {
                            return e.bits <= m
                        });
                        !h && m && (h = p.orderedTiers[0]), h && n.push({
                            type: r.a.Emote,
                            content: {
                                images: s(h),
                                alt: p.prefix,
                                cheerAmount: m,
                                cheerColor: h.color
                            }
                        })
                    }
                } else {
                    var g = n.length && n[n.length - 1],
                        f = "";
                    if (t < d.length - 1 && (f = " "), g && g.type === r.a.Text) g.content += e + f;
                    else {
                        var v = "";
                        t && (v = " "), n.push({
                            type: r.a.Text,
                            content: v + e + f
                        })
                    }
                }
            }), n
        }, t.b = s;
        var i = n("3iBR"),
            a = n("CFVp"),
            r = n("mwvJ"),
            o = {
                indexedActions: {},
                orderedActions: []
            };

        function s(e, t, n) {
            void 0 === n && (n = !0);
            var i, a, r = n ? "animated" : "static";
            return t ? {
                themed: !0,
                dark: (i = {}, i[t + "x"] = e.indexedImages.DARK[r].get(t), i),
                light: (a = {}, a[t + "x"] = e.indexedImages.LIGHT[r].get(t), a)
            } : {
                themed: !0,
                dark: {
                    "1x": e.indexedImages.DARK[r].get(1),
                    "1.5x": e.indexedImages.DARK[r].get(1.5),
                    "2x": e.indexedImages.DARK[r].get(2),
                    "3x": e.indexedImages.DARK[r].get(3),
                    "4x": e.indexedImages.DARK[r].get(4)
                },
                light: {
                    "1x": e.indexedImages.LIGHT[r].get(1),
                    "1.5x": e.indexedImages.LIGHT[r].get(1.5),
                    "2x": e.indexedImages.LIGHT[r].get(2),
                    "3x": e.indexedImages.LIGHT[r].get(3),
                    "4x": e.indexedImages.LIGHT[r].get(4)
                }
            }
        }
    },
    "j/3B": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualToken"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "RitualToken"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "expiresAt"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "status"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "type"
                        },
                        arguments: [],
                        directives: []
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 64
            }
        };
        n.loc.source = {
            body: "fragment ritualToken on RitualToken {\nid\nexpiresAt\nstatus\ntype\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "j7/Y": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("OAwv"),
            r = n("GiK3"),
            o = n("F8kA"),
            s = n("6sO2");

        function l(e) {
            return function(t) {
                var n = function(n) {
                    function o(t) {
                        var a = n.call(this, t) || this;
                        return a.tracked = !1, a.referenceTracking = {}, a.trackPageview = function() {
                            if (!(a.tracked || e.skip && e.skip(a.props))) {
                                a.tracked = !0;
                                var t = {};
                                "function" == typeof e.properties ? t = e.properties(a.props) : e.properties && (t = i.__assign({}, e.properties));
                                var n = i.__assign({}, a.props);
                                n.location && n.location.state && (t.medium = n.location.state.medium, t.content = n.location.state.content, t.content_index = n.location.state.content_index);
                                var r = a.referenceTracking,
                                    o = r.content,
                                    l = r.medium,
                                    d = r.content_index;
                                s.o.tracking.trackPageview(i.__assign({
                                    content: o,
                                    medium: l,
                                    content_index: d,
                                    location: e.location
                                }, t))
                            }
                        }, s.j.debug("pageViewTracking", e), t.rootLatencyTracker ? t.rootLatencyTracker.setLocation(e.location) : s.j.warn("No latency tracker exists! This means no data will be sent to Spade.", e), a
                    }
                    return i.__extends(o, n), o.prototype.componentDidMount = function() {
                        var e = this;
                        this.referenceTracking = this.stripTTParams(this.props.history.location), this.trackPageview(), this.props.history.listen(function(t, n) {
                            "REPLACE" !== n && (e.tracked = !1, e.referenceTracking = {})
                        })
                    }, o.prototype.componentDidUpdate = function() {
                        this.trackPageview()
                    }, o.prototype.render = function() {
                        return r.createElement(t, i.__assign({}, this.props))
                    }, o.prototype.stripTTParams = function(e) {
                        var t = "" !== e.search ? a.parse(e.search) : {},
                            n = {
                                content: t.tt_content,
                                content_index: t.tt_content_index,
                                medium: t.tt_medium
                            };
                        if (delete t.tt_content, delete t.tt_content_index, delete t.tt_medium, n.medium || n.content) {
                            var i = "",
                                r = a.stringify(t);
                            r.length > 0 && (i = "?" + r), this.props.history.replace({
                                pathname: e.pathname,
                                hash: e.hash,
                                search: i
                            })
                        }
                        return n
                    }, o
                }(r.Component);
                return Object(o.f)(n)
            }
        }
        n.d(t, "a", function() {
            return l
        })
    },
    jF7o: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            if (!e) return void i.j.warn("[onPopupClose] Attempted to observe a window that failed to open.");
            var n = setInterval(function() {
                var i = !1,
                    a = !1;
                try {
                    i = e.closed, a = !!e.success
                } catch (e) {}
                if (i || a) {
                    t(a);
                    try {
                        e.close()
                    } catch (e) {}
                    clearInterval(n)
                }
            }, 500)
        };
        var i = n("6sO2")
    },
    jIAO: function(e, t, n) {
        "use strict";
        n("R9op");
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("ass3");
        a.o.store.registerReducer("viewerCard", function(e, t) {
            switch (void 0 === e && (e = {
                viewerCardOptions: null
            }), t.type) {
                case r.a:
                    return i.__assign({}, e, {
                        viewerCardOptions: null
                    });
                case r.b:
                    return t.viewerCardOptions ? i.__assign({}, e, {
                        viewerCardOptions: i.__assign({}, t.viewerCardOptions)
                    }) : e;
                default:
                    return e
            }
        })
    },
    jML9: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RaidNotification_User"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 43
            }
        };
        n.loc.source = {
            body: "query RaidNotification_User {\nuser {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jPU6: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions_BanUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "banUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "ban"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isPermanent"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 136
            }
        };
        n.loc.source = {
            body: "mutation RecentRaidsModActions_BanUser($input: BanUserFromChatRoomInput!) {\nbanUserFromChatRoom(input: $input) {\nban {\nisPermanent\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    jUhM: function(e, t, n) {
        "use strict";
        var i = n("GiK3"),
            a = n("6sO2"),
            r = n("3iBR"),
            o = n("qe65"),
            s = n("Odds"),
            l = (n("FZFL"), {
                themed: !0,
                dark: {
                    "1x": r.b + "/dark/animated/1/cheertutorial.gif"
                },
                light: {
                    "1x": r.b + "/light/animated/1/cheertutorial.gif"
                }
            }),
            d = function() {
                return i.createElement(s._8, {
                    display: s.R.Flex,
                    padding: {
                        top: 5,
                        bottom: 3
                    },
                    flexGrow: 1,
                    flexDirection: s.T.Column,
                    justifyContent: s._7.Center,
                    alignItems: s.c.Center
                }, i.createElement(s.Q, {
                    type: s._49.H4,
                    bold: !0
                }, i.createElement(o.a, {
                    className: "cheermote-help__tutorial-image",
                    sources: l
                }), Object(a.d)("How to Cheer", "Bits--CheermoteHelp")), i.createElement(s._8, {
                    padding: {
                        x: 3
                    }
                }, i.createElement(s.Q, null, Object(a.d)('Type "cheer" + the number of Bits you want to Cheer.', "Bits--CheermoteHelp"))))
            };
        n.d(t, "a", function() {
            return d
        })
    },
    jetF: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return s
        });
        var i = n("TToO"),
            a = n("GiK3"),
            r = (n.n(a), n("HM6l")),
            o = n("Odds"),
            s = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        showBalloon: !!t.props.openByDefault,
                        hasInteracted: !!t.props.openByDefault
                    }, t.toggleBalloonId = Object(r.a)(), t.handleButtonClick = function() {
                        t.setState(function(e) {
                            return {
                                showBalloon: !e.showBalloon,
                                hasInteracted: !0
                            }
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.handleGlobalClick = function(e) {
                        e.target.matches('[data-toggle-balloon-id="' + t.toggleBalloonId + '"] *') || t.setState({
                            showBalloon: !1
                        }, function() {
                            t.props.onToggle && t.props.onToggle(!t.state.showBalloon)
                        })
                    }, t.onMouseEnter = function() {
                        t.state.hasInteracted || t.setState({
                            hasInteracted: !0
                        })
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.openByDefault && document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUpdate = function(e, t) {
                    this.state.showBalloon !== t.showBalloon && (t.showBalloon ? document.addEventListener("click", this.handleGlobalClick, !0) : document.removeEventListener("click", this.handleGlobalClick, !0))
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = a.Children.toArray(this.props.children);
                    if (2 !== e.length) throw new Error("ToggleBalloonWrapper should only be given two children: a clickable and a Balloon");
                    var t = e[0],
                        n = e[1];
                    if (n.type !== o.q) throw new Error("ToggleBalloonWrapper needs a Balloon as its second child element");
                    var r = a.cloneElement(t, {
                            onClick: this.handleButtonClick
                        }),
                        s = null;
                    (this.state.hasInteracted || this.props.alwaysMountBalloonContent) && (s = a.cloneElement(n, {
                        show: this.state.showBalloon
                    }));
                    var l = r;
                    return this.props.tooltipProps && (l = a.createElement(o._52, i.__assign({}, this.props.tooltipProps), r)), a.createElement(o._8, {
                        "data-toggle-balloon-id": this.toggleBalloonId,
                        display: this.props.display,
                        position: o._15.Relative
                    }, a.createElement("div", {
                        style: {
                            display: "inherit"
                        },
                        onMouseEnter: this.onMouseEnter,
                        "data-test-selector": "toggle-balloon-wrapper__mouse-enter-detector"
                    }, l), s)
                }, t.prototype.toggleBalloon = function(e) {
                    void 0 === e && (e = !this.state.showBalloon), this.setState({
                        showBalloon: e,
                        hasInteracted: !0
                    })
                }, t
            }(a.Component)
    },
    jxGs: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "e", function() {
            return r
        }), n.d(t, "g", function() {
            return o
        }), n.d(t, "f", function() {
            return s
        }), n.d(t, "c", function() {
            return l
        }), n.d(t, "d", function() {
            return d
        });
        var i = "AD",
            a = "BUNDLE",
            r = "first_time_purchase",
            o = "single_purchase",
            s = "prime_single_purchase",
            l = "black_friday_2017",
            d = "twitch_prime_2018"
    },
    "kBA+": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("7vx8"),
            s = n("SZoP"),
            l = n("GxDs"),
            d = n("Odds"),
            c = n("s+oZ"),
            u = {
                ERROR: "video-chat-card-error"
            },
            m = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props.data,
                        t = e.video,
                        n = e.error,
                        i = e.loading;
                    if (n || t && !t.owner) return a.createElement(l.a, {
                        error: {
                            title: Object(r.d)("Something went wrong", "VideoChatCard"),
                            description: Object(r.d)("We couldn't find that video", "VideoChatCard")
                        }
                    });
                    if (i || !t) return a.createElement(l.a, null);
                    var o = a.createElement(d.Q, null, Object(r.c)(new Date(t.publishedAt), "medium"), a.createElement("span", null, " · "), Object(s.a)(t.owner.login, t.owner.displayName));
                    return a.createElement(l.a, {
                        data: {
                            title: t.title,
                            description: o,
                            previewImageURL: t.previewThumbnailURL,
                            contentURL: this.props.url
                        }
                    })
                }, t
            }(a.Component),
            p = function(e) {
                return {
                    variables: {
                        videoID: e.id
                    },
                    notifyOnNetworkStatusChange: !0,
                    fetchPolicy: "cache-first"
                }
            },
            h = Object(o.a)(c, {
                options: p
            })(m);
        n.d(t, !1, function() {
            return "https://static-cdn.jtvnw.net/emoticons/v1/58765/2.0"
        }), n.d(t, !1, function() {
            return u
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, !1, function() {
            return p
        }), n.d(t, "a", function() {
            return h
        })
    },
    kjfG: function(e, t) {},
    kpSd: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("2KeS"),
            s = n("6sO2"),
            l = n("RweG"),
            d = n("aMxy"),
            c = n("HZww"),
            u = n("pexS"),
            m = n("R9op"),
            p = n("DtWM"),
            h = n("zCIC"),
            g = n("4Q5V"),
            f = n("CSlQ"),
            v = n("Odds"),
            b = (n("rMeN"), ["scroll", "wheel", "mousewheel", "DOMMouseScroll", "keyup", "mousedown"]),
            k = 10,
            y = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.state = {
                        isAutoScrolling: !0
                    }, t.saveScrollRef = function(e) {
                        return t.scroll = e
                    }, t.handleScrollEvent = function(e) {
                        t.scroll && t.scroll.scrollContent && (e.which > 0 || "mousedown" === e.type || "mousewheel" === e.type || "wheel" === e.type) && (t.scroll.scrollContent.scrollHeight - t.scroll.scrollContent.scrollTop - t.scroll.scrollContent.offsetHeight <= k ? t.setState({
                            isAutoScrolling: !0
                        }) : t.setState({
                            isAutoScrolling: !1
                        }))
                    }, t.handleResize = function() {
                        t.state.isAutoScrolling && t.scrollToBottom()
                    }, t.handleClickMoreMessages = function() {
                        t.setState({
                            isAutoScrolling: !0
                        }, t.scrollToBottom)
                    }, t.scrollToBottom = function() {
                        t.scroll && t.scroll.scrollContent && (t.scroll.scrollContent.scrollTop = t.scroll.scrollContent.scrollHeight)
                    }, t.reportChatRenderSent = function() {
                        t.props.chatRenderSentEvent && t.props.latencyTracking.reportCustomEvent(t.props.chatRenderSentEvent)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    var e = this;
                    b.forEach(function(t) {
                        e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.addEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentWillUnmount = function() {
                    var e = this;
                    b.forEach(function(t) {
                        e.scroll && e.scroll.scrollContent && e.scroll.scrollContent.removeEventListener(t, e.handleScrollEvent)
                    })
                }, t.prototype.componentDidUpdate = function(e) {
                    this.state.isAutoScrolling && this.props.messages !== e.messages && this.scrollToBottom()
                }, t.prototype.render = function() {
                    var e = this,
                        t = this.props.messages.map(function(t) {
                            return a.createElement(g.a, {
                                badgeSets: e.props.badgeSets,
                                channelID: e.props.channelID,
                                isCurrentUserModerator: e.props.isCurrentUserModerator,
                                isCurrentUserStaff: e.props.isCurrentUserStaff,
                                message: t,
                                key: t.id,
                                showAutoModActions: e.props.showAutoModActions,
                                showModerationActions: e.props.showModerationActions,
                                showModerationIcons: e.props.showModerationIcons && !e.props.isEmbedded,
                                showTimestamps: e.props.showTimestamps,
                                currentUserDisplayName: e.props.currentUserDisplayName,
                                currentUserLogin: e.props.currentUserLogin,
                                onPushMessage: e.props.onPushMessage,
                                doesNotUpdate: !0,
                                onRenderReportChatSent: e.reportChatRenderSent
                            })
                        });
                    return a.createElement(v._8, {
                        refDelegate: this.props.containerRef,
                        className: "chat-list",
                        display: v.R.Flex,
                        flexDirection: v.T.Column,
                        flexWrap: v.U.NoWrap,
                        overflow: v._11.Hidden,
                        flexGrow: 1
                    }, a.createElement(p.a, {
                        onResize: this.handleResize
                    }), a.createElement(v._2, {
                        flexGrow: 1
                    }, a.createElement(h.b, {
                        className: "chat-list__lines",
                        scrollRef: this.saveScrollRef,
                        "data-a-target": "chat-scroller"
                    }, a.createElement(v._2, {
                        flexGrow: 1,
                        fullHeight: !0,
                        padding: {
                            bottom: 1
                        }
                    }, a.createElement("div", {
                        role: "log"
                    }, t)))), a.createElement(v._8, {
                        className: "chat-list__more-messages-placeholder",
                        position: v._15.Relative,
                        margin: {
                            x: 2
                        }
                    }, this.moreMessages()))
                }, t.prototype.moreMessages = function() {
                    return this.state.isAutoScrolling ? null : a.createElement(v._2, {
                        display: v.R.Flex,
                        justifyContent: v._7.Center,
                        alignItems: v.c.Center,
                        position: v._15.Absolute,
                        padding: .5,
                        attachBottom: !0,
                        fullWidth: !0
                    }, a.createElement("div", {
                        className: "chat-list__more-messages",
                        onClick: this.handleClickMoreMessages
                    }, Object(s.d)("More messages below.", "ChatList")))
                }, t = i.__decorate([Object(f.d)("ChatListPresentation", {
                    autoReportInteractive: !0
                })], t)
            }(a.Component),
            _ = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                    var t, n, i = e.pubsub.messages.chatRichEmbedInfo;
                    i && this.props.pubsub.messages.chatRichEmbedInfo !== i && s.o.apollo.client.writeQuery({
                        query: u,
                        variables: {
                            slug: i.data.twitch_metadata.clip_metadata.slug
                        },
                        data: (t = i, n = t.data.twitch_metadata.clip_metadata, {
                            clip: {
                                slug: n.slug,
                                id: n.id,
                                url: t.data.request_url,
                                title: t.data.title,
                                thumbnailURL: t.data.thumbnail_url,
                                curator: n.curator_id ? {
                                    displayName: t.data.author_name,
                                    id: n.curator_id,
                                    __typename: "User"
                                } : null,
                                broadcaster: n.channel_display_name ? {
                                    displayName: n.channel_display_name,
                                    id: n.broadcaster_id,
                                    __typename: "User"
                                } : null,
                                __typename: "Clip"
                            }
                        })
                    })
                }, t.prototype.render = function() {
                    return a.createElement(y, {
                        channelID: this.props.channelID,
                        badgeSets: this.props.badgeSets,
                        currentUserDisplayName: this.props.currentUserDisplayName,
                        channelLogin: this.props.channelLogin,
                        onPushMessage: this.props.onPushMessage,
                        isCurrentUserModerator: this.props.isCurrentUserModerator,
                        isCurrentUserStaff: this.props.isCurrentUserStaff,
                        isEmbedded: this.props.isEmbedded,
                        messages: this.props.messages,
                        showAutoModActions: this.props.showAutoModActions,
                        showModerationActions: this.props.showModerationActions,
                        showModerationIcons: this.props.showModerationIcons,
                        showTimestamps: this.props.showTimestamps,
                        currentUserLogin: this.props.currentUserLogin,
                        containerRef: this.props.containerRef,
                        chatRenderSentEvent: this.props.chatRenderSentEvent
                    })
                }, t
            }(a.Component);
        var C, S = Object(o.d)(Object(r.b)(function(e, t) {
            return {
                chatRenderSentEvent: Object(m.c)(e),
                messages: Object(m.a)(e, t.channelLogin),
                showAutoModActions: e.chat.showAutoModActions,
                showModerationActions: e.chat.showModerationActions,
                showModerationIcons: e.chat.showModIcons,
                showTimestamps: e.chat.showTimestamps
            }
        }), Object(l.a)([{
            skip: function(e) {
                return !e.channelID
            },
            topic: function(e) {
                return e.channelID ? Object(c.p)(e.channelID) : ""
            },
            mapMessageTypesToProps: (C = {}, C[d.PubsubMessageType.StreamChatRoomChatRichEmbed] = "chatRichEmbedInfo", C)
        }]))(_);
        n.d(t, !1, function() {
            return _
        }), n.d(t, "a", function() {
            return S
        })
    },
    kvxA: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomDetails"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "topic"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 134
            }
        };
        n.loc.source = {
            body: "query RoomDetails($id: ID!) {\nroom(id: $id) {\nid\nname\ntopic\nisPreviewable\nminimumAllowedRole\nowner {\nid\nself {\nisChannelMember\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    l21v: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("Aj/L"),
            o = n("iydZ"),
            s = n("mwvJ"),
            l = new RegExp("(?:^|\\s)(?:https?://)?clips.twitch.tv/(\\w+)(?:/)?(\\w+)?(?:/edit)?(?:$|\\s)?");
        var d = n("YhVV"),
            c = n("3KVC"),
            u = n("e1CU");
        t.a = function(e, t, n, a, r, o) {
            void 0 === o && (o = !1);
            var s;
            s = r ? Object(d.b)(e, r) : function(e) {
                var t = [];
                e && Object.keys(e).forEach(function(n) {
                    var i = e[n];
                    i.forEach(function(e) {
                        t[e.startIndex] = {
                            startIndex: e.startIndex,
                            endIndex: e.endIndex + 1,
                            data: {
                                images: {
                                    themed: !1,
                                    sources: {
                                        "1x": C(n, 1),
                                        "2x": C(n, 2),
                                        "4x": C(n, 4)
                                    }
                                }
                            }
                        }
                    })
                });
                return t
            }(t.emotes);
            var l = Object(u.a)(t.displayName, t.username);
            return {
                badges: t.badges || {},
                bits: t.bits,
                user: i.__assign({}, l, {
                    userLogin: t.username,
                    userID: t.userID,
                    userType: t.userType,
                    color: t.color || v(t.userID)
                }),
                messageParts: e ? b(e, s, t.bits, n, a, t.username) : [],
                deleted: o,
                timestamp: Date.now()
            }
        }, t.b = v, t.g = b, t.d = k, t.c = _, t.f = C, t.e = function(e) {
            return {
                src: C(e, 1),
                srcSet: C(e, 1) + " 1x, " + C(e, 2) + " 2x, " + C(e, 3) + " 4x"
            }
        };
        var m = ["#FF0000", "#0000FF", "#008000", "#B22222", "#FF7F50", "#9ACD32", "#FF4500", "#2E8B57", "#DAA520", "#D2691E", "#5F9EA0", "#1E90FF", "#FF69B4", "#8A2BE2", "#00FF7F"],
            p = {},
            h = /^(?:(https?:\/\/)?(?:[\w@#%\-+=:~]+\.)+[a-z]{2,8}(?:\/[\w./@#%&()\-+=:?~]*)?)$/g,
            g = /@([^\u0000-\u007F]|[\w-])+/,
            f = /['"*([{</]+/;

        function v(e, t) {
            return void 0 === t && (t = 15), "number" != typeof p[e] && (p[e] = Math.floor(Math.random() * t)), m[p[e]]
        }

        function b(e, t, n, a, r, o) {
            void 0 === t && (t = []);
            var l = [],
                d = 0,
                c = k(e);
            t.forEach(function(t) {
                var u = c ? c.slice(d, t.startIndex).join("") : e.slice(d, t.startIndex);
                u && (l = n ? l.concat(y(u, o, r, a)) : l.concat(_(u, o, r))), l.push({
                    type: s.a.Emote,
                    content: i.__assign({
                        alt: c ? c.slice(t.startIndex, t.endIndex).join("") : e.slice(t.startIndex, t.endIndex)
                    }, t.data)
                }), d = t.endIndex
            });
            var u = c ? c.slice(d).join("") : e.slice(d);
            return u && (l = n ? l.concat(y(u, o, r, a)) : l.concat(_(u, o, r))), l
        }

        function k(e) {
            return e.match(/[^\uD800-\uDFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDFFF]/g)
        }

        function y(e, t, n, i) {
            if (!i) return _(e, t, n);
            var a = Object(o.c)(e, i).map(function(e) {
                return e.type === s.a.Text ? _(e.content, t, n) : e
            });
            return [].concat.apply([], a)
        }

        function _(e, t, n) {
            var i = [],
                o = e.split(/\s+/),
                d = Object(r.c)(a.o.store.getState());
            return o.forEach(function(e, r) {
                h.lastIndex = 0, g.lastIndex = 0;
                var u = h.exec(e),
                    m = 0 === r,
                    p = r === o.length - 1,
                    v = function(e, t, n, i, a) {
                        var r = [],
                            o = e.indexOf("@"),
                            l = e.match(g),
                            d = e.slice(0, o),
                            c = 0 === d.length || f.test(d);
                        if (!l || l.length < 1 || !c) return r;
                        var u = l[0].slice(1);
                        o > 0 && r.push({
                            type: s.a.Text,
                            content: (n ? "" : " ") + e.slice(0, o)
                        });
                        r.push({
                            type: s.a.Mention,
                            content: {
                                sender: t,
                                recipient: u,
                                isCurrentUserRecipient: S(u, a)
                            }
                        });
                        var m = o + u.length + 1;
                        m < e.length && r.push({
                            type: s.a.Text,
                            content: e.slice(m) + (i ? "" : " ")
                        });
                        return r
                    }(e, t, m, p, d);
                if (u) {
                    var b = u.index;
                    0 !== b && i.push({
                        type: s.a.Text,
                        content: "" + e.slice(0, b)
                    });
                    var k = h.lastIndex;
                    if (n) i.push({
                        type: s.a.Text,
                        content: " <" + Object(a.d)("deleted link", "CreateMessageData") + "> "
                    });
                    else {
                        var y = (u[1] ? "" : "https://") + e.slice(b, k);
                        if (function(e) {
                                return void 0 === e && (e = ""), l.test(e) && !e.includes("clips.twitch.tv/2017/")
                            }(y)) {
                            var _ = function(e) {
                                void 0 === e && (e = "");
                                var t = e.match(l);
                                return null === t ? "" : t && t.length > 0 && void 0 !== t.index ? t[1] : ""
                            }(y);
                            i.push({
                                type: s.a.ClipLink,
                                content: {
                                    slug: _,
                                    url: y,
                                    displayText: e.slice(b, k)
                                }
                            })
                        } else if (Object(c.a)(y)) {
                            var C = Object(c.b)(y);
                            i.push({
                                type: s.a.VideoLink,
                                content: {
                                    id: C,
                                    url: y,
                                    displayText: e.slice(b, k)
                                }
                            })
                        } else i.push({
                            type: s.a.Link,
                            content: {
                                displayText: e.slice(b, k),
                                url: y
                            }
                        })
                    }
                    var E = e.slice(k),
                        N = "";
                    r < o.length - 1 && (N = " "), E && i.push({
                        type: s.a.Text,
                        content: "" + E + N
                    })
                } else if (v.length > 0) i.push.apply(i, v);
                else if (S(e, d)) i.push({
                    type: s.a.CurrentUserHighlight,
                    content: e
                });
                else {
                    var T = i.length && i[i.length - 1];
                    N = p ? "" : " ";
                    if (T && T.type === s.a.Text) T.content += e + N;
                    else {
                        var w = m ? "" : " ";
                        i.push({
                            type: s.a.Text,
                            content: w + e + N
                        })
                    }
                }
            }), i
        }

        function C(e, t) {
            return "https://static-cdn.jtvnw.net/emoticons/v1/" + e + "/" + Math.min(Math.ceil(t), 3) + ".0"
        }

        function S(e, t) {
            if (!t) return !1;
            var n = t.displayName,
                i = t.login;
            return e === n || e.toLowerCase() === i
        }
    },
    l4QG: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        });
        var i = {
            Away: "AWAY",
            Busy: "BUSY",
            Idle: "IDLE",
            Invisible: "INVISIBLE",
            Offline: "OFFLINE",
            Online: "ONLINE"
        }
    },
    l669: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Chat_UnbanUserFromChatRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UnbanUserFromChatRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "unbanUserFromChatRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 132
            }
        };
        n.loc.source = {
            body: "mutation Chat_UnbanUserFromChatRoom($input: UnbanUserFromChatRoomInput!) {\nunbanUserFromChatRoom(input: $input) {\nerror {\ncode\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "l7/s": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Core_Services_Spade_ChatEvent_User"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPartner"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "game"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "id"
                                                },
                                                arguments: [],
                                                directives: []
                                            }, {
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "name"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 116
            }
        };
        n.loc.source = {
            body: "query Core_Services_Spade_ChatEvent_User($id: ID!) {\nuser(id: $id) {\nid\nisPartner\nstream {\nid\ngame {\nid\nname\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    lK86: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "GiftSubscribeButton_Gift_Eligibility"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "recipientLogin"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "String"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "subProductId"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "recipientLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "canGift"
                                        },
                                        arguments: [{
                                            kind: "Argument",
                                            name: {
                                                kind: "Name",
                                                value: "product"
                                            },
                                            value: {
                                                kind: "Variable",
                                                name: {
                                                    kind: "Name",
                                                    value: "subProductId"
                                                }
                                            }
                                        }],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 171
            }
        };
        n.loc.source = {
            body: "query GiftSubscribeButton_Gift_Eligibility($recipientLogin: String $subProductId: String!) {\nuser(login: $recipientLogin) {\nid\nself {\ncanGift(product: $subProductId)\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    m4HT: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            return parseInt(t, 10) < parseInt(e, 10) ? t + "_" + e : e + "_" + t
        }, t.b = function(e, t) {
            return e.split("_").find(function(e) {
                return e !== t
            }) || null
        }
    },
    "mR/9": function(e, t) {},
    mRH2: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportContent"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "contentID"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 111
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUser($input: ReportContentInput!) {\nreportContent(input: $input) {\ncontentID\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    mbxv: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("+V/3"),
            o = n("Odds"),
            s = (n("2IkU"), n("6sO2")),
            l = n("vH/s"),
            d = function(e) {
                var t = Date.now() / 1e3;
                e.badge_type = e.badge_type.toLowerCase().replace(/( |\s)/g, "_"), s.o.tracking.track(l.SpadeEventType.ChatBadgeClick, Object.assign({
                    client_time: t
                }, e))
            };
        n.d(t, "a", function() {
            return c
        });
        var c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isHovering: !1
                }, t.onMouseOver = function() {
                    t.setState({
                        isHovering: !0
                    })
                }, t.onMouseOut = function() {
                    t.setState({
                        isHovering: !1
                    })
                }, t.onBadgeClickHandler = function() {
                    d({
                        badge_type: t.props.badge.title,
                        badge_url_target: t.targetURL
                    })
                }, t
            }
            return i.__extends(t, e), t.prototype.render = function() {
                var e = this.props.badge,
                    t = e.title,
                    n = e.image1x,
                    i = e.image2x,
                    r = e.image4x,
                    l = a.createElement("img", {
                        alt: t,
                        "aria-label": Object(s.d)("{badgeTitle} badge", {
                            badgeTitle: t
                        }, "Badge"),
                        className: "chat-badge",
                        src: n,
                        srcSet: n + " 1x, " + i + " 2x, " + r + " 4x",
                        onMouseOver: this.onMouseOver,
                        onMouseOut: this.onMouseOut
                    });
                return this.targetURL = this.getTargetURL(), "" !== this.targetURL && (l = a.createElement("a", {
                    href: this.targetURL,
                    onClick: this.onBadgeClickHandler,
                    target: "_blank",
                    "data-a-target": "chat-badge"
                }, l)), this.state.isHovering ? a.createElement(o._52, {
                    align: o._53.Left,
                    "data-a-target": "chat-badge",
                    display: o.R.Inline,
                    key: n,
                    label: t,
                    offsetY: "0.9rem"
                }, l) : l
            }, t.prototype.getTargetURL = function() {
                var e = this.props.badge;
                switch (e.clickAction) {
                    case r.d:
                        return e.clickURL;
                    case r.b:
                        return e.channelName ? this.getSubscriberLink() : "";
                    case r.c:
                        return "https://www.twitch.tv/products/turbo?ref=chat_badge";
                    default:
                        return ""
                }
            }, t.prototype.getSubscriberLink = function() {
                return "https://www.twitch.tv/" + this.props.badge.channelName + "/subscribe?ref=in_chat_subscriber_link"
            }, t
        }(a.Component)
    },
    mmQh: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportUserCommunity"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportUserInCommunityInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportUserInCommunity"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 138
            }
        };
        n.loc.source = {
            body: "mutation ReportUserModal_ReportUserCommunity($input: ReportUserInCommunityInput!) {\nreportUserInCommunity(input: $input) {\nuser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    mmly: function(e, t) {},
    mqvl: function(e, t, n) {
        "use strict";
        t.a = function(e, t) {
            switch (e.type) {
                case i.b.Playing:
                    return {
                        type: i.a.Playing,
                        "Symbol(id)": t,
                        __typename: "Playing",
                        game: {
                            id: e.game_id,
                            name: e.game,
                            "Symbol(id)": t + ".game",
                            __typename: "Game"
                        }
                    };
                case i.b.Streaming:
                    var n = {
                        type: i.a.Streaming,
                        "Symbol(id)": t,
                        __typename: "Streaming",
                        stream: {
                            id: e.channel_id,
                            game: null,
                            "Symbol(id)": t + ".stream",
                            __typename: "Stream"
                        }
                    };
                    return e.game && e.game_id && (n.stream.game = {
                        id: e.game_id,
                        name: e.game,
                        "Symbol(id)": t + ".stream.game",
                        __typename: "Game"
                    }), n;
                case i.b.Watching:
                    var a = {
                        type: i.a.Watching,
                        "Symbol(id)": t,
                        __typename: "Watching",
                        user: {
                            id: e.channel_id,
                            login: e.channel_login,
                            displayName: e.channel_display_name,
                            "Symbol(id)": t + ".user",
                            __typename: "User",
                            hosting: {
                                id: e.hosted_channel_id || null,
                                displayName: e.hosted_channel_display_name || null,
                                login: e.hosted_channel_login || null,
                                "Symbol(id)": t + ".user.hosting",
                                __typename: "User"
                            }
                        }
                    };
                    return a;
                default:
                    return null
            }
        };
        var i = n("Ex+h")
    },
    "mw/a": function(e, t, n) {
        "use strict";
        var i, a;
        n.d(t, "a", function() {
                return i
            }), n.d(t, "b", function() {
                return a
            }),
            function(e) {
                e.ChannelFeedComment = "CHANNEL_FEED_COMMENT_REPORT", e.ChannelFeedPost = "CHANNEL_FEED_POST_REPORT", e.Chat = "CHAT_REPORT", e.Clip = "CLIP_REPORT", e.Collection = "COLLECTION_REPORT", e.Community = "COMMUNITY_REPORT", e.Event = "EVENT_REPORT", e.Extension = "EXTENSION_REPORT", e.LiveUp = "LIVE_UP_REPORT", e.Raid = "RAID_REPORT", e.Room = "ROOM_REPORT", e.StreamUp = "STREAM_UP_REPORT", e.User = "USER_REPORT", e.VideoChatMessage = "VOD_COMMENT_REPORT", e.Vod = "VOD_REPORT", e.Whisper = "WHISPER_REPORT"
            }(i || (i = {})),
            function(e) {
                e.BitsViolation = "bits_violation", e.ChatBanEvasion = "chat_ban_evasion", e.Cheating = "cheating", e.Gore = "gore", e.Harassment = "harassment", e.Harm = "harm", e.HatefulConduct = "hateful_conduct", e.Impersonation = "impersonation", e.Miscategorized = "miscategorized", e.OffensiveUsername = "offensive_username", e.Other = "other", e.Porn = "porn", e.Prohibited = "prohibited", e.SelfHarm = "selfharm", e.SexualContent = "sexual_content", e.SexualViolence = "sexual_violence", e.Spam = "spam", e.TosBanEvasion = "tos_ban_evasion", e.Underaged = "underaged"
            }(a || (a = {}))
    },
    mwvJ: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return i
            }),
            function(e) {
                e[e.Text = 0] = "Text", e[e.CurrentUserHighlight = 1] = "CurrentUserHighlight", e[e.Mention = 2] = "Mention", e[e.Link = 3] = "Link", e[e.Emote = 4] = "Emote", e[e.ClipLink = 5] = "ClipLink", e[e.VideoLink = 6] = "VideoLink"
            }(i || (i = {}))
    },
    nEoF: function(e, t, n) {
        "use strict";
        n.d(t, "c", function() {
            return a
        }), n.d(t, "b", function() {
            return r
        }), n.d(t, "a", function() {
            return i
        });
        var i, a = {
                TriHard: {
                    count: 196568036
                },
                Kappa: {
                    count: 192158118
                },
                "4Head": {
                    count: 155758710
                },
                PogChamp: {
                    count: 151485090
                },
                cmonBruh: {
                    count: 146352878
                },
                BibleThump: {
                    count: 56472964
                },
                WutFace: {
                    count: 45069031
                },
                Kreygasm: {
                    count: 41387580
                },
                DansGame: {
                    count: 38097659
                },
                hi5F: {
                    count: 34986404
                },
                SMOrc: {
                    count: 34734484
                },
                KappaPride: {
                    count: 34262839
                },
                VoHiYo: {
                    count: 27886434
                },
                SwiftRage: {
                    count: 24561900
                },
                ResidentSleeper: {
                    count: 24438298
                },
                EleGiggle: {
                    count: 19891526
                },
                FailFish: {
                    count: 19118343
                },
                NotLikeThis: {
                    count: 18802905
                },
                Keepo: {
                    count: 18351415
                },
                BabyRage: {
                    count: 18220906
                },
                MingLee: {
                    count: 18026207
                },
                pbfSSH: {
                    count: 16911241
                },
                forsenE: {
                    count: 14960299
                },
                HeyGuys: {
                    count: 14851569
                },
                ANELE: {
                    count: 14648986
                },
                PJSalt: {
                    count: 14438861
                }
            },
            r = ["354", "49106", "4339", "48", "25", "55338", "70433", "1902", "68856", "81103", "76171", "27509"];
        ! function(e) {
            e.Web = "WEB", e.IOS = "IOS", e.Android = "ANDROID"
        }(i || (i = {}))
    },
    nQZu: function(e, t) {},
    nhCy: function(e, t) {},
    nmYW: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "blockedUsers"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "blockedUsers"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 56
            }
        };
        n.loc.source = {
            body: "fragment blockedUsers on User {\nid\nblockedUsers {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    nrdj: function(e, t, n) {
        "use strict";
        var i, a = n("HW6M"),
            r = n("GiK3"),
            o = n("6sO2"),
            s = n("iydZ"),
            l = n("CFVp"),
            d = n("qe65"),
            c = n("Odds");
        n("PPK2");
        ! function(e) {
            e[e.Large = 4] = "Large", e[e.Medium = 3] = "Medium", e[e.Small = 2] = "Small", e[e.ExtraSmall = 1.5] = "ExtraSmall", e[e.ExtremelySmall = 1] = "ExtremelySmall"
        }(i || (i = {}));
        var u = function(e) {
            var t = e.bitsConfig && e.bitsConfig.indexedActions[e.prefix.toLowerCase()];
            t || (t = Object(l.b)());
            var n = t.orderedTiers.find(function(t) {
                return t.bits <= (e.amount || 100)
            });
            n || (n = t.orderedTiers[0]);
            var u = e.display === c.R.Inline || e.display === c.R.InlineFlex || e.display === c.R.InlineBlock,
                m = null,
                p = a("cheermote-for-amount__cheer-amount", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer-amount--medium": e.size === i.Medium
                }, {
                    "cheermote-for-amount__cheer-amount--small": e.size === i.Small || e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-amount--extremely-small": e.size === i.ExtremelySmall
                });
            if (void 0 !== e.amount && e.showAmount) {
                var h = e.formattedNumber ? Object(o.e)(e.amount) : e.amount;
                m = r.createElement(c._2, {
                    padding: e.size === i.Small ? 0 : void 0,
                    textAlign: e.size === i.Small ? c._45.Center : void 0
                }, r.createElement("strong", {
                    className: p,
                    style: {
                        color: n.color
                    }
                }, h))
            }
            var g = a("cheermote-for-amount__cheer-image", {
                    "cheermote-for-amount__display--table-cell": !u
                }, {
                    "cheermote-for-amount__cheer--inline": u
                }, {
                    "cheermote-for-amount__cheer-image--small": e.size === i.Small
                }, {
                    "cheermote-for-amount__cheer-image--extra-small": e.size === i.ExtraSmall
                }, {
                    "cheermote-for-amount__cheer-image--extremely-small": e.size === i.ExtremelySmall
                }),
                f = r.createElement(d.a, {
                    className: g,
                    sources: Object(s.b)(n, e.size || i.Large, e.animated)
                });
            return e.showImage || (f = null), r.createElement(c._2, {
                className: "cheermote-for-amount",
                alignItems: e.alignItems,
                display: e.display
            }, r.createElement("span", null, f, m))
        };
        n.d(t, "b", function() {
            return i
        }), n.d(t, "a", function() {
            return u
        })
    },
    oFw4: function(e, t) {},
    oSFp: function(e, t, n) {
        "use strict";
        var i = n("A5Hr"),
            a = n("TToO"),
            r = n("GiK3"),
            o = n("RH2O"),
            s = n("2KeS"),
            l = n("+8VM"),
            d = n("V5M+"),
            c = n("CSlQ"),
            u = n("Odds"),
            m = (n("oFw4"), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.handleClose = function(e, n) {
                        t.props.closeModal(), t.props.onClose && t.props.onClose(e, n)
                    }, t
                }
                return a.__extends(t, e), t.prototype.render = function() {
                    return r.createElement(u._35, {
                        className: "reporting-modal__container",
                        background: u.n.Base,
                        padding: {
                            x: 2,
                            y: 3
                        }
                    }, r.createElement(i.b, {
                        onClose: this.handleClose,
                        reportContext: this.props.reportContext,
                        title: this.props.title,
                        defaultDescription: this.props.defaultDescription
                    }), r.createElement(l.a, null))
                }, t
            }(r.Component));
        var p = Object(s.d)(Object(c.d)("ReportUserModal"), Object(o.b)(null, function(e) {
            return Object(s.b)({
                closeModal: d.c
            }, e)
        }))(m);
        n.d(t, !1, function() {}), n.d(t, !1, function() {
            return i.c
        }), n.d(t, !1, function() {
            return i.a
        }), n.d(t, !1, function() {}), n.d(t, !1, function() {
            return i.b
        }), n.d(t, !1, function() {
            return m
        }), n.d(t, "a", function() {
            return p
        })
    },
    odx1: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return d
        });
        var i, a = n("TToO"),
            r = n("GiK3"),
            o = (n.n(r), n("iOr9")),
            s = n("bZTi"),
            l = n("Odds");
        ! function(e) {
            e.TREATMENT = "treatment", e.CONTROL = "control"
        }(i || (i = {}));
        var d = function(e) {
            var t, d = {
                    failSilently: !1,
                    placeholder: r.createElement(l._14, {
                        width: 82,
                        height: 30
                    })
                },
                c = {
                    name: "TWILIGHT_PRIME_SUB_CREDIT_API_WEXIT",
                    assignments: (t = {
                        fallback: function() {
                            return s.a.wrap(function() {
                                return n.e(60).then(n.bind(null, "tkxl"))
                            }, "SubscribeWithPrimeButton", d)(e)
                        }
                    }, t[i.TREATMENT] = function() {
                        return s.a.wrap(function() {
                            return n.e(59).then(n.bind(null, "JJaH"))
                        }, "PrimeSubscribeButton", d)(e)
                    }, t),
                    loader: function() {
                        return r.createElement(l._14, {
                            width: 82,
                            height: 30
                        })
                    }
                };
            return r.createElement(o.a, a.__assign({}, c))
        }
    },
    p8c9: function(e, t) {},
    pQNb: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("6sO2"),
            o = n("FDYX"),
            s = n("Odds"),
            l = (n("Z+EN"), function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    if (this.hasDiscount(this.props.subscriptionProducts)) {
                        var e = this.getMessage();
                        return a.createElement(s._35, {
                            textAlign: s._45.Center,
                            className: "sub-discount-banner",
                            padding: 1,
                            color: s.K.Overlay,
                            "data-test-selector": "sub-discount-banner"
                        }, a.createElement(s.Q, {
                            bold: !0
                        }, e))
                    }
                    return null
                }, t.prototype.getMessage = function() {
                    var e = Object(o.b)(this.props.subscriptionProducts[0], this.props.isGift);
                    return this.props.isGift ? Object(r.d)("Gift a sub and get {percent} off!", {
                        percent: Object(r.e)(e / 100, "percent")
                    }, "SubDiscountBanner") : Object(r.d)("Get {percent} off the first month of any paid subscription!", {
                        percent: Object(r.e)(e / 100, "percent")
                    }, "SubDiscountBanner")
                }, t.prototype.hasDiscount = function(e) {
                    return this.props.isGift ? Object(o.c)(e) : Object(o.d)(e)
                }, t
            }(a.Component));
        n.d(t, !1, function() {
            return "sub-discount-banner"
        }), n.d(t, "a", function() {
            return l
        })
    },
    "pV+t": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "login"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 62
            }
        };
        n.loc.source = {
            body: "query ChatUser($login: String!) {\nuser(login: $login) {\nid\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pe3h: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomPickerOption"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPreviewable"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "minimumAllowedRole"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isUnread"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "unreadMentionCount"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "permissions"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "sendMessages"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 313
            }
        };
        n.loc.source = {
            body: "query RoomPickerOption ($channelID: ID! $userID: ID! $roomID: ID!) {\nchatRoomBanStatus(channelID: $channelID userID: $userID) {\nisPermanent\n}\nroom(id: $roomID) {\nid\nisPreviewable\nminimumAllowedRole\nowner {\nid\nself {\nisChannelMember\n}\n}\nself {\nisMuted\nisUnread\nunreadMentionCount\npermissions {\nsendMessages\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pexS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ClipsChatCard_Clip"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "slug"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "clip"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "slug"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thumbnailURL"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "slug"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "url"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "curator"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcaster"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 151
            }
        };
        n.loc.source = {
            body: "query ClipsChatCard_Clip($slug: ID!) {\nclip(slug: $slug) {\nid\nthumbnailURL\ntitle\nslug\nurl\ncurator {\nid\ndisplayName\n}\nbroadcaster {\nid\ndisplayName\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    pg5l: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatSettings_CurrentUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "displayName"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "chatColor"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 236
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatSettings_CurrentUser($channelLogin: String!) {\ncurrentUser {\nid\nlogin\ndisplayName\nchatColor\n}\nuser(login: $channelLogin) {\nid\nself {\ndisplayBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    phns: function(e, t, n) {
        "use strict";
        var i = n("3zLD"),
            a = n("RH2O"),
            r = n("7vx8"),
            o = n("Aj/L"),
            s = n("CSlQ"),
            l = n("TToO"),
            d = n("GiK3"),
            c = n("2KeS"),
            u = n("oIkB"),
            m = n("+xm8"),
            p = n("f2i/"),
            h = "FriendEdge",
            g = "IncomingFriendRequestEdge",
            f = "",
            v = "OutgoingFriendRequestEdge";

        function b(e, t, n, i) {
            return {
                optimisticResponse: (a = {}, a[e] = {
                    __typename: t,
                    user: {
                        __typename: "User",
                        id: n,
                        self: {
                            __typename: "UserSelfConnection",
                            friendship: {
                                __typename: i
                            }
                        }
                    }
                }, a)
            };
            var a
        }
        var k = n("6sO2"),
            y = n("Odds"),
            _ = n("ilhN");
        var C = Object(i.compose)(Object(a.b)(null, function(e) {
                return Object(c.b)({
                    onLoginClick: function() {
                        return p.f(m.a.FriendAdd)
                    }
                }, e)
            }), Object(r.a)(_, {
                name: "onCreateFriendRequest",
                options: function(e) {
                    return l.__assign({}, Object(u.a)({
                        targetID: e.targetID
                    }), b("createFriendRequest", "CreateFriendRequestPayload", e.targetID, v))
                }
            }))(function(e) {
                var t = Object(k.d)("Add Friend", "AddFriendButton");
                return d.createElement(y.v, {
                    ariaLabel: t,
                    onClick: e.isLoggedIn ? e.onCreateFriendRequest : e.onLoginClick,
                    "data-test-selector": "add-button"
                }, t)
            }),
            S = n("0Hcb"),
            E = n("QkQX"),
            N = Object(i.compose)(Object(r.a)(S, {
                name: "onAcceptFriendRequest",
                options: function(e) {
                    return l.__assign({}, Object(u.a)({
                        targetID: e.targetID
                    }), b("acceptFriendRequest", "AcceptFriendRequestPayload", e.targetID, h))
                }
            }), Object(r.a)(E, {
                name: "onRejectFriendRequest",
                options: function(e) {
                    return l.__assign({}, Object(u.a)({
                        targetID: e.targetID
                    }), b("rejectFriendRequest", "RejectFriendRequestPayload", e.targetID, f))
                }
            }))(function(e) {
                var t = Object(k.d)("Accept", "IncomingFriendRequestButton"),
                    n = Object(k.d)("Reject", "IncomingFriendRequestButton");
                return d.createElement(y._8, null, d.createElement(y._8, {
                    display: y.R.InlineBlock,
                    margin: {
                        right: .5
                    }
                }, d.createElement(y._52, {
                    align: y._53.Left,
                    label: Object(k.d)("Accept Friend Request", "IncomingFriendRequestButton")
                }, d.createElement(y.v, {
                    ariaLabel: t,
                    onClick: e.onAcceptFriendRequest,
                    "data-test-selector": "accept-button"
                }, t))), d.createElement(y._52, {
                    align: y._53.Left,
                    label: Object(k.d)("Reject Friend Request", "IncomingFriendRequestButton")
                }, d.createElement(y.v, {
                    ariaLabel: n,
                    onClick: e.onRejectFriendRequest,
                    type: y.B.Alert,
                    "data-test-selector": "reject-button"
                }, n)))
            }),
            T = n("x1ax"),
            w = Object(i.compose)(Object(r.a)(T, {
                name: "onCancelFriendRequest",
                options: function(e) {
                    return l.__assign({}, Object(u.a)({
                        targetID: e.targetID
                    }), b("cancelFriendRequest", "CancelFriendRequestPayload", e.targetID, f))
                }
            }))(function(e) {
                var t = Object(k.d)("Cancel Request", "OutgoingFriendRequestButton");
                return d.createElement(y.v, {
                    ariaLabel: t,
                    onClick: e.onCancelFriendRequest,
                    "data-test-selector": "cancel-button"
                }, t)
            }),
            D = n("Ugo3"),
            R = Object(i.compose)(Object(r.a)(D, {
                name: "onUnfriendUser",
                options: function(e) {
                    return l.__assign({}, Object(u.a)({
                        targetID: e.targetID
                    }), b("unfriendUser", "UnfriendUserPayload", e.targetID, f))
                }
            }))(function(e) {
                var t = Object(k.d)("Friends", "UnfriendButton"),
                    n = Object(k.d)("Unfriend", "UnfriendButton");
                return d.createElement(y.v, {
                    ariaLabel: n,
                    onClick: e.onUnfriendUser,
                    statusAlertText: n,
                    "data-test-selector": "unfriend-button"
                }, t)
            }),
            O = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return l.__extends(t, e), t.prototype.componentDidMount = function() {
                    this.props.latencyTracking.reportInteractive()
                }, t.prototype.render = function() {
                    if (!this.props.friendData && this.props.data && (this.props.data.loading || this.props.data.error)) return d.createElement(y._14, {
                        height: 30,
                        width: 60
                    });
                    var e = this.props.friendData || this.props.data;
                    if (!e || !e.user || !e.user.self || this.props.targetID === this.props.currentUserID) return null;
                    if (!this.props.isLoggedIn) return d.createElement(C, {
                        isLoggedIn: this.props.isLoggedIn,
                        targetID: this.props.targetID
                    });
                    switch (e.user.self.friendship ? e.user.self.friendship.__typename : f) {
                        case h:
                            return d.createElement(R, {
                                targetID: this.props.targetID
                            });
                        case g:
                            return d.createElement(N, {
                                targetID: this.props.targetID
                            });
                        case v:
                            return d.createElement(w, {
                                targetID: this.props.targetID
                            });
                        case f:
                        default:
                            return d.createElement(C, {
                                isLoggedIn: this.props.isLoggedIn,
                                targetID: this.props.targetID
                            })
                    }
                }, t
            }(d.Component),
            I = n("7iNp");
        var M = Object(i.compose)(Object(s.d)("FriendButton"), Object(a.b)(function(e) {
            var t = Object(o.c)(e);
            return {
                currentUserID: t && t.id,
                isLoggedIn: Object(o.d)(e)
            }
        }), Object(r.a)(I, {
            options: function(e) {
                return {
                    variables: {
                        id: e.targetID
                    }
                }
            },
            skip: function(e) {
                return !!e.friendData || !e.isLoggedIn || e.currentUserID === e.targetID
            }
        }))(O);
        n.d(t, "a", function() {
            return M
        })
    },
    pzcm: function(e, t) {},
    "q+qZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "CreateRoomButton_CreateRoom"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CreateRoomInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "createRoom"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "minLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "maxLength"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 131
            }
        };
        n.loc.source = {
            body: "mutation CreateRoomButton_CreateRoom($input: CreateRoomInput!) {\ncreateRoom(input: $input) {\nerror {\ncode\nminLength\nmaxLength\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    q4rf: function(e, t) {},
    q8Cw: function(e, t) {},
    qDcU: function(e, t) {},
    qe65: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("RH2O"),
            o = n("NXs7"),
            s = n("0nzt"),
            l = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this.props,
                        t = (e.defaultRes, e.sources),
                        n = (e.darkModeEnabled, i.__rest(e, ["defaultRes", "sources", "darkModeEnabled"])),
                        r = this.props.darkModeEnabled ? t.dark : t.light,
                        o = Object.keys(r);
                    delete n.dispatch;
                    var s = i.__assign({}, n, {
                        src: r[this.props.defaultRes || o[0]],
                        srcSet: o.map(function(e) {
                            return r[e] + " " + e
                        }).join(",")
                    });
                    return a.createElement("img", i.__assign({}, s, {
                        onLoad: this.props.onLoad
                    }))
                }, t
            }(a.Component);
        var d = Object(r.b)(function(e) {
            return {
                darkModeEnabled: Object(s.a)(e) === o.a.Dark
            }
        })(l);
        n.d(t, "a", function() {
            return d
        })
    },
    qkCi: function(e, t, n) {
        "use strict";
        n.d(t, "b", function() {
            return i
        }), n.d(t, "c", function() {
            return a
        }), n.d(t, "e", function() {
            return r
        }), n.d(t, "a", function() {
            return o
        });
        var i, a, r, o, s = n("aMxy");
        n.o(s, "ModerationActions") && n.d(t, "d", function() {
                return s.ModerationActions
            }),
            function(e) {
                e[e.Message = 0] = "Message", e[e.Moderation = 1] = "Moderation", e[e.ModerationAction = 2] = "ModerationAction", e[e.TargetedModerationAction = 3] = "TargetedModerationAction", e[e.AutoMod = 4] = "AutoMod", e[e.Connected = 5] = "Connected", e[e.Disconnected = 6] = "Disconnected", e[e.Reconnect = 7] = "Reconnect", e[e.Hosting = 8] = "Hosting", e[e.Unhost = 9] = "Unhost", e[e.Hosted = 10] = "Hosted", e[e.Subscription = 11] = "Subscription", e[e.Resubscription = 12] = "Resubscription", e[e.SubGift = 13] = "SubGift", e[e.Clear = 14] = "Clear", e[e.SubscriberOnlyMode = 15] = "SubscriberOnlyMode", e[e.FollowerOnlyMode = 16] = "FollowerOnlyMode", e[e.SlowMode = 17] = "SlowMode", e[e.EmoteOnlyMode = 18] = "EmoteOnlyMode", e[e.RoomMods = 19] = "RoomMods", e[e.RoomState = 20] = "RoomState", e[e.Raid = 21] = "Raid", e[e.Unraid = 22] = "Unraid", e[e.Ritual = 23] = "Ritual", e[e.Notice = 24] = "Notice", e[e.Info = 25] = "Info", e[e.BadgesUpdated = 26] = "BadgesUpdated", e[e.Purchase = 27] = "Purchase", e[e.BitsCharity = 28] = "BitsCharity", e[e.CrateGift = 29] = "CrateGift", e[e.RewardGift = 30] = "RewardGift"
            }(i || (i = {})),
            function(e) {
                e[e.Post = 0] = "Post", e[e.Action = 1] = "Action", e[e.PostWithMention = 2] = "PostWithMention"
            }(a || (a = {})),
            function(e) {
                e[e.Ban = 0] = "Ban", e[e.Timeout = 1] = "Timeout"
            }(r || (r = {})),
            function(e) {
                e[e.MessageRejectedPrompt = 0] = "MessageRejectedPrompt", e[e.MessageRejected = 1] = "MessageRejected", e[e.MessageAllowed = 2] = "MessageAllowed", e[e.MessageDenied = 3] = "MessageDenied"
            }(o || (o = {}))
    },
    "qzJ+": function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("6sO2"),
            r = n("oIkB"),
            o = n("HM6l"),
            s = n("9RMu"),
            l = n("l21v");
        var d = n("BVQ1"),
            c = n("m4HT"),
            u = n("+gWs");

        function m(e) {
            try {
                var t = a.o.apollo.client.cache.readQuery({
                    query: u,
                    variables: {
                        id: e
                    }
                }, !0);
                return t ? t.whisperThread : null
            } catch (e) {
                return null
            }
        }
        t.a = function(e) {
            var t = e.currentUserID,
                n = e.emotes,
                p = e.message,
                h = e.recipientUserID;
            if ("" === t || "" === p || "" === h) return Promise.reject(new Error("Tried to send a whisper with nonsensical parameters."));
            var g = Object(o.b)(),
                f = i.__assign({
                    mutation: d
                }, Object(r.a)({
                    message: p,
                    nonce: g,
                    recipientUserID: h
                })),
                v = Object(c.a)(t, h),
                b = m(v);
            if (b) {
                var k = function(e, t) {
                    for (var n = [], i = /\S+/g, a = i.exec(e); a;) {
                        var r = a[0],
                            o = t[r];
                        if (o) {
                            var s = Object(l.d)(e.slice(0, a.index)),
                                d = s ? s.length : a.index;
                            n.push({
                                id: o.id,
                                start: d,
                                end: d + r.length - 1
                            })
                        }
                        a = i.exec(e)
                    }
                    return n
                }(p, n).map(s.a);
                f.optimisticResponse = {
                    sendWhisper: {
                        __typename: "SendWhisperPayload",
                        message: {
                            content: {
                                content: p,
                                emotes: k,
                                __typename: "MessageBody"
                            },
                            from: {
                                id: t,
                                __typename: "User"
                            },
                            id: g,
                            sentAt: (new Date).toISOString(),
                            deletedAt: null,
                            editedAt: null,
                            __typename: "WhisperMessage"
                        }
                    }
                }, f.update = function(e, t) {
                    var n = "" + (parseInt(b.messages.edges[0].cursor, 10) + 1) || "";
                    if (t.data) {
                        var i = m(v);
                        if (i) {
                            var a = i.messages.edges.findIndex(function(e) {
                                return e.cursor === n
                            });
                            if (a < 0) {
                                var r = {
                                    cursor: n,
                                    node: t.data.sendWhisper.message,
                                    __typename: "WhisperMessageEdge"
                                };
                                i.messages.edges.unshift(r)
                            } else i.messages.edges[a].node = t.data.sendWhisper.message;
                            i.userLastMessageRead.sentAt = t.data.sendWhisper.message.sentAt, i.unreadMessagesCount = 0, e.writeQuery({
                                query: u,
                                data: {
                                    whisperThread: i
                                }
                            })
                        }
                    }
                }
            }
            return a.o.apollo.client.mutate(f)
        }
    },
    rCmJ: function(e, t, n) {
        "use strict";
        var i = n("zgdU");
        n.d(t, "a", function() {
            return i.a
        })
    },
    rIzn: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return a
        });
        var i = n("6sO2"),
            a = function() {
                return i.l.get("ritualsFeatureFlagOverride", i.b.get("viewer_milestones_enabled", !1))
            }
    },
    rMeN: function(e, t) {},
    rWzl: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "BlockUser"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "BlockUserInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "blockUser"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "targetUser"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "mutation BlockUser($input: BlockUserInput!) {\nblockUser(input: $input) {\ntargetUser {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "s+oZ": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "VideoChatCard_Video"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "videoID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "video"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "videoID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "title"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "previewThumbnailURL"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "width"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "90"
                                    }
                                }, {
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "height"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "51"
                                    }
                                }],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "publishedAt"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 162
            }
        };
        n.loc.source = {
            body: "query VideoChatCard_Video($videoID: ID!) {\nvideo(id: $videoID) {\nid\ntitle\npreviewThumbnailURL(width: 90 height: 51)\npublishedAt\nowner {\nid\nlogin\ndisplayName\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    ssrl: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "NewChatterRitual_Channel"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        alias: {
                            kind: "Name",
                            value: "channel"
                        },
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "ritualTokens"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "ritualToken"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "stream"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 167
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nquery NewChatterRitual_Channel($id: ID!) {\nchannel: user(id: $id) {\nid\nself {\nritualTokens {\n...ritualToken\n}\n}\nstream {\nid\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    swra: function(e, t, n) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = n("RH2O"),
            a = n("0nzt"),
            r = n("TToO"),
            o = n("GiK3"),
            s = n("j7/Y"),
            l = n("VAT8"),
            d = n("w9tK"),
            c = n("vH/s"),
            u = n("CSlQ"),
            m = n("4d+L"),
            p = n("Odds"),
            h = function(e) {
                function t() {
                    return null !== e && e.apply(this, arguments) || this
                }
                return r.__extends(t, e), t.prototype.render = function() {
                    return o.createElement(p._8, {
                        className: Object(l.c)(this.props.theme),
                        display: p.R.Flex,
                        fullHeight: !0,
                        fullWidth: !0
                    }, o.createElement(p._35, {
                        background: p.n.Alt2,
                        color: p.K.Base,
                        display: p.R.Flex,
                        flexGrow: 0,
                        flexShrink: 0,
                        overflow: p._11.Hidden,
                        fullHeight: !0,
                        fullWidth: !0
                    }, o.createElement(m.a, {
                        channelLogin: this.props.match.params.channelLogin,
                        isPopout: !0
                    })))
                }, t = r.__decorate([Object(u.d)("PopoutChatPage", {
                    autoReportInteractive: !0,
                    destination: d.a.ChatPopout
                }), Object(s.a)({
                    location: c.PageviewLocation.Chat
                })], t)
            }(o.Component);
        var g = Object(i.b)(function(e) {
            return {
                theme: Object(a.a)(e)
            }
        })(h);
        n.d(t, "PopoutChatPage", function() {
            return g
        })
    },
    tQTt: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "MuteButton"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isChannelMember"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 106
            }
        };
        n.loc.source = {
            body: "query MuteButton($id: ID!) {\nroom(id: $id) {\nid\nowner {\nid\nself {\nisChannelMember\n}\n}\nself {\nisMuted\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    thJT: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "RequestNewChatterToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RequestRitualTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "requestRitualToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "error"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "code"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "ritualToken"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 185
            }
        };
        i.loc.source = {
            body: '#import "./ritual-token-fragment.gql"\nmutation RequestNewChatterToken($input: RequestRitualTokenInput!) {\nrequestRitualToken(input: $input) {\nerror {\ncode\n}\ntoken {\n...ritualToken\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("j/3B").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    tjbt: function(e, t, n) {
        "use strict";
        (function(e) {
            n.d(t, "a", function() {
                return O
            });
            var i = n("TToO"),
                a = n("GiK3"),
                r = (n.n(a), n("3zLD")),
                o = (n.n(r), n("RH2O")),
                s = n("6sO2"),
                l = n("7vx8"),
                d = n("RweG"),
                c = n("WIs4"),
                u = n("aMxy"),
                m = n("oIkB"),
                p = n("HZww"),
                h = n("Aj/L"),
                g = n("aUOx"),
                f = n("QCOJ"),
                v = n("rIzn"),
                b = n("hcyD"),
                k = n("KfLc"),
                y = n("yqxY"),
                _ = n("Tur5"),
                C = n("ssrl"),
                S = (n.n(C), n("Ti/Y")),
                E = (n.n(S), n("imaO")),
                N = (n.n(E), n("thJT")),
                T = (n.n(N), 3e5),
                w = function(e) {
                    function t() {
                        var t = null !== e && e.apply(this, arguments) || this;
                        return t.state = {
                            closedByError: !1,
                            isLive: !1
                        }, t.eligibilityTimeouts = {}, t.expirationTimeouts = {}, t.getBannerMessage = function() {
                            return Object(s.d)("Click an emote to say hello!", "NewChatterRitual")
                        }, t.getLiveStatus = function(e) {
                            var t = e.pubsub.messages.streamDown ? e.pubsub.messages.streamDown.server_time : 0,
                                n = e.pubsub.messages.streamUp ? e.pubsub.messages.streamUp.server_time : 0;
                            return t || n ? n > t : e.data && e.data.channel && !!e.data.channel.stream.id || !1
                        }, t.setEligibilityTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), i = 0, a = Object.keys(t.eligibilityTimeouts); i < a.length; i++) {
                                var r = a[i];
                                n.has(r) || (clearTimeout(t.eligibilityTimeouts[r]), delete t.eligibilityTimeouts[r])
                            }
                            n.forEach(function(e) {
                                t.eligibilityTimeouts[e] || (t.eligibilityTimeouts[e] = setTimeout(function() {
                                    delete t.eligibilityTimeouts[e], t.isEligible = !0, t.state.isLive && t.requestRitualToken()
                                }, T))
                            })
                        }, t.requestRitualToken = function() {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var e, t;
                                return i.__generator(this, function(n) {
                                    switch (n.label) {
                                        case 0:
                                            Object(k.e)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), e = i.__assign({}, Object(m.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter
                                            })), n.label = 1;
                                        case 1:
                                            return n.trys.push([1, 3, , 4]), [4, this.props.requestToken(e)];
                                        case 2:
                                            return n.sent(), this.isEligible = !1, [3, 4];
                                        case 3:
                                            return t = n.sent(), s.j.error(t, "Failed to request new chatter ritual token."), [3, 4];
                                        case 4:
                                            return [2]
                                    }
                                })
                            })
                        }, t.setExpirationTimeouts = function(e) {
                            for (var n = new Set(e.map(function(e) {
                                    return e.id
                                })), i = 0, a = Object.keys(t.expirationTimeouts); i < a.length; i++) {
                                var r = a[i];
                                n.has(r) || (clearTimeout(t.expirationTimeouts[r]), delete t.expirationTimeouts[r])
                            }
                            e.forEach(function(e) {
                                if (!t.expirationTimeouts[e.id] && e.expiresAt && new Date(e.expiresAt).valueOf() > Date.now()) {
                                    var n = new Date(e.expiresAt).valueOf() - Date.now();
                                    t.expirationTimeouts[e.id] = setTimeout(t.expireRitualToken.bind(e.id), n)
                                }
                            })
                        }, t.expireRitualToken = function(e) {
                            delete t.expirationTimeouts[e];
                            Object(m.e)(C, {
                                id: t.props.channelID
                            }, function(t) {
                                return t.channel && t.channel.self && t.channel.self.ritualTokens && (t.channel.self.ritualTokens = t.channel.self.ritualTokens.filter(function(t) {
                                    return t.id === e
                                })), t
                            })
                        }, t.redeemRitualToken = function(e, n) {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var t, a, r;
                                return i.__generator(this, function(o) {
                                    switch (o.label) {
                                        case 0:
                                            Object(b.a)({
                                                channelID: this.props.channelID,
                                                channelLogin: this.props.channelLogin,
                                                isHostMode: this.props.isHostMode,
                                                fromNewChatterRitual: !0,
                                                subOnlyMode: this.props.isSubsOnlyModeEnabled,
                                                player: this.props.isEmbedded || this.props.isPopout ? f.a.Embed : f.a.Web
                                            }), Object(k.d)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID,
                                                userMessage: n
                                            }), t = i.__assign({}, Object(m.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter,
                                                messageText: n
                                            }), {
                                                optimisticResponse: {
                                                    redeemRitualToken: {
                                                        __typename: "RedeemRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: _.RitualTokenStatus.Redeemed,
                                                            type: _.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), a = null, o.label = 1;
                                        case 1:
                                            return o.trys.push([1, 3, , 4]), [4, this.props.redeemToken(t)];
                                        case 2:
                                            return a = o.sent(), [3, 4];
                                        case 3:
                                            return r = o.sent(), s.j.error(r, "Failed to redeem new chatter ritual."), this.handleGenericError(), [2];
                                        case 4:
                                            if (a.data.redeemRitualToken.error) switch (a.data.redeemRitualToken.error.code) {
                                                case _.RitualTokenMutationErrors.UserBanned:
                                                case _.RitualTokenMutationErrors.UserNotFollowing:
                                                case _.RitualTokenMutationErrors.UserNotSubbed:
                                                case _.RitualTokenMutationErrors.UserTimedOut:
                                                    return this.props.onSendMessage(n), this.setState({
                                                        closedByError: !0
                                                    }), [2];
                                                default:
                                                    return this.handleGenericError(), [2]
                                            }
                                            return a.data.redeemRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.dismissRitualToken = function(e) {
                            return i.__awaiter(t, void 0, void 0, function() {
                                var t, n, a;
                                return i.__generator(this, function(r) {
                                    switch (r.label) {
                                        case 0:
                                            Object(k.a)({
                                                bannerMessage: this.getBannerMessage(),
                                                channelID: this.props.channelID
                                            }), t = i.__assign({}, Object(m.a)({
                                                channelID: this.props.channelID,
                                                type: _.RitualTokenType.NewChatter
                                            }), {
                                                optimisticResponse: {
                                                    dismissRitualToken: {
                                                        __typename: "DismissRitualTokenPayload",
                                                        error: null,
                                                        token: {
                                                            id: e,
                                                            expiresAt: null,
                                                            status: _.RitualTokenStatus.Dismissed,
                                                            type: _.RitualTokenType.NewChatter,
                                                            __typename: "RitualToken"
                                                        }
                                                    }
                                                }
                                            }), n = null, r.label = 1;
                                        case 1:
                                            return r.trys.push([1, 3, , 4]), [4, this.props.dismissToken(t)];
                                        case 2:
                                            return n = r.sent(), [3, 4];
                                        case 3:
                                            return a = r.sent(), s.j.error(a, "Failed to redeem new chatter ritual."), [3, 4];
                                        case 4:
                                            return n && n.data.dismissRitualToken.token ? [2] : (this.handleGenericError(), [2])
                                    }
                                })
                            })
                        }, t.handleGenericError = function() {
                            t.props.onPushMessage(Object(g.a)(Object(s.d)("Something went wrong.", "NewChatterRitual"))), t.setState({
                                closedByError: !0
                            })
                        }, t.clearAllTimers = function() {
                            for (var e = 0, n = Object.keys(t.eligibilityTimeouts); e < n.length; e++) {
                                var i = n[e];
                                clearTimeout(t.eligibilityTimeouts[i])
                            }
                            t.eligibilityTimeouts = {};
                            for (var a = 0, r = Object.keys(t.expirationTimeouts); a < r.length; a++) {
                                i = r[a];
                                clearTimeout(t.expirationTimeouts[i])
                            }
                            t.expirationTimeouts = {}
                        }, t
                    }
                    return i.__extends(t, e), t.prototype.componentWillReceiveProps = function(e) {
                        this.props.data && this.props.data.loading || !e.data || !e.data.loading || Object(k.b)({
                            channelID: this.props.channelID
                        });
                        var t = this.getLiveStatus(e);
                        if (this.state.isLive !== t && (this.setState({
                                isLive: t
                            }), t && this.isEligible && this.requestRitualToken()), e.data && e.data.channel && e.data.channel.self && e.data.channel.self.ritualTokens) {
                            var n = e.data.channel.self.ritualTokens;
                            this.setEligibilityTimeouts(n.filter(function(e) {
                                return e.status === _.RitualTokenStatus.Eligible
                            })), this.setExpirationTimeouts(n.filter(function(e) {
                                return !!e.expiresAt
                            }))
                        } else this.clearAllTimers()
                    }, t.prototype.componentWillUnmount = function() {
                        this.clearAllTimers()
                    }, t.prototype.render = function() {
                        return this.props.data && this.props.data.channel ? this.state.closedByError || !this.state.isLive ? null : a.createElement(y.a, {
                            bannerMessage: this.getBannerMessage(),
                            onRitualDismissed: this.dismissRitualToken,
                            onRitualRedeemed: this.redeemRitualToken,
                            ritualTokens: this.props.data.channel.self && this.props.data.channel.self.ritualTokens ? this.props.data.channel.self.ritualTokens : []
                        }) : null
                    }, t
                }(a.Component);

            function D(e) {
                return !e.firstPageLoaded || !Object(v.a)() || !e.isLoggedIn || e.isEmbedded || e.isPopout
            }
            var R, O = Object(r.compose)(Object(o.b)(function(e) {
                return {
                    firstPageLoaded: e.session.firstPageLoaded,
                    isLoggedIn: Object(h.d)(e),
                    isSubsOnlyModeEnabled: e.chat.subsOnlyMode
                }
            }, null), Object(l.a)(C, {
                options: function(e) {
                    return {
                        variables: {
                            id: e.channelID
                        }
                    }
                },
                skip: D
            }), Object(c.a)(function(t) {
                return {
                    query: C,
                    variables: {
                        id: t.channelID
                    },
                    topic: Object(p.p)(t.channelID),
                    type: u.PubsubMessageType.UpdatedChannelChatProperty,
                    mutator: function(n, i) {
                        return n.data.is_rituals_enabled ? e(function() {
                            t.data && t.data.refetch && t.data.refetch()
                        }) : i.channel && i.channel.self && (i.channel.self.ritualTokens = []), i
                    },
                    skip: D(t)
                }
            }), Object(d.a)([{
                topic: function(e) {
                    return Object(p.y)(e.channelID)
                },
                mapMessageTypesToProps: (R = {}, R[u.PubsubMessageType.ChannelStreamUp] = "streamUp", R[u.PubsubMessageType.ChannelStreamDown] = "streamDown", R),
                skip: D
            }]), Object(l.a)(S, {
                name: "dismissToken"
            }), Object(l.a)(E, {
                name: "redeemToken"
            }), Object(l.a)(N, {
                name: "requestToken"
            }))(w)
        }).call(t, n("162o").setImmediate)
    },
    u8SD: function(e, t, n) {
        "use strict";
        t.a = function() {
            var e = this;
            return Object(a.a)(s, {
                props: function(t) {
                    return {
                        blockUserMutation: function(n, a, s, l) {
                            return i.__awaiter(e, void 0, void 0, function() {
                                return i.__generator(this, function(e) {
                                    switch (e.label) {
                                        case 0:
                                            return t.mutate ? [4, t.mutate({
                                                variables: {
                                                    input: {
                                                        targetUserID: n,
                                                        sourceContext: s,
                                                        reason: a
                                                    }
                                                },
                                                optimisticResponse: {
                                                    blockUser: {
                                                        __typename: "BlockUserPayload",
                                                        targetUser: {
                                                            __typename: "User",
                                                            id: n
                                                        }
                                                    }
                                                },
                                                update: function(e) {
                                                    var t = e.readFragment({
                                                        id: Object(o.a)(l),
                                                        fragment: r
                                                    });
                                                    t && (t.blockedUsers.push({
                                                        id: n,
                                                        __typename: "User"
                                                    }), e.writeFragment({
                                                        id: Object(o.a)(l),
                                                        fragment: r,
                                                        data: t
                                                    }))
                                                }
                                            })] : [3, 2];
                                        case 1:
                                            return e.sent(), [3, 3];
                                        case 2:
                                            throw new Error("blockUserMutation is not ready");
                                        case 3:
                                            return [2]
                                    }
                                })
                            })
                        }
                    }
                }
            })
        };
        var i = n("TToO"),
            a = n("7vx8"),
            r = n("nmYW"),
            o = (n.n(r), n("yADj")),
            s = n("rWzl");
        n.n(s)
    },
    uLsu: function(e, t, n) {
        "use strict";
        var i = n("TToO"),
            a = n("GiK3"),
            r = n("3zLD"),
            o = n("6sO2"),
            s = n("1F7R"),
            l = n("7vx8"),
            d = n("u8SD"),
            c = n("Kxgf"),
            u = n("djIP"),
            m = n("OLl6"),
            p = n("pV+t"),
            h = function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.getInvalidUserMessage = function() {
                        return Object(o.d)("No user matching that login.", "IgnoreCommandHandler")
                    }, t.blockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("You cannot ignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: Object(m.a)(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.blockUserMutation(e, u.b.Other, u.a.Chat, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(o.d)("Unable to ignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(o.d)("User successfully ignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("Please specify a user to ignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t.unblockUser = function(e) {
                        return e ? e === t.props.currentUserLogin ? {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("You cannot unignore yourself.", "IgnoreCommandHandler")
                            })
                        } : {
                            deferred: Object(m.a)(e).then(function(e) {
                                if (!e) return {
                                    notice: t.getInvalidUserMessage()
                                };
                                try {
                                    t.props.unblockUserMutation(e, t.props.data && t.props.data.user)
                                } catch (e) {
                                    return {
                                        notice: Object(o.d)("Unable to unignore user", "IgnoreCommandHandler")
                                    }
                                }
                                return {
                                    notice: Object(o.d)("User successfully unignored", "IgnoreCommandHandler")
                                }
                            })
                        } : {
                            deferred: Promise.resolve({
                                notice: Object(o.d)("Please specify a user to unignore", "IgnoreCommandHandler")
                            })
                        }
                    }, t
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    return a.createElement("span", {
                        style: {
                            display: "none"
                        }
                    }, a.createElement(s.a, {
                        command: "ignore",
                        handler: this.blockUser
                    }), a.createElement(s.a, {
                        command: "unignore",
                        handler: this.unblockUser
                    }))
                }, t
            }(a.Component),
            g = Object(r.compose)(Object(l.a)(p, {
                options: function(e) {
                    return {
                        variables: {
                            login: e.currentUserLogin
                        }
                    }
                },
                skip: function(e) {
                    return !e.currentUserLogin
                }
            }), Object(c.a)(), Object(d.a)())(h);
        n.d(t, "a", function() {
            return g
        })
    },
    uXDg: function(e, t, n) {
        "use strict";
        n.d(t, "f", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        }), n.d(t, "d", function() {
            return o
        }), n.d(t, "e", function() {
            return s
        }), n.d(t, "g", function() {
            return l
        }), n.d(t, "a", function() {
            return d
        }), t.l = function(e, t) {
            return {
                type: i,
                data: e,
                contentWidth: t
            }
        }, t.h = function(e, t) {
            return {
                type: a,
                threadID: e,
                contentWidth: t
            }
        }, t.i = function(e, t) {
            return {
                type: r,
                threadID: e,
                contentWidth: t
            }
        }, t.j = function(e, t) {
            return {
                type: o,
                threadID: e,
                contentWidth: t
            }
        }, t.m = function(e) {
            return {
                type: d,
                contentWidth: e
            }
        }, t.k = function(e, t) {
            return {
                type: s,
                threadID: e,
                contentWidth: t
            }
        }, t.n = function(e, t) {
            return {
                type: l,
                threadID: e,
                contentWidth: t
            }
        };
        var i = "whispers.THREAD_OPENED",
            a = "whispers.THREAD_CLOSED",
            r = "whispers.THREAD_COLLAPSED",
            o = "whispers.THREAD_EXPANDED",
            s = "whispers.THREAD_FOCUSED",
            l = "whispers.THREAD_UNFOCUSED",
            d = "whispers.CONTENT_RESIZED"
    },
    urTJ: function(e, t, n) {
        "use strict";
        var i = n("mbxv");
        n.d(t, "a", function() {
            return i.a
        })
    },
    v2Uk: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "FragmentDefinition",
                name: {
                    kind: "Name",
                    value: "ritualsEnabled"
                },
                typeCondition: {
                    kind: "NamedType",
                    name: {
                        kind: "Name",
                        value: "User"
                    }
                },
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "id"
                        },
                        arguments: [],
                        directives: []
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "settings"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isRitualsEnabled"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isRitualsWhitelisted"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 89
            }
        };
        n.loc.source = {
            body: "fragment ritualsEnabled on User {\nid\nsettings {\nisRitualsEnabled\nisRitualsWhitelisted\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    v4vD: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomSettings"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "roomID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "userID"
                        }
                    },
                    type: {
                        kind: "NamedType",
                        name: {
                            kind: "Name",
                            value: "ID"
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "isLoggedIn"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "Boolean"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "roomID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "self"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "isModerator"
                                                },
                                                arguments: [],
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "modes"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "slowModeDurationSeconds"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "userID"
                                }
                            }
                        }],
                        directives: [{
                            kind: "Directive",
                            name: {
                                kind: "Name",
                                value: "include"
                            },
                            arguments: [{
                                kind: "Argument",
                                name: {
                                    kind: "Name",
                                    value: "if"
                                },
                                value: {
                                    kind: "Variable",
                                    name: {
                                        kind: "Name",
                                        value: "isLoggedIn"
                                    }
                                }
                            }]
                        }],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "roles"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isGlobalMod"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isSiteAdmin"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isStaff"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 262
            }
        };
        n.loc.source = {
            body: "query RoomSettings($roomID: ID! $userID: ID $isLoggedIn: Boolean!) {\nroom(id: $roomID) {\nid\nowner {\nid\nlogin\nself {\nisModerator\n}\n}\nmodes {\nslowModeDurationSeconds\n}\n}\nuser(id: $userID) @include(if: $isLoggedIn) {\nid\nroles {\nisGlobalMod\nisSiteAdmin\nisStaff\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vBst: function(e, t, n) {
        "use strict";
        var i;
        n.d(t, "a", function() {
                return a
            }),
            function(e) {
                e.PercentOff = "percent_off", e.FixedValueOff = "fixed_value_off"
            }(i || (i = {}));
        var a = {
            Prime: "prime",
            Tier1: "1000",
            Tier2: "2000",
            Tier3: "3000",
            Custom: "Custom"
        }
    },
    vDGQ: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return a
        }), n.d(t, "c", function() {
            return r
        }), t.d = function(e) {
            if (!e.action || !e.userId) return;
            var t = {
                location: s.PageviewLocation.Channel,
                action: e.action,
                target: e.target,
                type: e.type,
                channel_id: e.channelId,
                reward_id: e.rewardID,
                user_id: e.userId,
                time: Date.now()
            };
            o.o.tracking.track(s.SpadeEventType.CrateNotificationAction, t)
        };
        var i, a, r, o = n("6sO2"),
            s = n("vH/s");
        ! function(e) {
            e.Close = "close", e.DontShowThis = "dont_show_this", e.LearnMore = "learn_more", e.OpenLater = "open_later", e.OpenNow = "open_now", e.Timeout = "timeout", e.TryBeta = "try_beta", e.View = "view"
        }(i || (i = {})),
        function(e) {
            e.Inventory = "inventory", e.OpenCrate = "open_crate"
        }(a || (a = {})),
        function(e) {
            e.Ftue = "ftue", e.ReceiveCrate = "receive_crate", e.ReceiveGift = "receive_giveaway_item", e.BitsIntro = "bits_intro"
        }(r || (r = {}))
    },
    vKYs: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "BlockedUsers"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "blockedUsers"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 61
            }
        };
        n.loc.source = {
            body: "query BlockedUsers {\ncurrentUser {\nid\nblockedUsers {\nid\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    vLl9: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ChatList_Badges"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelLogin"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "String"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "badges"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "FragmentSpread",
                                name: {
                                    kind: "Name",
                                    value: "badge"
                                },
                                directives: []
                            }]
                        }
                    }, {
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "login"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelLogin"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "broadcastBadges"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "badge"
                                        },
                                        directives: []
                                    }]
                                }
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "self"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "selectedBadge"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayBadges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "FragmentSpread",
                                                name: {
                                                    kind: "Name",
                                                    value: "badge"
                                                },
                                                directives: []
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 256
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/badges/models/badge-fragment.gql"\nquery ChatList_Badges($channelLogin: String!) {\nbadges {\n...badge\n}\nuser(login: $channelLogin) {\nid\nbroadcastBadges {\n...badge\n}\nself {\nselectedBadge {\n...badge\n}\ndisplayBadges {\n...badge\n}\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("QU+n").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    vRhQ: function(e, t) {},
    vadT: function(e, t) {},
    vh75: function(e, t, n) {
        "use strict";
        n.d(t, "d", function() {
            return i
        }), n.d(t, "e", function() {
            return a
        }), n.d(t, "f", function() {
            return r
        }), n.d(t, "g", function() {
            return o
        }), n.d(t, "k", function() {
            return s
        }), n.d(t, "h", function() {
            return l
        }), n.d(t, "i", function() {
            return d
        }), n.d(t, "j", function() {
            return c
        }), n.d(t, "l", function() {
            return u
        }), n.d(t, "c", function() {
            return m
        }), n.d(t, "b", function() {
            return p
        }), n.d(t, "n", function() {
            return h
        }), n.d(t, "m", function() {
            return g
        }), n.d(t, "p", function() {
            return f
        }), n.d(t, "o", function() {
            return v
        }), n.d(t, "t", function() {
            return b
        }), n.d(t, "s", function() {
            return k
        }), n.d(t, "v", function() {
            return y
        }), n.d(t, "u", function() {
            return _
        }), n.d(t, "x", function() {
            return C
        }), n.d(t, "w", function() {
            return S
        }), n.d(t, "a", function() {
            return E
        }), n.d(t, "q", function() {
            return N
        }), n.d(t, "r", function() {
            return T
        }), t.R = function(e, t) {
            return {
                type: u,
                channel: e,
                messages: t
            }
        }, t.B = function() {
            return {
                type: a
            }
        }, t.P = function() {
            return {
                type: C
            }
        }, t.I = function() {
            return {
                type: S
            }
        }, t.T = function() {
            return {
                type: r
            }
        }, t.Q = function() {
            return {
                type: i
            }
        }, t.L = function() {
            return {
                type: m
            }
        }, t.E = function() {
            return {
                type: p
            }
        }, t.M = function() {
            return {
                type: h
            }
        }, t.F = function() {
            return {
                type: g
            }
        }, t.K = function() {
            return {
                type: f
            }
        }, t.D = function() {
            return {
                type: v
            }
        }, t.J = function() {
            return {
                type: s
            }
        }, t.A = function(e, t) {
            return {
                type: c,
                channelLogin: e,
                duration: t
            }
        }, t.z = function(e) {
            return {
                type: d,
                duration: e
            }
        }, t.C = function() {
            return {
                type: l
            }
        }, t.N = function() {
            return {
                type: b
            }
        }, t.G = function() {
            return {
                type: k
            }
        }, t.O = function() {
            return {
                type: y
            }
        }, t.H = function() {
            return {
                type: _
            }
        }, t.y = function(e, t) {
            return {
                type: E,
                command: e.toLowerCase(),
                handler: t
            }
        }, t.S = function(e) {
            return {
                type: N,
                command: e.toLowerCase()
            }
        }, t.U = function(e) {
            return {
                type: T,
                customEvent: e
            }
        };
        var i = "chat.CHAT_HIDDEN",
            a = "chat.CHAT_RESET",
            r = "chat.CHAT_SHOWN",
            o = "chat.EMOTE_SETS_UPDATED",
            s = "chat.FOLLOWER_MODE_ENABLED",
            l = "chat.FOLLOWER_MODE_DISABLED",
            d = "chat.FOLLOWER_MODE_DURATION_CHANGED",
            c = "chat.FOLLOWER_MODE_DURATION_PREFERENCE_CHANGED",
            u = "chat.MESSAGES_UPDATED",
            m = "chat.AUTOMOD_ACTIONS_ENABLED",
            p = "chat.AUTOMOD_ACTIONS_DISABLED",
            h = "chat.MODERATION_ACTIONS_ENABLED",
            g = "chat.MODERATION_ACTIONS_DISABLED",
            f = "chat.MOD_ICONS_ENABLED",
            v = "chat.MOD_ICONS_DISABLED",
            b = "chat.SLOW_MODE_ENABLED",
            k = "chat.SLOW_MODE_DISABLED",
            y = "chat.SUBS_ONLY_MODE_ENABLED",
            _ = "chat.SUBS_ONLY_MODE_DISABLED",
            C = "chat.TIMESTAMPS_ENABLED",
            S = "chat.TIMESTAMPS_DISABLED",
            E = "chat.ADD_COMMAND",
            N = "chat.REMOVE_COMMAND",
            T = "chat.RENDER_SENT_CHAT_MESSAGE"
    },
    w0qa: function(e, t) {},
    x1ax: function(e, t, n) {
        var i = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "FriendButton_CancelFriendRequest"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "CancelFriendRequestInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "cancelFriendRequest"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "user"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "FragmentSpread",
                                        name: {
                                            kind: "Name",
                                            value: "friendButtonFragment"
                                        },
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 232
            }
        };
        i.loc.source = {
            body: '#import "twilight/features/friend-button/queries/friend-button-fragment.gql"\nmutation FriendButton_CancelFriendRequest($input: CancelFriendRequestInput!) {\ncancelFriendRequest(input: $input) {\nuser {\nid\n...friendButtonFragment\n}\n}\n}',
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        var a = {};
        i.definitions = i.definitions.concat(n("HC5L").definitions.filter(function(e) {
            if ("FragmentDefinition" !== e.kind) return !0;
            var t = e.name.value;
            return !a[t] && (a[t] = !0, !0)
        })), e.exports = i
    },
    x583: function(e, t) {},
    x6ny: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ReportUserModal_ReportReasons"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "content"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ReportContentType"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "reportReasons"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "content"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "content"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "text"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 114
            }
        };
        n.loc.source = {
            body: "query ReportUserModal_ReportReasons($content: ReportContentType!) {\nreportReasons(content: $content) {\nid\ntext\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    x8iQ: function(e, t) {},
    xZvS: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "DismissPurchaseToken"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "DismissPurchaseTokenInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "dismissPurchaseToken"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "token"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 113
            }
        };
        n.loc.source = {
            body: "mutation DismissPurchaseToken($input:DismissPurchaseTokenInput!) {\ndismissPurchaseToken(input:$input) {\ntoken\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    xfb5: function(e, t) {},
    xrVp: function(e, t, n) {
        "use strict";
        t.b = function(e, t) {
            var n = "";
            switch (t) {
                case o.a.TypedCommand:
                    n = "typed_command";
                    break;
                case o.a.UserMenu:
                    n = "user_menu";
                    break;
                default:
                    n = "user_menu"
            }
            var r = "";
            switch (e) {
                case a.a.Dark:
                    r = "dark";
                    break;
                case a.a.Light:
                    r = "light";
                    break;
                default:
                    r = "light"
            }
            i.n.track(s.SpadeEventType.ThemeChange, {
                source: n,
                mode: r
            })
        }, t.a = function(e) {
            switch (e) {
                case r.a.Archive:
                    return s.SpadeVideoBroadcastType.Archive;
                case r.a.Highlight:
                    return s.SpadeVideoBroadcastType.Highlight;
                case r.a.Upload:
                    return s.SpadeVideoBroadcastType.Upload;
                case r.a.WatchParty:
                    return s.SpadeVideoBroadcastType.WatchParty;
                case r.a.PastPremiere:
                    return s.SpadeVideoBroadcastType.PastPremiere;
                case r.a.PremiereUpload:
                    return s.SpadeVideoBroadcastType.PremiereUpload;
                default:
                    var t = e;
                    return t
            }
        };
        var i = n("6sO2"),
            a = n("NXs7"),
            r = n("6WAQ"),
            o = n("NikC"),
            s = n("vH/s")
    },
    xwpJ: function(e, t, n) {
        "use strict";
        var i = function(e, t) {
                var n = "https://www.twitch.tv/communities/{communityName}".replace("{communityName}", e);
                return 'community report (<a href="{link}">{link}</a>) {description}'.replace(/{link}/g, n).replace(/{description}/, t)
            },
            a = n("6sO2");

        function r() {
            return [{
                id: "other",
                text: Object(a.d)("Other Terms of Service Violation", "ReportUserModal")
            }]
        }
        n.d(t, "a", function() {
            return i
        }), n.d(t, "b", function() {
            return r
        })
    },
    "y0i/": function(e, t) {},
    "y1/w": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RecentRaidsModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 190
            }
        };
        n.loc.source = {
            body: "query RecentRaidsModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    yADj: function(e, t, n) {
        "use strict";
        t.a = function(e) {
            return e && Object(i.c)(e) || ""
        };
        var i = n("+dIz")
    },
    yDSg: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Whispers_Tracking_CurrentUser"
                },
                variableDefinitions: [],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "currentUser"
                        },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "hasTurbo"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "availability"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "login"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 86
            }
        };
        n.loc.source = {
            body: "query Whispers_Tracking_CurrentUser {\ncurrentUser {\nid\nhasTurbo\navailability\nlogin\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    "yTC+": function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "Thread_SetMuteThread"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "UpdateWhisperThreadInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "updateWhisperThread"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "thread"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "isMuted"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 129
            }
        };
        n.loc.source = {
            body: "mutation Thread_SetMuteThread($input: UpdateWhisperThreadInput!) {\nupdateWhisperThread(input: $input) {\nthread {\nid\nisMuted\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    yqxY: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return u
        });
        var i = n("TToO"),
            a = n("GiK3"),
            r = (n.n(a), n("6sO2")),
            o = n("l21v"),
            s = n("Odds"),
            l = n("Tur5"),
            d = n("qDcU"),
            c = (n.n(d), [{
                id: "30259",
                alt: "HeyGuys"
            }, {
                id: "81274",
                alt: "VoHiYo"
            }, {
                id: "64138",
                alt: "SeemsGood"
            }]),
            u = function(e) {
                function t(t) {
                    var n = e.call(this, t) || this;
                    return n.onEmoteClick = function(e) {
                        if (n.renderedTokenID) {
                            var t = e.currentTarget.dataset.emoteString;
                            t ? n.props.onRitualRedeemed(n.renderedTokenID, t) : r.j.warn("[NewChatterRitual] Could not find clicked emote ID.")
                        } else r.j.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.onCloseButtonClick = function() {
                        n.renderedTokenID ? n.props.onRitualDismissed(n.renderedTokenID) : r.j.warn("[NewChatterRitual] Could not find clicked Ritual token.")
                    }, n.getAvailableToken = function() {
                        return n.props.ritualTokens.find(function(e) {
                            return e.type === l.RitualTokenType.NewChatter && e.status === l.RitualTokenStatus.Available && (!e.expiresAt || Date.now() < new Date(e.expiresAt).valueOf())
                        }) || null
                    }, n.renderedTokenID = null, n
                }
                return i.__extends(t, e), t.prototype.render = function() {
                    var e = this,
                        t = this.getAvailableToken();
                    if (this.renderedTokenID = t ? t.id : null, !t) return null;
                    var n = c.map(function(t) {
                        return a.createElement(s._8, {
                            key: t.id,
                            flexShrink: 0,
                            margin: {
                                right: .5
                            }
                        }, a.createElement(s._52, {
                            label: t.alt
                        }, a.createElement(s._6, {
                            alpha: !0,
                            onClick: e.onEmoteClick,
                            "data-emote-string": t.alt,
                            "data-test-selector": "emote-button"
                        }, a.createElement(s._8, {
                            padding: .5
                        }, a.createElement("img", {
                            className: "new-chatter-ritual__emote",
                            src: Object(o.f)(t.id, 3)
                        })))))
                    });
                    return a.createElement(s._35, {
                        background: s.n.Base,
                        border: !0,
                        className: "new-chatter-ritual",
                        margin: {
                            x: 2,
                            bottom: .5
                        },
                        padding: {
                            left: .5,
                            y: .5
                        }
                    }, a.createElement(s._8, {
                        alignItems: s.c.Center,
                        display: s.R.Flex,
                        flexWrap: s.U.NoWrap
                    }, a.createElement(s._8, {
                        flexShrink: 1,
                        margin: {
                            right: .5
                        }
                    }, this.props.bannerMessage), n, a.createElement(s._35, {
                        borderLeft: !0,
                        flexShrink: 0
                    }, a.createElement(s.w, {
                        ariaLabel: "close",
                        icon: s._25.Close,
                        onClick: this.onCloseButtonClick,
                        size: s.x.Large,
                        "data-test-selector": "dismiss-button"
                    }))))
                }, t
            }(a.Component)
    },
    z7Cp: function(e, t) {},
    zI5R: function(e, t) {},
    zLjL: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "Mods"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "user"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "mods"
                                },
                                arguments: [{
                                    kind: "Argument",
                                    name: {
                                        kind: "Name",
                                        value: "first"
                                    },
                                    value: {
                                        kind: "IntValue",
                                        value: "100"
                                    }
                                }],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "edges"
                                        },
                                        arguments: [],
                                        directives: [],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{
                                                kind: "Field",
                                                name: {
                                                    kind: "Name",
                                                    value: "node"
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [{
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "id"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }, {
                                                        kind: "Field",
                                                        name: {
                                                            kind: "Name",
                                                            value: "login"
                                                        },
                                                        arguments: [],
                                                        directives: []
                                                    }]
                                                }
                                            }]
                                        }
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 94
            }
        };
        n.loc.source = {
            body: "query Mods($id: ID!) {\nuser(id: $id) {\nid\nmods(first: 100) {\nedges {\nnode {\nid\nlogin\n}\n}\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zMie: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "RoomInteractionPane"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "id"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "room"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "id"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "id"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "name"
                                },
                                arguments: [],
                                directives: []
                            }, {
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "owner"
                                },
                                arguments: [],
                                directives: [],
                                selectionSet: {
                                    kind: "SelectionSet",
                                    selections: [{
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "id"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "displayName"
                                        },
                                        arguments: [],
                                        directives: []
                                    }, {
                                        kind: "Field",
                                        name: {
                                            kind: "Name",
                                            value: "login"
                                        },
                                        arguments: [],
                                        directives: []
                                    }]
                                }
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 96
            }
        };
        n.loc.source = {
            body: "query RoomInteractionPane($id: ID!) {\nroom(id: $id) {\nid\nname\nowner {\nid\ndisplayName\nlogin\n}\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zVM8: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "query",
                name: {
                    kind: "Name",
                    value: "ViewerCardModActions"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "targetUserID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }, {
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "channelID"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "ID"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "chatRoomBanStatus"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "channelID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "targetUserID"
                                }
                            }
                        }, {
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "userID"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "channelID"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "isPermanent"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 189
            }
        };
        n.loc.source = {
            body: "query ViewerCardModActions($targetUserID: ID! $channelID: ID!) {\n# This is currently backwards on the server\nchatRoomBanStatus(channelID: $targetUserID userID: $channelID) {\nisPermanent\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    },
    zbFZ: function(e, t) {},
    zgdU: function(e, t, n) {
        "use strict";
        n.d(t, "a", function() {
            return r
        });
        var i = n("TToO"),
            a = n("GiK3"),
            r = (n.n(a), function(e) {
                function t() {
                    var t = null !== e && e.apply(this, arguments) || this;
                    return t.setContainerRef = function(e) {
                        t.container = e
                    }, t.handleGlobalClick = function(e) {
                        var n = e.target;
                        t.isParentOf(n) || t.props.onClickOut(e)
                    }, t
                }
                return i.__extends(t, e), t.prototype.componentDidMount = function() {
                    document.addEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.componentWillUnmount = function() {
                    document.removeEventListener("click", this.handleGlobalClick, !0)
                }, t.prototype.render = function() {
                    var e = this.props,
                        t = (e.onClickOut, i.__rest(e, ["onClickOut"]));
                    return a.createElement("div", i.__assign({}, t, {
                        ref: this.setContainerRef
                    }), this.props.children)
                }, t.prototype.isParentOf = function(e) {
                    for (var t = e; t;) {
                        if (t === this.container) return !0;
                        t = t.parentElement
                    }
                    return !1
                }, t
            }(a.Component))
    },
    zzpv: function(e, t) {
        var n = {
            kind: "Document",
            definitions: [{
                kind: "OperationDefinition",
                operation: "mutation",
                name: {
                    kind: "Name",
                    value: "WatchAdModal_Redeeem"
                },
                variableDefinitions: [{
                    kind: "VariableDefinition",
                    variable: {
                        kind: "Variable",
                        name: {
                            kind: "Name",
                            value: "input"
                        }
                    },
                    type: {
                        kind: "NonNullType",
                        type: {
                            kind: "NamedType",
                            name: {
                                kind: "Name",
                                value: "RedeemTrueXAdInput"
                            }
                        }
                    }
                }],
                directives: [],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [{
                        kind: "Field",
                        name: {
                            kind: "Name",
                            value: "redeemTrueXAd"
                        },
                        arguments: [{
                            kind: "Argument",
                            name: {
                                kind: "Name",
                                value: "input"
                            },
                            value: {
                                kind: "Variable",
                                name: {
                                    kind: "Name",
                                    value: "input"
                                }
                            }
                        }],
                        directives: [],
                        selectionSet: {
                            kind: "SelectionSet",
                            selections: [{
                                kind: "Field",
                                name: {
                                    kind: "Name",
                                    value: "grantedBits"
                                },
                                arguments: [],
                                directives: []
                            }]
                        }
                    }]
                }
            }],
            loc: {
                start: 0,
                end: 105
            }
        };
        n.loc.source = {
            body: "mutation WatchAdModal_Redeeem($input:RedeemTrueXAdInput!) {\nredeemTrueXAd(input:$input) {\ngrantedBits\n}\n}",
            name: "GraphQL request",
            locationOffset: {
                line: 1,
                column: 1
            }
        };
        e.exports = n
    }
});
//# sourceMappingURL=pages.popout-chat-01071a1f72dcc801f8ea7e1dd0d73b9a.js.map